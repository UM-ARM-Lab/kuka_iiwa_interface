/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package armlab.lcm.msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class control_mode_parameters implements lcm.lcm.LCMEncodable
{
    public armlab.lcm.msgs.joint_impedance_parameters joint_impedance_params;
    public armlab.lcm.msgs.cartesian_impedance_parameters cartesian_impedance_params;
    public armlab.lcm.msgs.cartesian_control_mode_limits cartesian_control_mode_limits;
    public armlab.lcm.msgs.joint_path_execution_parameters joint_path_execution_params;
    public armlab.lcm.msgs.cartesian_path_execution_parameters cartesian_path_execution_params;
    public armlab.lcm.msgs.control_mode control_mode;
    public double timestamp;
 
    public control_mode_parameters()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6405e1de1a319e2dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(armlab.lcm.msgs.control_mode_parameters.class))
            return 0L;
 
        classes.add(armlab.lcm.msgs.control_mode_parameters.class);
        long hash = LCM_FINGERPRINT_BASE
             + armlab.lcm.msgs.joint_impedance_parameters._hashRecursive(classes)
             + armlab.lcm.msgs.cartesian_impedance_parameters._hashRecursive(classes)
             + armlab.lcm.msgs.cartesian_control_mode_limits._hashRecursive(classes)
             + armlab.lcm.msgs.joint_path_execution_parameters._hashRecursive(classes)
             + armlab.lcm.msgs.cartesian_path_execution_parameters._hashRecursive(classes)
             + armlab.lcm.msgs.control_mode._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.joint_impedance_params._encodeRecursive(outs); 
 
        this.cartesian_impedance_params._encodeRecursive(outs); 
 
        this.cartesian_control_mode_limits._encodeRecursive(outs); 
 
        this.joint_path_execution_params._encodeRecursive(outs); 
 
        this.cartesian_path_execution_params._encodeRecursive(outs); 
 
        this.control_mode._encodeRecursive(outs); 
 
        outs.writeDouble(this.timestamp); 
 
    }
 
    public control_mode_parameters(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public control_mode_parameters(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static armlab.lcm.msgs.control_mode_parameters _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        armlab.lcm.msgs.control_mode_parameters o = new armlab.lcm.msgs.control_mode_parameters();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.joint_impedance_params = armlab.lcm.msgs.joint_impedance_parameters._decodeRecursiveFactory(ins);
 
        this.cartesian_impedance_params = armlab.lcm.msgs.cartesian_impedance_parameters._decodeRecursiveFactory(ins);
 
        this.cartesian_control_mode_limits = armlab.lcm.msgs.cartesian_control_mode_limits._decodeRecursiveFactory(ins);
 
        this.joint_path_execution_params = armlab.lcm.msgs.joint_path_execution_parameters._decodeRecursiveFactory(ins);
 
        this.cartesian_path_execution_params = armlab.lcm.msgs.cartesian_path_execution_parameters._decodeRecursiveFactory(ins);
 
        this.control_mode = armlab.lcm.msgs.control_mode._decodeRecursiveFactory(ins);
 
        this.timestamp = ins.readDouble();
 
    }
 
    public armlab.lcm.msgs.control_mode_parameters copy()
    {
        armlab.lcm.msgs.control_mode_parameters outobj = new armlab.lcm.msgs.control_mode_parameters();
        outobj.joint_impedance_params = this.joint_impedance_params.copy();
 
        outobj.cartesian_impedance_params = this.cartesian_impedance_params.copy();
 
        outobj.cartesian_control_mode_limits = this.cartesian_control_mode_limits.copy();
 
        outobj.joint_path_execution_params = this.joint_path_execution_params.copy();
 
        outobj.cartesian_path_execution_params = this.cartesian_path_execution_params.copy();
 
        outobj.control_mode = this.control_mode.copy();
 
        outobj.timestamp = this.timestamp;
 
        return outobj;
    }
 
}

