/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package armlab.lcm.msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class cartesian_control_mode_limits implements lcm.lcm.LCMEncodable
{
    public armlab.lcm.msgs.cartesian_value_quantity max_path_deviation;
    public armlab.lcm.msgs.cartesian_value_quantity max_cartesian_velocity;
    public armlab.lcm.msgs.cartesian_value_quantity max_control_force;
    public boolean stop_on_max_control_force;
 
    public cartesian_control_mode_limits()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4b3495770cad1468L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(armlab.lcm.msgs.cartesian_control_mode_limits.class))
            return 0L;
 
        classes.add(armlab.lcm.msgs.cartesian_control_mode_limits.class);
        long hash = LCM_FINGERPRINT_BASE
             + armlab.lcm.msgs.cartesian_value_quantity._hashRecursive(classes)
             + armlab.lcm.msgs.cartesian_value_quantity._hashRecursive(classes)
             + armlab.lcm.msgs.cartesian_value_quantity._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.max_path_deviation._encodeRecursive(outs); 
 
        this.max_cartesian_velocity._encodeRecursive(outs); 
 
        this.max_control_force._encodeRecursive(outs); 
 
        outs.writeByte( this.stop_on_max_control_force ? 1 : 0); 
 
    }
 
    public cartesian_control_mode_limits(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public cartesian_control_mode_limits(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static armlab.lcm.msgs.cartesian_control_mode_limits _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        armlab.lcm.msgs.cartesian_control_mode_limits o = new armlab.lcm.msgs.cartesian_control_mode_limits();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.max_path_deviation = armlab.lcm.msgs.cartesian_value_quantity._decodeRecursiveFactory(ins);
 
        this.max_cartesian_velocity = armlab.lcm.msgs.cartesian_value_quantity._decodeRecursiveFactory(ins);
 
        this.max_control_force = armlab.lcm.msgs.cartesian_value_quantity._decodeRecursiveFactory(ins);
 
        this.stop_on_max_control_force = ins.readByte()!=0;
 
    }
 
    public armlab.lcm.msgs.cartesian_control_mode_limits copy()
    {
        armlab.lcm.msgs.cartesian_control_mode_limits outobj = new armlab.lcm.msgs.cartesian_control_mode_limits();
        outobj.max_path_deviation = this.max_path_deviation.copy();
 
        outobj.max_cartesian_velocity = this.max_cartesian_velocity.copy();
 
        outobj.max_control_force = this.max_control_force.copy();
 
        outobj.stop_on_max_control_force = this.stop_on_max_control_force;
 
        return outobj;
    }
 
}

