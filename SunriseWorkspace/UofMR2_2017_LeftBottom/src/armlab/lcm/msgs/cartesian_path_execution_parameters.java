/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package armlab.lcm.msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class cartesian_path_execution_parameters implements lcm.lcm.LCMEncodable
{
    public armlab.lcm.msgs.cartesian_value_quantity max_velocity;
    public armlab.lcm.msgs.cartesian_value_quantity max_acceleration;
    public double max_nullspace_velocity;
    public double max_nullspace_acceleration;
 
    public cartesian_path_execution_parameters()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa5c0017a3cb11d5dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(armlab.lcm.msgs.cartesian_path_execution_parameters.class))
            return 0L;
 
        classes.add(armlab.lcm.msgs.cartesian_path_execution_parameters.class);
        long hash = LCM_FINGERPRINT_BASE
             + armlab.lcm.msgs.cartesian_value_quantity._hashRecursive(classes)
             + armlab.lcm.msgs.cartesian_value_quantity._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.max_velocity._encodeRecursive(outs); 
 
        this.max_acceleration._encodeRecursive(outs); 
 
        outs.writeDouble(this.max_nullspace_velocity); 
 
        outs.writeDouble(this.max_nullspace_acceleration); 
 
    }
 
    public cartesian_path_execution_parameters(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public cartesian_path_execution_parameters(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static armlab.lcm.msgs.cartesian_path_execution_parameters _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        armlab.lcm.msgs.cartesian_path_execution_parameters o = new armlab.lcm.msgs.cartesian_path_execution_parameters();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.max_velocity = armlab.lcm.msgs.cartesian_value_quantity._decodeRecursiveFactory(ins);
 
        this.max_acceleration = armlab.lcm.msgs.cartesian_value_quantity._decodeRecursiveFactory(ins);
 
        this.max_nullspace_velocity = ins.readDouble();
 
        this.max_nullspace_acceleration = ins.readDouble();
 
    }
 
    public armlab.lcm.msgs.cartesian_path_execution_parameters copy()
    {
        armlab.lcm.msgs.cartesian_path_execution_parameters outobj = new armlab.lcm.msgs.cartesian_path_execution_parameters();
        outobj.max_velocity = this.max_velocity.copy();
 
        outobj.max_acceleration = this.max_acceleration.copy();
 
        outobj.max_nullspace_velocity = this.max_nullspace_velocity;
 
        outobj.max_nullspace_acceleration = this.max_nullspace_acceleration;
 
        return outobj;
    }
 
}

