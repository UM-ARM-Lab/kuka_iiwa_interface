/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package armlab.lcm.msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class joint_value_quantity implements lcm.lcm.LCMEncodable
{
    public double joint_1;
    public double joint_2;
    public double joint_3;
    public double joint_4;
    public double joint_5;
    public double joint_6;
    public double joint_7;
 
    public joint_value_quantity()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x15589646573911e7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(armlab.lcm.msgs.joint_value_quantity.class))
            return 0L;
 
        classes.add(armlab.lcm.msgs.joint_value_quantity.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.joint_1); 
 
        outs.writeDouble(this.joint_2); 
 
        outs.writeDouble(this.joint_3); 
 
        outs.writeDouble(this.joint_4); 
 
        outs.writeDouble(this.joint_5); 
 
        outs.writeDouble(this.joint_6); 
 
        outs.writeDouble(this.joint_7); 
 
    }
 
    public joint_value_quantity(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public joint_value_quantity(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static armlab.lcm.msgs.joint_value_quantity _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        armlab.lcm.msgs.joint_value_quantity o = new armlab.lcm.msgs.joint_value_quantity();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.joint_1 = ins.readDouble();
 
        this.joint_2 = ins.readDouble();
 
        this.joint_3 = ins.readDouble();
 
        this.joint_4 = ins.readDouble();
 
        this.joint_5 = ins.readDouble();
 
        this.joint_6 = ins.readDouble();
 
        this.joint_7 = ins.readDouble();
 
    }
 
    public armlab.lcm.msgs.joint_value_quantity copy()
    {
        armlab.lcm.msgs.joint_value_quantity outobj = new armlab.lcm.msgs.joint_value_quantity();
        outobj.joint_1 = this.joint_1;
 
        outobj.joint_2 = this.joint_2;
 
        outobj.joint_3 = this.joint_3;
 
        outobj.joint_4 = this.joint_4;
 
        outobj.joint_5 = this.joint_5;
 
        outobj.joint_6 = this.joint_6;
 
        outobj.joint_7 = this.joint_7;
 
        return outobj;
    }
 
}

