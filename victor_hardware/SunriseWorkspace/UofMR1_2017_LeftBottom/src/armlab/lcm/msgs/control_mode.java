/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package armlab.lcm.msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class control_mode implements lcm.lcm.LCMEncodable
{
    public byte mode;
 
    public control_mode()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x90e9a182ecc1c212L;
 
    public static final byte IS_POSITION_MOTION = (byte) 0;
    public static final byte IS_CARTESIAN_MOTION = (byte) 1;
    public static final byte IS_IMPEDANCE_CONTROL = (byte) 2;
    public static final byte JOINT_POSITION = (byte) 0;
    public static final byte JOINT_IMPEDANCE = (byte) 2;
    public static final byte CARTESIAN_POSE = (byte) 1;
    public static final byte CARTESIAN_IMPEDANCE = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(armlab.lcm.msgs.control_mode.class))
            return 0L;
 
        classes.add(armlab.lcm.msgs.control_mode.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.mode); 
 
    }
 
    public control_mode(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public control_mode(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static armlab.lcm.msgs.control_mode _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        armlab.lcm.msgs.control_mode o = new armlab.lcm.msgs.control_mode();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.mode = ins.readByte();
 
    }
 
    public armlab.lcm.msgs.control_mode copy()
    {
        armlab.lcm.msgs.control_mode outobj = new armlab.lcm.msgs.control_mode();
        outobj.mode = this.mode;
 
        return outobj;
    }
 
}

