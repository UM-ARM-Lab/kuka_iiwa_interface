/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __victor_lcm_interface_cartesian_control_mode_limits_hpp__
#define __victor_lcm_interface_cartesian_control_mode_limits_hpp__

#include "victor_lcm_interface/cartesian_value_quantity.hpp"

namespace victor_lcm_interface {

class cartesian_control_mode_limits {
 public:
  victor_lcm_interface::cartesian_value_quantity max_path_deviation;

  victor_lcm_interface::cartesian_value_quantity max_cartesian_velocity;

  victor_lcm_interface::cartesian_value_quantity max_control_force;

  int8_t stop_on_max_control_force;

 public:
  /**
   * Encode a message into binary form.
   *
   * @param buf The output buffer.
   * @param offset Encoding starts at thie byte offset into @p buf.
   * @param maxlen Maximum number of bytes to write.  This should generally be
   *  equal to getEncodedSize().
   * @return The number of bytes encoded, or <0 on error.
   */
  inline int encode(void *buf, int offset, int maxlen) const;

  /**
   * Check how many bytes are required to encode this message.
   */
  inline int getEncodedSize() const;

  /**
   * Decode a message from binary form into this instance.
   *
   * @param buf The buffer containing the encoded message.
   * @param offset The byte offset into @p buf where the encoded message starts.
   * @param maxlen The maximum number of bytes to reqad while decoding.
   * @return The number of bytes decoded, or <0 if an error occured.
   */
  inline int decode(const void *buf, int offset, int maxlen);

  /**
   * Retrieve the 64-bit fingerprint identifying the structure of the message.
   * Note that the fingerprint is the same for all instances of the same
   * message type, and is a fingerprint on the message type definition, not on
   * the message contents.
   */
  inline static int64_t getHash();

  /**
   * Returns "cartesian_control_mode_limits"
   */
  inline static const char *getTypeName();

  // LCM support functions. Users should not call these
  inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
  inline int _getEncodedSizeNoHash() const;
  inline int _decodeNoHash(const void *buf, int offset, int maxlen);
  inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int cartesian_control_mode_limits::encode(void *buf, int offset, int maxlen) const {
  int pos = 0, tlen;
  int64_t hash = (int64_t)getHash();

  tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  return pos;
}

int cartesian_control_mode_limits::decode(const void *buf, int offset, int maxlen) {
  int pos = 0, thislen;

  int64_t msg_hash;
  thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
  if (thislen < 0)
    return thislen;
  else
    pos += thislen;
  if (msg_hash != getHash()) return -1;

  thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
  if (thislen < 0)
    return thislen;
  else
    pos += thislen;

  return pos;
}

int cartesian_control_mode_limits::getEncodedSize() const { return 8 + _getEncodedSizeNoHash(); }

int64_t cartesian_control_mode_limits::getHash() {
  static int64_t hash = _computeHash(NULL);
  return hash;
}

const char *cartesian_control_mode_limits::getTypeName() { return "cartesian_control_mode_limits"; }

int cartesian_control_mode_limits::_encodeNoHash(void *buf, int offset, int maxlen) const {
  int pos = 0, tlen;

  tlen = this->max_path_deviation._encodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = this->max_cartesian_velocity._encodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = this->max_control_force._encodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->stop_on_max_control_force, 1);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  return pos;
}

int cartesian_control_mode_limits::_decodeNoHash(const void *buf, int offset, int maxlen) {
  int pos = 0, tlen;

  tlen = this->max_path_deviation._decodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = this->max_cartesian_velocity._decodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = this->max_control_force._decodeNoHash(buf, offset + pos, maxlen - pos);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->stop_on_max_control_force, 1);
  if (tlen < 0)
    return tlen;
  else
    pos += tlen;

  return pos;
}

int cartesian_control_mode_limits::_getEncodedSizeNoHash() const {
  int enc_size = 0;
  enc_size += this->max_path_deviation._getEncodedSizeNoHash();
  enc_size += this->max_cartesian_velocity._getEncodedSizeNoHash();
  enc_size += this->max_control_force._getEncodedSizeNoHash();
  enc_size += __boolean_encoded_array_size(NULL, 1);
  return enc_size;
}

uint64_t cartesian_control_mode_limits::_computeHash(const __lcm_hash_ptr *p) {
  const __lcm_hash_ptr *fp;
  for (fp = p; fp != NULL; fp = fp->parent)
    if (fp->v == cartesian_control_mode_limits::getHash) return 0;
  const __lcm_hash_ptr cp = {p, (void *)cartesian_control_mode_limits::getHash};

  uint64_t hash = 0x4b3495770cad1468LL + victor_lcm_interface::cartesian_value_quantity::_computeHash(&cp) +
                  victor_lcm_interface::cartesian_value_quantity::_computeHash(&cp) +
                  victor_lcm_interface::cartesian_value_quantity::_computeHash(&cp);

  return (hash << 1) + ((hash >> 63) & 1);
}

}  // namespace victor_lcm_interface

#endif
