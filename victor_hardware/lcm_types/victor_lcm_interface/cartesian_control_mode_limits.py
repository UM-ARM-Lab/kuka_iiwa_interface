"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import victor_lcm_interface.cartesian_value_quantity

class cartesian_control_mode_limits(object):
    __slots__ = ["max_path_deviation", "max_cartesian_velocity", "max_control_force", "stop_on_max_control_force"]

    def __init__(self):
        self.max_path_deviation = victor_lcm_interface.cartesian_value_quantity()
        self.max_cartesian_velocity = victor_lcm_interface.cartesian_value_quantity()
        self.max_control_force = victor_lcm_interface.cartesian_value_quantity()
        self.stop_on_max_control_force = False

    def encode(self):
        buf = BytesIO()
        buf.write(cartesian_control_mode_limits._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.max_path_deviation._get_packed_fingerprint() == victor_lcm_interface.cartesian_value_quantity._get_packed_fingerprint()
        self.max_path_deviation._encode_one(buf)
        assert self.max_cartesian_velocity._get_packed_fingerprint() == victor_lcm_interface.cartesian_value_quantity._get_packed_fingerprint()
        self.max_cartesian_velocity._encode_one(buf)
        assert self.max_control_force._get_packed_fingerprint() == victor_lcm_interface.cartesian_value_quantity._get_packed_fingerprint()
        self.max_control_force._encode_one(buf)
        buf.write(struct.pack(">b", self.stop_on_max_control_force))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cartesian_control_mode_limits._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cartesian_control_mode_limits._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = cartesian_control_mode_limits()
        self.max_path_deviation = victor_lcm_interface.cartesian_value_quantity._decode_one(buf)
        self.max_cartesian_velocity = victor_lcm_interface.cartesian_value_quantity._decode_one(buf)
        self.max_control_force = victor_lcm_interface.cartesian_value_quantity._decode_one(buf)
        self.stop_on_max_control_force = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if cartesian_control_mode_limits in parents: return 0
        newparents = parents + [cartesian_control_mode_limits]
        tmphash = (0x4b3495770cad1468+ victor_lcm_interface.cartesian_value_quantity._get_hash_recursive(newparents)+ victor_lcm_interface.cartesian_value_quantity._get_hash_recursive(newparents)+ victor_lcm_interface.cartesian_value_quantity._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if cartesian_control_mode_limits._packed_fingerprint is None:
            cartesian_control_mode_limits._packed_fingerprint = struct.pack(">Q", cartesian_control_mode_limits._get_hash_recursive([]))
        return cartesian_control_mode_limits._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

