"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import victor_lcm_interface.cartesian_path_execution_parameters

import victor_lcm_interface.control_mode

import victor_lcm_interface.cartesian_control_mode_limits

import victor_lcm_interface.joint_impedance_parameters

import victor_lcm_interface.cartesian_impedance_parameters

import victor_lcm_interface.joint_path_execution_parameters

class control_mode_parameters(object):
    __slots__ = ["joint_impedance_params", "cartesian_impedance_params", "cartesian_control_mode_limits", "joint_path_execution_params", "cartesian_path_execution_params", "control_mode", "timestamp"]

    def __init__(self):
        self.joint_impedance_params = victor_lcm_interface.joint_impedance_parameters()
        self.cartesian_impedance_params = victor_lcm_interface.cartesian_impedance_parameters()
        self.cartesian_control_mode_limits = victor_lcm_interface.cartesian_control_mode_limits()
        self.joint_path_execution_params = victor_lcm_interface.joint_path_execution_parameters()
        self.cartesian_path_execution_params = victor_lcm_interface.cartesian_path_execution_parameters()
        self.control_mode = victor_lcm_interface.control_mode()
        self.timestamp = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(control_mode_parameters._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.joint_impedance_params._get_packed_fingerprint() == victor_lcm_interface.joint_impedance_parameters._get_packed_fingerprint()
        self.joint_impedance_params._encode_one(buf)
        assert self.cartesian_impedance_params._get_packed_fingerprint() == victor_lcm_interface.cartesian_impedance_parameters._get_packed_fingerprint()
        self.cartesian_impedance_params._encode_one(buf)
        assert self.cartesian_control_mode_limits._get_packed_fingerprint() == victor_lcm_interface.cartesian_control_mode_limits._get_packed_fingerprint()
        self.cartesian_control_mode_limits._encode_one(buf)
        assert self.joint_path_execution_params._get_packed_fingerprint() == victor_lcm_interface.joint_path_execution_parameters._get_packed_fingerprint()
        self.joint_path_execution_params._encode_one(buf)
        assert self.cartesian_path_execution_params._get_packed_fingerprint() == victor_lcm_interface.cartesian_path_execution_parameters._get_packed_fingerprint()
        self.cartesian_path_execution_params._encode_one(buf)
        assert self.control_mode._get_packed_fingerprint() == victor_lcm_interface.control_mode._get_packed_fingerprint()
        self.control_mode._encode_one(buf)
        buf.write(struct.pack(">d", self.timestamp))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != control_mode_parameters._get_packed_fingerprint():
            raise ValueError("Decode error")
        return control_mode_parameters._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = control_mode_parameters()
        self.joint_impedance_params = victor_lcm_interface.joint_impedance_parameters._decode_one(buf)
        self.cartesian_impedance_params = victor_lcm_interface.cartesian_impedance_parameters._decode_one(buf)
        self.cartesian_control_mode_limits = victor_lcm_interface.cartesian_control_mode_limits._decode_one(buf)
        self.joint_path_execution_params = victor_lcm_interface.joint_path_execution_parameters._decode_one(buf)
        self.cartesian_path_execution_params = victor_lcm_interface.cartesian_path_execution_parameters._decode_one(buf)
        self.control_mode = victor_lcm_interface.control_mode._decode_one(buf)
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if control_mode_parameters in parents: return 0
        newparents = parents + [control_mode_parameters]
        tmphash = (0x6405e1de1a319e2d+ victor_lcm_interface.joint_impedance_parameters._get_hash_recursive(newparents)+ victor_lcm_interface.cartesian_impedance_parameters._get_hash_recursive(newparents)+ victor_lcm_interface.cartesian_control_mode_limits._get_hash_recursive(newparents)+ victor_lcm_interface.joint_path_execution_parameters._get_hash_recursive(newparents)+ victor_lcm_interface.cartesian_path_execution_parameters._get_hash_recursive(newparents)+ victor_lcm_interface.control_mode._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if control_mode_parameters._packed_fingerprint is None:
            control_mode_parameters._packed_fingerprint = struct.pack(">Q", control_mode_parameters._get_hash_recursive([]))
        return control_mode_parameters._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

