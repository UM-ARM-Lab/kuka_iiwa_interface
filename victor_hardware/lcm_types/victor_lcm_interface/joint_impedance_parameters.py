"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import victor_lcm_interface.joint_value_quantity

class joint_impedance_parameters(object):
    __slots__ = ["joint_stiffness", "joint_damping"]

    def __init__(self):
        self.joint_stiffness = victor_lcm_interface.joint_value_quantity()
        self.joint_damping = victor_lcm_interface.joint_value_quantity()

    def encode(self):
        buf = BytesIO()
        buf.write(joint_impedance_parameters._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.joint_stiffness._get_packed_fingerprint() == victor_lcm_interface.joint_value_quantity._get_packed_fingerprint()
        self.joint_stiffness._encode_one(buf)
        assert self.joint_damping._get_packed_fingerprint() == victor_lcm_interface.joint_value_quantity._get_packed_fingerprint()
        self.joint_damping._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joint_impedance_parameters._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joint_impedance_parameters._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = joint_impedance_parameters()
        self.joint_stiffness = victor_lcm_interface.joint_value_quantity._decode_one(buf)
        self.joint_damping = victor_lcm_interface.joint_value_quantity._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if joint_impedance_parameters in parents: return 0
        newparents = parents + [joint_impedance_parameters]
        tmphash = (0x183f83ab1b5b43a7+ victor_lcm_interface.joint_value_quantity._get_hash_recursive(newparents)+ victor_lcm_interface.joint_value_quantity._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if joint_impedance_parameters._packed_fingerprint is None:
            joint_impedance_parameters._packed_fingerprint = struct.pack(">Q", joint_impedance_parameters._get_hash_recursive([]))
        return joint_impedance_parameters._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

