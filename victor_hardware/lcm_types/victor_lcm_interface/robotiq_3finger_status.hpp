/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __victor_lcm_interface_robotiq_3finger_status_hpp__
#define __victor_lcm_interface_robotiq_3finger_status_hpp__

#include "victor_lcm_interface/robotiq_3finger_actuator_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_actuator_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_actuator_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_actuator_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_object_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_object_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_object_status.hpp"
#include "victor_lcm_interface/robotiq_3finger_object_status.hpp"

namespace victor_lcm_interface
{

class robotiq_3finger_status
{
    public:
        double     timestamp;

        victor_lcm_interface::robotiq_3finger_actuator_status finger_a_status;

        victor_lcm_interface::robotiq_3finger_actuator_status finger_b_status;

        victor_lcm_interface::robotiq_3finger_actuator_status finger_c_status;

        victor_lcm_interface::robotiq_3finger_actuator_status scissor_status;

        victor_lcm_interface::robotiq_3finger_object_status finger_a_object_status;

        victor_lcm_interface::robotiq_3finger_object_status finger_b_object_status;

        victor_lcm_interface::robotiq_3finger_object_status finger_c_object_status;

        victor_lcm_interface::robotiq_3finger_object_status scissor_object_status;

        int8_t     initialization_status;

        int8_t     gripper_action_status;

        int8_t     gripper_system_status;

        int8_t     gripper_motion_status;

        int8_t     gripper_fault_status;

    public:
        static constexpr int8_t   GRIPPER_RESET = 0;
        static constexpr int8_t   GRIPPER_ACTIVATION = 1;
        static constexpr int8_t   GRIPPER_STOPPED_OR_BUSY = 0;
        static constexpr int8_t   GRIPPER_GOTO = 1;
        static constexpr int8_t   GRIPPER_RESET_OR_AUTO_RELEASE = 0;
        static constexpr int8_t   GRIPPER_ACTIVATION_IN_PROGRESS = 1;
        static constexpr int8_t   GRIPPER_MODE_CHANGE_IN_PROGRESS = 2;
        static constexpr int8_t   GRIPPER_ACTIVATION_MODE_CHANGE_COMPLETE = 3;
        static constexpr int8_t   GRIPPER_STOPPED_UNKNOWN = 0;
        static constexpr int8_t   GRIPPER_IN_MOTION = 1;
        static constexpr int8_t   GRIPPER_ONE_OR_TWO_STOPPED_EARLY = 2;
        static constexpr int8_t   GRIPPER_ALL_STOPPED_EARLY = 3;
        static constexpr int8_t   GRIPPER_ALL_AT_REQUESTED = 4;
        static constexpr int8_t   NO_FAULTS = 0;
        static constexpr int8_t   PRIORITY_ACTIVATION_MUST_BE_SET = 9;
        static constexpr int8_t   PRIORITY_MODE_CHANGE_NEEDED = 17;
        static constexpr int8_t   PRIORITY_NEEDS_ACTIVATION = 25;
        static constexpr int8_t   MAJOR_ACTIVATION_FAULT = 10;
        static constexpr int8_t   MAJOR_CHANGING_MODE_FAULT = 18;
        static constexpr int8_t   MAJOR_AUTO_RELEASE_COMPLETE = 26;
        static constexpr int8_t   MINOR_COMM_CHIP_NOT_READY = 12;
        static constexpr int8_t   MINOR_CHANGING_MODE_FAULT = 20;
        static constexpr int8_t   MINOR_AUTO_RELEASE_IN_PROGRESS = 28;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "robotiq_3finger_status"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int robotiq_3finger_status::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robotiq_3finger_status::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int robotiq_3finger_status::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t robotiq_3finger_status::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* robotiq_3finger_status::getTypeName()
{
    return "robotiq_3finger_status";
}

int robotiq_3finger_status::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_a_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_b_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_c_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->scissor_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_a_object_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_b_object_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_c_object_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->scissor_object_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->initialization_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->gripper_action_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->gripper_system_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->gripper_motion_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->gripper_fault_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robotiq_3finger_status::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_a_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_b_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_c_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->scissor_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_a_object_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_b_object_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->finger_c_object_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->scissor_object_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->initialization_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->gripper_action_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->gripper_system_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->gripper_motion_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->gripper_fault_status, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robotiq_3finger_status::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->finger_a_status._getEncodedSizeNoHash();
    enc_size += this->finger_b_status._getEncodedSizeNoHash();
    enc_size += this->finger_c_status._getEncodedSizeNoHash();
    enc_size += this->scissor_status._getEncodedSizeNoHash();
    enc_size += this->finger_a_object_status._getEncodedSizeNoHash();
    enc_size += this->finger_b_object_status._getEncodedSizeNoHash();
    enc_size += this->finger_c_object_status._getEncodedSizeNoHash();
    enc_size += this->scissor_object_status._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t robotiq_3finger_status::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == robotiq_3finger_status::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)robotiq_3finger_status::getHash };

    uint64_t hash = 0x167393c65a518866LL +
         victor_lcm_interface::robotiq_3finger_actuator_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_actuator_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_actuator_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_actuator_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_object_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_object_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_object_status::_computeHash(&cp) +
         victor_lcm_interface::robotiq_3finger_object_status::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
