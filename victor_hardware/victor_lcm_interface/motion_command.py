"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import victor_lcm_interface.control_mode

import victor_lcm_interface.cartesian_pose

import victor_lcm_interface.joint_value_quantity

class motion_command(object):
    __slots__ = ["joint_position", "joint_velocity", "cartesian_pose", "control_mode", "timestamp"]

    def __init__(self):
        self.joint_position = victor_lcm_interface.joint_value_quantity()
        self.joint_velocity = victor_lcm_interface.joint_value_quantity()
        self.cartesian_pose = victor_lcm_interface.cartesian_pose()
        self.control_mode = victor_lcm_interface.control_mode()
        self.timestamp = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(motion_command._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.joint_position._get_packed_fingerprint() == victor_lcm_interface.joint_value_quantity._get_packed_fingerprint()
        self.joint_position._encode_one(buf)
        assert self.joint_velocity._get_packed_fingerprint() == victor_lcm_interface.joint_value_quantity._get_packed_fingerprint()
        self.joint_velocity._encode_one(buf)
        assert self.cartesian_pose._get_packed_fingerprint() == victor_lcm_interface.cartesian_pose._get_packed_fingerprint()
        self.cartesian_pose._encode_one(buf)
        assert self.control_mode._get_packed_fingerprint() == victor_lcm_interface.control_mode._get_packed_fingerprint()
        self.control_mode._encode_one(buf)
        buf.write(struct.pack(">d", self.timestamp))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motion_command._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motion_command._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = motion_command()
        self.joint_position = victor_lcm_interface.joint_value_quantity._decode_one(buf)
        self.joint_velocity = victor_lcm_interface.joint_value_quantity._decode_one(buf)
        self.cartesian_pose = victor_lcm_interface.cartesian_pose._decode_one(buf)
        self.control_mode = victor_lcm_interface.control_mode._decode_one(buf)
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if motion_command in parents: return 0
        newparents = parents + [motion_command]
        tmphash = (0xc0714d5769ac13ac+ victor_lcm_interface.joint_value_quantity._get_hash_recursive(newparents)+ victor_lcm_interface.joint_value_quantity._get_hash_recursive(newparents)+ victor_lcm_interface.cartesian_pose._get_hash_recursive(newparents)+ victor_lcm_interface.control_mode._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if motion_command._packed_fingerprint is None:
            motion_command._packed_fingerprint = struct.pack(">Q", motion_command._get_hash_recursive([]))
        return motion_command._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

