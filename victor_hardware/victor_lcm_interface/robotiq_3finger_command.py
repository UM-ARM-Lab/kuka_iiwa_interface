"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import victor_lcm_interface.robotiq_3finger_actuator_command

class robotiq_3finger_command(object):
    __slots__ = ["timestamp", "finger_a_command", "finger_b_command", "finger_c_command", "scissor_command"]

    def __init__(self):
        self.timestamp = 0.0
        self.finger_a_command = victor_lcm_interface.robotiq_3finger_actuator_command()
        self.finger_b_command = victor_lcm_interface.robotiq_3finger_actuator_command()
        self.finger_c_command = victor_lcm_interface.robotiq_3finger_actuator_command()
        self.scissor_command = victor_lcm_interface.robotiq_3finger_actuator_command()

    def encode(self):
        buf = BytesIO()
        buf.write(robotiq_3finger_command._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.timestamp))
        assert self.finger_a_command._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_command._get_packed_fingerprint()
        self.finger_a_command._encode_one(buf)
        assert self.finger_b_command._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_command._get_packed_fingerprint()
        self.finger_b_command._encode_one(buf)
        assert self.finger_c_command._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_command._get_packed_fingerprint()
        self.finger_c_command._encode_one(buf)
        assert self.scissor_command._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_command._get_packed_fingerprint()
        self.scissor_command._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robotiq_3finger_command._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robotiq_3finger_command._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robotiq_3finger_command()
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        self.finger_a_command = victor_lcm_interface.robotiq_3finger_actuator_command._decode_one(buf)
        self.finger_b_command = victor_lcm_interface.robotiq_3finger_actuator_command._decode_one(buf)
        self.finger_c_command = victor_lcm_interface.robotiq_3finger_actuator_command._decode_one(buf)
        self.scissor_command = victor_lcm_interface.robotiq_3finger_actuator_command._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robotiq_3finger_command in parents: return 0
        newparents = parents + [robotiq_3finger_command]
        tmphash = (0x9d2a6410c4f20386+ victor_lcm_interface.robotiq_3finger_actuator_command._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_actuator_command._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_actuator_command._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_actuator_command._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robotiq_3finger_command._packed_fingerprint is None:
            robotiq_3finger_command._packed_fingerprint = struct.pack(">Q", robotiq_3finger_command._get_hash_recursive([]))
        return robotiq_3finger_command._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

