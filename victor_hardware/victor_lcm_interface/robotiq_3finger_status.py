"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import victor_lcm_interface.robotiq_3finger_actuator_status

import victor_lcm_interface.robotiq_3finger_object_status

class robotiq_3finger_status(object):
    __slots__ = ["timestamp", "finger_a_status", "finger_b_status", "finger_c_status", "scissor_status", "finger_a_object_status", "finger_b_object_status", "finger_c_object_status", "scissor_object_status", "initialization_status", "gripper_action_status", "gripper_system_status", "gripper_motion_status", "gripper_fault_status"]

    GRIPPER_RESET = 0
    GRIPPER_ACTIVATION = 1
    GRIPPER_STOPPED_OR_BUSY = 0
    GRIPPER_GOTO = 1
    GRIPPER_RESET_OR_AUTO_RELEASE = 0
    GRIPPER_ACTIVATION_IN_PROGRESS = 1
    GRIPPER_MODE_CHANGE_IN_PROGRESS = 2
    GRIPPER_ACTIVATION_MODE_CHANGE_COMPLETE = 3
    GRIPPER_STOPPED_UNKNOWN = 0
    GRIPPER_IN_MOTION = 1
    GRIPPER_ONE_OR_TWO_STOPPED_EARLY = 2
    GRIPPER_ALL_STOPPED_EARLY = 3
    GRIPPER_ALL_AT_REQUESTED = 4
    NO_FAULTS = 0
    PRIORITY_ACTIVATION_MUST_BE_SET = 9
    PRIORITY_MODE_CHANGE_NEEDED = 17
    PRIORITY_NEEDS_ACTIVATION = 25
    MAJOR_ACTIVATION_FAULT = 10
    MAJOR_CHANGING_MODE_FAULT = 18
    MAJOR_AUTO_RELEASE_COMPLETE = 26
    MINOR_COMM_CHIP_NOT_READY = 12
    MINOR_CHANGING_MODE_FAULT = 20
    MINOR_AUTO_RELEASE_IN_PROGRESS = 28

    def __init__(self):
        self.timestamp = 0.0
        self.finger_a_status = victor_lcm_interface.robotiq_3finger_actuator_status()
        self.finger_b_status = victor_lcm_interface.robotiq_3finger_actuator_status()
        self.finger_c_status = victor_lcm_interface.robotiq_3finger_actuator_status()
        self.scissor_status = victor_lcm_interface.robotiq_3finger_actuator_status()
        self.finger_a_object_status = victor_lcm_interface.robotiq_3finger_object_status()
        self.finger_b_object_status = victor_lcm_interface.robotiq_3finger_object_status()
        self.finger_c_object_status = victor_lcm_interface.robotiq_3finger_object_status()
        self.scissor_object_status = victor_lcm_interface.robotiq_3finger_object_status()
        self.initialization_status = 0
        self.gripper_action_status = 0
        self.gripper_system_status = 0
        self.gripper_motion_status = 0
        self.gripper_fault_status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(robotiq_3finger_status._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.timestamp))
        assert self.finger_a_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_status._get_packed_fingerprint()
        self.finger_a_status._encode_one(buf)
        assert self.finger_b_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_status._get_packed_fingerprint()
        self.finger_b_status._encode_one(buf)
        assert self.finger_c_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_status._get_packed_fingerprint()
        self.finger_c_status._encode_one(buf)
        assert self.scissor_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_actuator_status._get_packed_fingerprint()
        self.scissor_status._encode_one(buf)
        assert self.finger_a_object_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_object_status._get_packed_fingerprint()
        self.finger_a_object_status._encode_one(buf)
        assert self.finger_b_object_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_object_status._get_packed_fingerprint()
        self.finger_b_object_status._encode_one(buf)
        assert self.finger_c_object_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_object_status._get_packed_fingerprint()
        self.finger_c_object_status._encode_one(buf)
        assert self.scissor_object_status._get_packed_fingerprint() == victor_lcm_interface.robotiq_3finger_object_status._get_packed_fingerprint()
        self.scissor_object_status._encode_one(buf)
        buf.write(struct.pack(">bbbbb", self.initialization_status, self.gripper_action_status, self.gripper_system_status, self.gripper_motion_status, self.gripper_fault_status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robotiq_3finger_status._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robotiq_3finger_status._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robotiq_3finger_status()
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        self.finger_a_status = victor_lcm_interface.robotiq_3finger_actuator_status._decode_one(buf)
        self.finger_b_status = victor_lcm_interface.robotiq_3finger_actuator_status._decode_one(buf)
        self.finger_c_status = victor_lcm_interface.robotiq_3finger_actuator_status._decode_one(buf)
        self.scissor_status = victor_lcm_interface.robotiq_3finger_actuator_status._decode_one(buf)
        self.finger_a_object_status = victor_lcm_interface.robotiq_3finger_object_status._decode_one(buf)
        self.finger_b_object_status = victor_lcm_interface.robotiq_3finger_object_status._decode_one(buf)
        self.finger_c_object_status = victor_lcm_interface.robotiq_3finger_object_status._decode_one(buf)
        self.scissor_object_status = victor_lcm_interface.robotiq_3finger_object_status._decode_one(buf)
        self.initialization_status, self.gripper_action_status, self.gripper_system_status, self.gripper_motion_status, self.gripper_fault_status = struct.unpack(">bbbbb", buf.read(5))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robotiq_3finger_status in parents: return 0
        newparents = parents + [robotiq_3finger_status]
        tmphash = (0x167393c65a518866+ victor_lcm_interface.robotiq_3finger_actuator_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_actuator_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_actuator_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_actuator_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_object_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_object_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_object_status._get_hash_recursive(newparents)+ victor_lcm_interface.robotiq_3finger_object_status._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robotiq_3finger_status._packed_fingerprint is None:
            robotiq_3finger_status._packed_fingerprint = struct.pack(">Q", robotiq_3finger_status._get_hash_recursive([]))
        return robotiq_3finger_status._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

