/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-05-31 16:45:50.693304
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59;
x0=IKsin(j[2]);
x1=IKcos(j[2]);
x2=IKcos(j[4]);
x3=IKcos(j[3]);
x4=IKsin(j[4]);
x5=IKcos(j[6]);
x6=IKsin(j[5]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKcos(j[1]);
x10=IKsin(j[1]);
x11=IKsin(j[6]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((1.0)*x6);
x15=((0.126)*x0);
x16=((1.0)*x1);
x17=((1.0)*x9);
x18=((1.0)*x8);
x19=((1.0)*x11);
x20=((0.126)*x2);
x21=((0.4)*x1);
x22=((0.126)*x1);
x23=((1.0)*x5);
x24=(x10*x3);
x25=(x2*x3);
x26=(x0*x4);
x27=(x10*x7);
x28=(x3*x9);
x29=(x7*x9);
x30=(x0*x7);
x31=(x0*x2);
x32=(x17*x7);
x33=(x14*x30);
x34=(x18*x30);
x35=((((-1.0)*x16*x29))+x24);
x36=(((x16*x2))+(((-1.0)*x26*x3)));
x37=((((-1.0)*x16*x24))+x32);
x38=((((-1.0)*x0*x25))+(((-1.0)*x16*x4)));
x39=((((-1.0)*x27))+(((-1.0)*x16*x28)));
x40=(((x16*x4))+(((1.0)*x0*x25)));
x41=(((x22*x4))+((x15*x25)));
x42=((((0.4)*x30))+((x15*x7*x8)));
x43=((((-1.0)*x17*x3))+(((-1.0)*x16*x27)));
x44=(((x16*x27))+((x17*x3)));
x45=(x43*x6);
x46=(x2*x39);
x47=(((x10*x31))+((x4*(((((-1.0)*x32))+((x1*x24)))))));
x48=(((x2*x37))+((x10*x26)));
x49=((((-1.0)*x17*x31))+((x4*(((((-1.0)*x27))+(((-1.0)*x1*x28)))))));
x50=(x46+((x26*x9)));
x51=((((-1.0)*x33))+((x38*x8)));
x52=((((-1.0)*x18*x38))+x33);
x53=(x48*x8);
x54=(x11*x51);
x55=(x5*x52);
x56=(((x35*x8))+((x6*(((((-1.0)*x46))+(((-1.0)*x17*x26)))))));
IkReal x60=((1.0)*x29);
x57=(((x8*(((((0.126)*x24))+(((-1.0)*x22*x60))))))+(((-1.0)*x21*x60))+(((0.4)*x24))+(((0.4)*x10))+((x6*(((((-1.0)*x20*x39))+(((-1.0)*x15*x4*x9)))))));
x58=(((x11*((((x50*x8))+((x35*x6))))))+((x49*x5)));
x59=(((x5*(((((-1.0)*x18*x50))+(((-1.0)*x14*x35))))))+((x11*x49)));
eerot[0]=(((x13*x59))+((x12*(((((-1.0)*x19*x36))+(((-1.0)*x23*x52)))))));
eerot[1]=(((x13*x58))+((x12*(((((-1.0)*x19*x51))+(((-1.0)*x23*x36)))))));
eerot[2]=(((x13*x56))+((x12*(((((-1.0)*x14*x40))+x34)))));
eetrans[0]=(((x13*x57))+((x12*(((((-1.0)*x14*x41))+x42)))));
eerot[3]=(((x13*((((x11*x36))+x55))))+((x12*x59)));
eerot[4]=(((x12*x58))+((x13*((x54+((x36*x5)))))));
eerot[5]=(((x13*(((((-1.0)*x34))+((x40*x6))))))+((x12*x56)));
eetrans[1]=(((x12*x57))+((x13*(((((-1.0)*x42))+((x41*x6)))))));
eerot[6]=(((x11*x47))+((x5*((x45+x53)))));
eerot[7]=(((x47*x5))+((x11*(((((-1.0)*x18*x48))+(((-1.0)*x14*x43)))))));
eerot[8]=(((x48*x6))+((x44*x8)));
eetrans[2]=((0.34)+((x21*x27))+(((0.4)*x9))+(((0.4)*x28))+((x8*(((((0.126)*x28))+((x22*x27))))))+((x6*((((x20*x37))+((x10*x15*x4)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j19,cj19,sj19,htj19,j19mul,j20,cj20,sj20,htj20,j20mul,j21,cj21,sj21,htj21,j21mul,j22,cj22,sj22,htj22,j22mul,j23,cj23,sj23,htj23,j23mul,j24,cj24,sj24,htj24,j24mul,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij22[2], _nj22,_ij23[2], _nj23,_ij24[2], _nj24,_ij18[2], _nj18;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1;  _ij18[0] = -1; _ij18[1] = -1; _nj18 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j18=pfree[0]; cj18=cos(pfree[0]); sj18=sin(pfree[0]), htj18=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.0)*r00*(IKcos(j18))))+(((-1.0)*r10*(IKsin(j18)))));
new_r01=((((-1.0)*r11*(IKsin(j18))))+(((-1.0)*r01*(IKcos(j18)))));
new_r02=(((r02*(IKcos(j18))))+((r12*(IKsin(j18)))));
IkReal x61=IKsin(j18);
IkReal x62=IKcos(j18);
new_px=((((-0.126)*r02*x62))+((px*x62))+(((-0.126)*r12*x61))+((py*x61)));
new_r10=r20;
new_r11=r21;
new_r12=((-1.0)*r22);
new_py=((0.34)+(((0.126)*r22))+(((-1.0)*pz)));
new_r20=((((-1.0)*r10*(IKcos(j18))))+((r00*(IKsin(j18)))));
new_r21=(((r01*(IKsin(j18))))+(((-1.0)*r11*(IKcos(j18)))));
new_r22=(((r12*(IKcos(j18))))+(((-1.0)*r02*(IKsin(j18)))));
IkReal x63=IKsin(j18);
IkReal x64=IKcos(j18);
new_pz=((((-1.0)*px*x63))+(((-0.126)*r12*x64))+((py*x64))+(((0.126)*r02*x63)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
{
IkReal j19eval[2];
j19eval[0]=(pp+(((-1.0)*(pz*pz))));
j19eval[1]=((px*px)+(py*py));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
evalcond[1]=pp;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x68=((0.4)*r22);
IkReal x69=((1.0)*pz);
IkReal x70=(x68+(((-1.0)*x69)));
IkReal x71=((-1.0)*pz);
IkReal x72=((((-1.0)*x69))+(((-1.0)*x68)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x71);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x71);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x71);
rxp2_2=0;
IkReal gconst0=x70;
IkReal gconst1=x72;
IkReal gconst2=x70;
IkReal gconst3=x72;
IkReal gconst4=x70;
IkReal gconst5=x72;
IkReal gconst6=x70;
IkReal gconst7=x72;
IkReal x73=pz*pz*pz*pz;
IkReal x74=r20*r20;
IkReal x75=r22*r22;
IkReal x76=r21*r21;
IkReal x77=(x73*x76);
IkReal x78=(x73*x75);
IkReal x79=(x73*x74);
j24eval[0]=((IKabs(((((-20.48)*x77))+(((-15.36)*x78))+(((5.12)*x79)))))+(((40.96)*(IKabs((r20*r21*x73)))))+(((2.0)*(IKabs(((((-10.24)*x77))+(((-10.24)*x78)))))))+(IKabs(((((-2.56)*x78))+(((-2.56)*x79))))));
if( IKabs(j24eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j19, j23, j24]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x80=pz*pz;
IkReal x81=r20*r20;
IkReal x82=r22*r22;
IkReal x83=r21*r21;
IkReal x84=pz*pz*pz*pz;
IkReal x85=((1.28)*gconst4);
IkReal x86=((0.64)*gconst5);
IkReal x87=((0.64)*gconst0);
IkReal x88=((1.28)*gconst0);
IkReal x89=(gconst1*gconst2);
IkReal x90=((1.28)*gconst1);
IkReal x91=((1.28)*gconst5);
IkReal x92=((0.64)*gconst4);
IkReal x93=((0.64)*gconst1);
IkReal x94=(gconst6*x80);
IkReal x95=((2.56)*x81);
IkReal x96=((5.12)*x81);
IkReal x97=((10.24)*x83);
IkReal x98=(gconst2*gconst5*x80);
IkReal x99=(x80*x82);
IkReal x100=(r20*r21*x84);
IkReal x101=((10.24)*x100);
IkReal x102=(gconst7*x99);
IkReal x103=((-10.24)*x100);
IkReal x104=((1.28)*gconst2*x99);
IkReal x105=((1.024)*r22*x80*x81);
IkReal x106=((4.096)*r22*x80*x83);
IkReal x107=((1.024)*r22*x81*x94);
IkReal x108=(gconst5*x105);
IkReal x109=(gconst5*x106);
IkReal x110=(gconst2*x105);
IkReal x111=(gconst1*x105);
IkReal x112=(x102*x92);
IkReal x113=(x102*x86);
IkReal x114=(x82*x92*x94);
IkReal x115=(x82*x86*x94);
IkReal x116=(gconst5*x94*x95);
IkReal x117=((4.096)*r22*x83*x94);
IkReal x118=(gconst1*x106);
IkReal x119=((1.6384)*x83*x99);
IkReal x120=(x102*x87);
IkReal x121=(gconst2*x86*x99);
IkReal x122=(x95*x98);
IkReal x123=(gconst3*x92*x99);
IkReal x124=(gconst1*x94*x95);
IkReal x125=(gconst3*x86*x99);
IkReal x126=(gconst2*x106);
IkReal x127=(x102*x93);
IkReal x128=(x82*x93*x94);
IkReal x129=(x82*x87*x94);
IkReal x130=(gconst2*x92*x99);
IkReal x131=((0.4096)*x81*x99);
IkReal x132=(gconst2*x87*x99);
IkReal x133=(x80*x89*x95);
IkReal x134=(gconst3*x87*x99);
IkReal x135=(gconst3*x93*x99);
IkReal x136=((0.64)*x89*x99);
IkReal x137=(x111+x107);
IkReal x138=(x110+x118);
IkReal x139=(x117+x108);
IkReal x140=(x135+x134+x136+x133+x132);
IkReal x141=(x113+x112+x116+x115+x114);
IkReal x142=(x130+x127+x124+x125+x122+x123+x120+x121+x128+x129);
op[0]=((((-1.0)*x141))+(((-1.0)*x107))+x131+x108);
op[1]=x103;
op[2]=((((-1.0)*x142))+(((-1.0)*x102*x91))+(((-1.0)*x102*x85))+(((-1.0)*x110))+(((-1.0)*x82*x85*x94))+x137+x119+x109+(((-1.0)*x139))+((gconst5*x94*x96))+(((-1.0)*x82*x91*x94))+(((-1.0)*gconst5*x94*x97)));
op[3]=x103;
op[4]=((((-1.0)*x141))+(((-1.0)*x140))+((x96*x98))+(((-1.0)*gconst3*x91*x99))+(((-1.0)*x102*x90))+(((-1.0)*x102*x88))+(((-1.0)*gconst1*x94*x97))+(((-1.0)*gconst2*x91*x99))+(((-1.0)*x111))+(((3.2768)*x83*x99))+(((-1.0)*x126))+x138+x109+x107+(((-1.0)*x82*x90*x94))+(((-1.0)*x139))+((gconst1*x94*x96))+(((-1.0)*gconst3*x85*x99))+(((-1.0)*x82*x88*x94))+(((-0.8192)*x81*x99))+(((-1.0)*x97*x98))+(((-1.0)*gconst2*x85*x99)));
op[5]=x101;
op[6]=((((-1.0)*gconst3*x90*x99))+(((-1.0)*x142))+((x80*x89*x96))+(((-1.0)*gconst3*x88*x99))+(((-1.0)*x126))+x138+x119+x108+(((-1.0)*x137))+(((-1.0)*x80*x89*x97))+(((-1.0)*gconst2*x88*x99))+(((-1.28)*x89*x99)));
op[7]=x101;
op[8]=((((-1.0)*x140))+(((-1.0)*x110))+x131+x111);
polyroots8(op,zeror,numroots);
IkReal j24array[8], cj24array[8], sj24array[8], tempj24array[1];
int numsolutions = 0;
for(int ij24 = 0; ij24 < numroots; ++ij24)
{
IkReal htj24 = zeror[ij24];
tempj24array[0]=((2.0)*(atan(htj24)));
for(int kj24 = 0; kj24 < 1; ++kj24)
{
j24array[numsolutions] = tempj24array[kj24];
if( j24array[numsolutions] > IKPI )
{
    j24array[numsolutions]-=IK2PI;
}
else if( j24array[numsolutions] < -IKPI )
{
    j24array[numsolutions]+=IK2PI;
}
sj24array[numsolutions] = IKsin(j24array[numsolutions]);
cj24array[numsolutions] = IKcos(j24array[numsolutions]);
numsolutions++;
}
}
bool j24valid[8]={true,true,true,true,true,true,true,true};
_nj24 = 8;
for(int ij24 = 0; ij24 < numsolutions; ++ij24)
    {
if( !j24valid[ij24] )
{
    continue;
}
    j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
htj24 = IKtan(j24/2);

_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < numsolutions; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
{
IkReal j23eval[1];
IkReal x143=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x143);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x143);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x143);
rxp2_2=0;
j23eval[0]=((IKabs((pz*r22)))+(IKabs(((((-1.0)*pz*r21*sj24))+((cj24*pz*r20))))));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[2];
IkReal x144=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x144);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x144);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x144);
rxp2_2=0;
IkReal x145=(cj24*r20);
IkReal x146=(r21*sj24);
j23eval[0]=((r22*r22)+(x146*x146)+(x145*x145)+(((-2.0)*x145*x146)));
j23eval[1]=((((2.5)*(IKabs(((((0.4)*x145))+(((-0.4)*x146)))))))+(IKabs(r22)));
if( IKabs(j23eval[0]) < 0.0000010000000000  || IKabs(j23eval[1]) < 0.0000010000000000  )
{
{
IkReal j19eval[2];
IkReal x147=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x147);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x147);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x147);
rxp2_2=0;
IkReal x148=cj24*cj24;
IkReal x149=sj24*sj24;
IkReal x150=((0.4)*cj24);
IkReal x151=((0.4)*sj24);
IkReal x152=((2.0)*cj24*sj24);
j19eval[0]=((IKabs((((r00*x151))+((r01*x150)))))+(IKabs(((((-1.0)*r10*x151))+(((-1.0)*r11*x150))))));
j19eval[1]=(((x149*(r10*r10)))+((x148*(r01*r01)))+((r10*r11*x152))+((x149*(r00*r00)))+((r00*r01*x152))+((x148*(r11*r11))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=((IKabs(r22))+(((2.5)*(IKabs(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))))))));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
IkReal x153=((0.4)*sj24);
IkReal x154=((0.4)*cj24);
j19eval[0]=((IKabs((((r00*x153))+((r01*x154)))))+(IKabs(((((-1.0)*r10*x153))+(((-1.0)*r11*x154))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x155=((0.4)*cj24);
IkReal x156=((0.4)*sj24);
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x156))+(((-1.0)*r11*x155)))),IkReal((((r00*x156))+((r01*x155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
IkReal x157=x158.value;
j19array[0]=((-1.0)*x157);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x157)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=(((cj24*r20))+(((-1.0)*r21*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=(((cj24*r10))+(((-1.0)*r11*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x159=((2.0)*cj19);
IkReal x160=(r02*sj19);
CheckValue<IkReal> x161=IKPowWithIntegerCheck(((((-2.0)*r11*sj24))+(((2.0)*cj24*r10))),-1);
if(!x161.valid){
continue;
}
if( IKabs(((x161.value)*((x159+(((-1.0)*x159*(r12*r12)))+(((2.0)*r12*x160)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x160))+((cj19*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x161.value)*((x159+(((-1.0)*x159*(r12*r12)))+(((2.0)*r12*x160))))))+IKsqr(((((-1.0)*x160))+((cj19*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x161.value)*((x159+(((-1.0)*x159*(r12*r12)))+(((2.0)*r12*x160))))), ((((-1.0)*x160))+((cj19*r12))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[5];
IkReal x162=IKcos(j23);
IkReal x163=IKsin(j23);
IkReal x164=((0.4)*cj24);
IkReal x165=((0.4)*r02);
IkReal x166=((0.4)*cj19);
IkReal x167=((0.4)*sj19);
IkReal x168=((0.4)*x162);
IkReal x169=((0.4)*sj24*x163);
evalcond[0]=((((-1.0)*r12*x166))+((sj19*x165))+x168);
evalcond[1]=(((r22*x168))+(((-1.0)*r21*x169))+((r20*x163*x164)));
evalcond[2]=(((x162*x165))+(((-1.0)*r01*x169))+x167+((r00*x163*x164)));
evalcond[3]=((((-1.0)*x166))+((r10*x163*x164))+((r12*x168))+(((-1.0)*r11*x169)));
evalcond[4]=((((-1.0)*cj19*r10*x164))+(((0.4)*x163))+((r11*sj24*x166))+(((-1.0)*r01*sj24*x167))+((r00*sj19*x164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1081=(cj19*r12);
IkReal x1082=((2.0)*sj19);
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1083.valid){
continue;
}
if( IKabs(((x1083.value)*((((x1082*(r02*r02)))+(((-2.0)*r02*x1081))+(((-1.0)*x1082)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1081+(((-1.0)*r02*sj19)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1083.value)*((((x1082*(r02*r02)))+(((-2.0)*r02*x1081))+(((-1.0)*x1082))))))+IKsqr((x1081+(((-1.0)*r02*sj19))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1083.value)*((((x1082*(r02*r02)))+(((-2.0)*r02*x1081))+(((-1.0)*x1082))))), (x1081+(((-1.0)*r02*sj19))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[5];
IkReal x1084=IKcos(j23);
IkReal x1085=IKsin(j23);
IkReal x1086=((0.4)*cj24);
IkReal x1087=((0.4)*r02);
IkReal x1088=((0.4)*cj19);
IkReal x1089=((0.4)*sj19);
IkReal x1090=((0.4)*x1084);
IkReal x1091=((0.4)*sj24*x1085);
evalcond[0]=(x1090+((sj19*x1087))+(((-1.0)*r12*x1088)));
evalcond[1]=(((r22*x1090))+(((-1.0)*r21*x1091))+((r20*x1085*x1086)));
evalcond[2]=(x1089+(((-1.0)*r01*x1091))+((r00*x1085*x1086))+((x1084*x1087)));
evalcond[3]=(((r10*x1085*x1086))+(((-1.0)*r11*x1091))+((r12*x1090))+(((-1.0)*x1088)));
evalcond[4]=(((r00*sj19*x1086))+(((-1.0)*r01*sj24*x1089))+(((-1.0)*cj19*r10*x1086))+(((0.4)*x1085))+((r11*sj24*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1092=((0.4)*r22);
IkReal x1093=(r02*sj19);
IkReal x1094=(cj19*r12);
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))),-1);
if(!x1095.valid){
continue;
}
if( IKabs(((x1095.value)*((((x1092*x1093))+(((-1.0)*x1092*x1094)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1094+(((-1.0)*x1093)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1095.value)*((((x1092*x1093))+(((-1.0)*x1092*x1094))))))+IKsqr((x1094+(((-1.0)*x1093))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1095.value)*((((x1092*x1093))+(((-1.0)*x1092*x1094))))), (x1094+(((-1.0)*x1093))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[5];
IkReal x1096=IKcos(j23);
IkReal x1097=IKsin(j23);
IkReal x1098=((0.4)*cj24);
IkReal x1099=((0.4)*r02);
IkReal x1100=((0.4)*cj19);
IkReal x1101=((0.4)*sj19);
IkReal x1102=((0.4)*x1096);
IkReal x1103=((0.4)*sj24*x1097);
evalcond[0]=((((-1.0)*r12*x1100))+x1102+((sj19*x1099)));
evalcond[1]=((((-1.0)*r21*x1103))+((r22*x1102))+((r20*x1097*x1098)));
evalcond[2]=(x1101+(((-1.0)*r01*x1103))+((r00*x1097*x1098))+((x1096*x1099)));
evalcond[3]=((((-1.0)*r11*x1103))+((r12*x1102))+((r10*x1097*x1098))+(((-1.0)*x1100)));
evalcond[4]=(((r00*sj19*x1098))+(((-1.0)*r01*sj24*x1101))+((r11*sj24*x1100))+(((-1.0)*cj19*r10*x1098))+(((0.4)*x1097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal(((0.4)*r22)),IkReal(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
IkReal x1104=x1105.value;
j23array[0]=((-1.0)*x1104);
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+(((-1.0)*x1104)));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal j19eval[3];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
IkReal x1106=((1.0)*cj24);
IkReal x1107=(r21*sj24);
IkReal x1108=((1.0)*cj23*sj24);
j19eval[0]=(x1107+(((-1.0)*r20*x1106)));
j19eval[1]=IKsign(((((-0.4)*cj24*r20))+(((0.4)*x1107))));
j19eval[2]=((IKabs(((((-1.0)*cj23*r11*x1106))+(((-1.0)*r10*x1108)))))+(IKabs(((((-1.0)*r00*x1108))+(((-1.0)*cj23*r01*x1106))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
IkReal x1109=(r20*sj24);
IkReal x1110=(cj24*r21);
IkReal x1111=((2.0)*sj23);
IkReal x1112=((2.0)*cj23*cj24);
IkReal x1113=((2.0)*cj23*sj24);
j19eval[0]=(x1109+x1110);
j19eval[1]=((IKabs((((r12*x1111))+((r11*x1113))+(((-1.0)*r10*x1112)))))+(IKabs(((((-1.0)*r00*x1112))+((r01*x1113))+((r02*x1111))))));
j19eval[2]=IKsign(((((2.0)*x1109))+(((2.0)*x1110))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j19eval[0]=r02;
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1114=((2.0)*r12);
IkReal x1115=((2.0)*cj23);
IkReal x1116=(r11*sj23*sj24);
IkReal x1117=(cj24*r10*sj23);
CheckValue<IkReal> x1118=IKPowWithIntegerCheck(r02,-1);
if(!x1118.valid){
continue;
}
if( IKabs(((0.5)*(x1118.value)*((((x1114*x1117))+(((-1.0)*x1114*x1116))+(((-1.0)*x1115))+((cj23*r12*x1114)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1117+((cj23*r12))+(((-1.0)*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5)*(x1118.value)*((((x1114*x1117))+(((-1.0)*x1114*x1116))+(((-1.0)*x1115))+((cj23*r12*x1114))))))+IKsqr((x1117+((cj23*r12))+(((-1.0)*x1116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((0.5)*(x1118.value)*((((x1114*x1117))+(((-1.0)*x1114*x1116))+(((-1.0)*x1115))+((cj23*r12*x1114))))), (x1117+((cj23*r12))+(((-1.0)*x1116))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1119=IKsin(j19);
IkReal x1120=IKcos(j19);
IkReal x1121=(cj24*r10);
IkReal x1122=((0.4)*sj23);
IkReal x1123=((0.4)*cj23);
IkReal x1124=(r01*sj24);
IkReal x1125=(cj24*r00);
IkReal x1126=((0.4)*r11*sj24);
IkReal x1127=((0.4)*x1119);
IkReal x1128=((0.4)*x1120);
evalcond[0]=(x1123+(((-1.0)*r12*x1128))+((r02*x1127)));
evalcond[1]=(x1127+(((-1.0)*x1122*x1124))+((x1122*x1125))+((r02*x1123)));
evalcond[2]=(((x1121*x1122))+(((-1.0)*r11*sj24*x1122))+(((-1.0)*x1128))+((r12*x1123)));
evalcond[3]=((((-1.0)*cj24*r11*x1128))+((cj24*r01*x1127))+(((-1.0)*r10*sj24*x1128))+((r00*sj24*x1127)));
evalcond[4]=(x1122+((x1120*x1126))+(((-1.0)*x1121*x1128))+((x1125*x1127))+(((-1.0)*x1124*x1127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1129=((2.0)*sj24);
IkReal x1130=((2.0)*sj23);
IkReal x1131=((2.0)*cj23*cj24);
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(IKsign(((((2.0)*cj24*r21))+((r20*x1129)))),-1);
if(!x1132.valid){
continue;
}
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1131))+((cj23*r11*x1129))+((r12*x1130)))),IkReal((((r02*x1130))+((cj23*r01*x1129))+(((-1.0)*r00*x1131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1132.value)))+(x1133.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1134=IKsin(j19);
IkReal x1135=IKcos(j19);
IkReal x1136=(cj24*r10);
IkReal x1137=((0.4)*sj23);
IkReal x1138=((0.4)*cj23);
IkReal x1139=(r01*sj24);
IkReal x1140=(cj24*r00);
IkReal x1141=((0.4)*r11*sj24);
IkReal x1142=((0.4)*x1134);
IkReal x1143=((0.4)*x1135);
evalcond[0]=(x1138+((r02*x1142))+(((-1.0)*r12*x1143)));
evalcond[1]=(((x1137*x1140))+x1142+(((-1.0)*x1137*x1139))+((r02*x1138)));
evalcond[2]=(((x1136*x1137))+(((-1.0)*x1143))+(((-1.0)*r11*sj24*x1137))+((r12*x1138)));
evalcond[3]=(((cj24*r01*x1142))+(((-1.0)*cj24*r11*x1143))+(((-1.0)*r10*sj24*x1143))+((r00*sj24*x1142)));
evalcond[4]=((((-1.0)*x1136*x1143))+((x1140*x1142))+x1137+(((-1.0)*x1139*x1142))+((x1135*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1144=((0.4)*cj24);
IkReal x1145=((0.4)*cj23*sj24);
CheckValue<IkReal> x1146=IKPowWithIntegerCheck(IKsign(((((0.4)*r21*sj24))+(((-1.0)*r20*x1144)))),-1);
if(!x1146.valid){
continue;
}
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(((((-1.0)*cj23*r11*x1144))+(((-1.0)*r10*x1145)))),IkReal(((((-1.0)*r00*x1145))+(((-1.0)*cj23*r01*x1144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1146.value)))+(x1147.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1148=IKsin(j19);
IkReal x1149=IKcos(j19);
IkReal x1150=(cj24*r10);
IkReal x1151=((0.4)*sj23);
IkReal x1152=((0.4)*cj23);
IkReal x1153=(r01*sj24);
IkReal x1154=(cj24*r00);
IkReal x1155=((0.4)*r11*sj24);
IkReal x1156=((0.4)*x1148);
IkReal x1157=((0.4)*x1149);
evalcond[0]=(x1152+((r02*x1156))+(((-1.0)*r12*x1157)));
evalcond[1]=(x1156+((r02*x1152))+((x1151*x1154))+(((-1.0)*x1151*x1153)));
evalcond[2]=(((r12*x1152))+(((-1.0)*x1157))+((x1150*x1151))+(((-1.0)*r11*sj24*x1151)));
evalcond[3]=((((-1.0)*cj24*r11*x1157))+(((-1.0)*r10*sj24*x1157))+((r00*sj24*x1156))+((cj24*r01*x1156)));
evalcond[4]=(x1151+((x1149*x1155))+(((-1.0)*x1153*x1156))+((x1154*x1156))+(((-1.0)*x1150*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19, j23]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x1158=((1.0)*pz);
IkReal x1159=((0.4)*cj24);
IkReal x1160=((0.4)*sj24);
IkReal x1161=((((-1.0)*r10*x1160))+(((-1.0)*r11*x1159)));
IkReal x1162=(((r00*x1160))+((r01*x1159)));
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal(x1161),IkReal(x1162),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
IkReal x1163=((1.0)*(x1165.value));
if((((x1161*x1161)+(x1162*x1162))) < -0.00001)
continue;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1161*x1161)+(x1162*x1162)))),-1);
if(!x1166.valid){
continue;
}
if( (((-1.0)*(x1166.value)*(((((-1.0)*r20*sj24*x1158))+(((-1.0)*cj24*r21*x1158)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1166.value)*(((((-1.0)*r20*sj24*x1158))+(((-1.0)*cj24*r21*x1158)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1164=((-1.0)*(IKasin(((-1.0)*(x1166.value)*(((((-1.0)*r20*sj24*x1158))+(((-1.0)*cj24*r21*x1158))))))));
j19array[0]=((((-1.0)*x1164))+(((-1.0)*x1163)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x1163))+(((1.0)*x1164)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j23eval[1];
IkReal x1167=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1167);
rxp2_2=0;
j23eval[0]=(((cj24*r20))+(((-1.0)*r21*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1168=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1168);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1168);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1168);
rxp2_2=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1169=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1169);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1169);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1169);
rxp2_2=0;
j23eval[0]=(((cj24*r10))+(((-1.0)*r11*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23eval[1];
IkReal x1170=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=0;
rxp0_1=(r00*x1170);
rxp0_2=0;
rxp1_0=0;
rxp1_1=(r01*x1170);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=0;
r10=0;
r11=0;
r22=0;
r02=0;
j23eval[0]=(((cj24*r20))+(((-1.0)*r21*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1171=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=0;
rxp0_1=(r00*x1171);
rxp0_2=0;
rxp1_0=0;
rxp1_1=(r01*x1171);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=0;
r10=0;
r11=0;
r22=0;
r02=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[2];
IkReal x1172=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=0;
rxp0_1=(r00*x1172);
rxp0_2=0;
rxp1_0=0;
rxp1_1=(r01*x1172);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=0;
r10=0;
r11=0;
r22=0;
r02=0;
j23eval[0]=(((cj24*r20))+(((-1.0)*r21*sj24)));
j23eval[1]=r12;
if( IKabs(j23eval[0]) < 0.0000010000000000  || IKabs(j23eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1173=IKPowWithIntegerCheck(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))),-1);
if(!x1173.valid){
continue;
}
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(r12,-1);
if(!x1174.valid){
continue;
}
if( IKabs((pz*(x1173.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj19*(x1174.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*(x1173.value)))+IKsqr((cj19*(x1174.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2((pz*(x1173.value)), (cj19*(x1174.value)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1175=IKcos(j23);
IkReal x1176=IKsin(j23);
IkReal x1177=((0.4)*sj19);
IkReal x1178=(cj24*r00);
IkReal x1179=(r01*sj24);
IkReal x1180=(r21*sj24);
IkReal x1181=((1.0)*pz);
IkReal x1182=(cj24*r20);
IkReal x1183=((0.4)*cj19);
IkReal x1184=((0.4)*x1176);
IkReal x1185=((0.4)*x1175);
IkReal x1186=((0.8)*pz*x1176);
evalcond[0]=(x1185+(((-1.0)*r12*x1183)));
evalcond[1]=((((-1.0)*x1183))+((r12*x1185)));
evalcond[2]=(((x1182*x1186))+(((-1.0)*x1180*x1186)));
evalcond[3]=(((x1182*x1184))+(((-1.0)*x1181))+(((-1.0)*x1180*x1184)));
evalcond[4]=(x1177+((x1178*x1184))+(((-1.0)*x1179*x1184)));
evalcond[5]=((((-1.0)*x1181*x1182))+x1184+((pz*x1180))+((x1177*x1178))+(((-1.0)*x1177*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1187.valid){
continue;
}
if( IKabs(((-2.0)*sj19*(x1187.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj19*r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj19*(x1187.value)))+IKsqr((cj19*r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((-2.0)*sj19*(x1187.value)), (cj19*r12));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1188=IKcos(j23);
IkReal x1189=IKsin(j23);
IkReal x1190=((0.4)*sj19);
IkReal x1191=(cj24*r00);
IkReal x1192=(r01*sj24);
IkReal x1193=(r21*sj24);
IkReal x1194=((1.0)*pz);
IkReal x1195=(cj24*r20);
IkReal x1196=((0.4)*cj19);
IkReal x1197=((0.4)*x1189);
IkReal x1198=((0.4)*x1188);
IkReal x1199=((0.8)*pz*x1189);
evalcond[0]=(x1198+(((-1.0)*r12*x1196)));
evalcond[1]=((((-1.0)*x1196))+((r12*x1198)));
evalcond[2]=((((-1.0)*x1193*x1199))+((x1195*x1199)));
evalcond[3]=((((-1.0)*x1193*x1197))+((x1195*x1197))+(((-1.0)*x1194)));
evalcond[4]=(x1190+(((-1.0)*x1192*x1197))+((x1191*x1197)));
evalcond[5]=(x1197+(((-1.0)*x1190*x1192))+(((-1.0)*x1194*x1195))+((pz*x1193))+((x1190*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1200=IKPowWithIntegerCheck(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))),-1);
if(!x1200.valid){
continue;
}
if( IKabs((pz*(x1200.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj19*r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*(x1200.value)))+IKsqr((cj19*r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2((pz*(x1200.value)), (cj19*r12));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1201=IKcos(j23);
IkReal x1202=IKsin(j23);
IkReal x1203=((0.4)*sj19);
IkReal x1204=(cj24*r00);
IkReal x1205=(r01*sj24);
IkReal x1206=(r21*sj24);
IkReal x1207=((1.0)*pz);
IkReal x1208=(cj24*r20);
IkReal x1209=((0.4)*cj19);
IkReal x1210=((0.4)*x1202);
IkReal x1211=((0.4)*x1201);
IkReal x1212=((0.8)*pz*x1202);
evalcond[0]=(x1211+(((-1.0)*r12*x1209)));
evalcond[1]=(((r12*x1211))+(((-1.0)*x1209)));
evalcond[2]=((((-1.0)*x1206*x1212))+((x1208*x1212)));
evalcond[3]=((((-1.0)*x1206*x1210))+(((-1.0)*x1207))+((x1208*x1210)));
evalcond[4]=(x1203+((x1204*x1210))+(((-1.0)*x1205*x1210)));
evalcond[5]=(x1210+((x1203*x1204))+(((-1.0)*x1203*x1205))+((pz*x1206))+(((-1.0)*x1207*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23eval[1];
IkReal x1213=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1213);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1213);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1214=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1214);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1214);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j23eval[0]=(((cj24*r10))+(((-1.0)*r11*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[2];
IkReal x1215=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1215);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1215);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
j23eval[1]=r22;
if( IKabs(j23eval[0]) < 0.0000010000000000  || IKabs(j23eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1216.valid){
continue;
}
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(r22,-1);
if(!x1217.valid){
continue;
}
if( IKabs(((-2.0)*sj19*(x1216.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*pz*(x1217.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj19*(x1216.value)))+IKsqr(((2.5)*pz*(x1217.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((-2.0)*sj19*(x1216.value)), ((2.5)*pz*(x1217.value)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1218=IKcos(j23);
IkReal x1219=IKsin(j23);
IkReal x1220=((0.4)*cj24);
IkReal x1221=((1.0)*pz);
IkReal x1222=((0.4)*sj24);
IkReal x1223=(r22*x1218);
IkReal x1224=(x1219*x1222);
evalcond[0]=((0.8)*pz*x1223);
evalcond[1]=((((0.4)*x1218))+(((-1.0)*r22*x1221)));
evalcond[2]=((((-1.0)*x1221))+(((0.4)*x1223)));
evalcond[3]=((((-1.0)*r01*x1224))+(((0.4)*sj19))+((r00*x1219*x1220)));
evalcond[4]=(((r10*x1219*x1220))+(((-1.0)*r11*x1224))+(((-0.4)*cj19)));
evalcond[5]=((((-1.0)*cj19*r10*x1220))+((cj19*r11*x1222))+((r00*sj19*x1220))+(((0.4)*x1219))+(((-1.0)*r01*sj19*x1222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(((((-2.0)*r11*sj24))+(((2.0)*cj24*r10))),-1);
if(!x1225.valid){
continue;
}
if( IKabs(((2.0)*cj19*(x1225.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*pz*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.0)*cj19*(x1225.value)))+IKsqr(((2.5)*pz*r22))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((2.0)*cj19*(x1225.value)), ((2.5)*pz*r22));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j23);
IkReal x1227=IKsin(j23);
IkReal x1228=((0.4)*cj24);
IkReal x1229=((1.0)*pz);
IkReal x1230=((0.4)*sj24);
IkReal x1231=(r22*x1226);
IkReal x1232=(x1227*x1230);
evalcond[0]=((0.8)*pz*x1231);
evalcond[1]=((((0.4)*x1226))+(((-1.0)*r22*x1229)));
evalcond[2]=((((-1.0)*x1229))+(((0.4)*x1231)));
evalcond[3]=((((-1.0)*r01*x1232))+(((0.4)*sj19))+((r00*x1227*x1228)));
evalcond[4]=((((-1.0)*r11*x1232))+(((-0.4)*cj19))+((r10*x1227*x1228)));
evalcond[5]=((((-1.0)*r01*sj19*x1230))+(((-1.0)*cj19*r10*x1228))+((r00*sj19*x1228))+((cj19*r11*x1230))+(((0.4)*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1233.valid){
continue;
}
if( IKabs(((-2.0)*sj19*(x1233.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*pz*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj19*(x1233.value)))+IKsqr(((2.5)*pz*r22))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((-2.0)*sj19*(x1233.value)), ((2.5)*pz*r22));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1234=IKcos(j23);
IkReal x1235=IKsin(j23);
IkReal x1236=((0.4)*cj24);
IkReal x1237=((1.0)*pz);
IkReal x1238=((0.4)*sj24);
IkReal x1239=(r22*x1234);
IkReal x1240=(x1235*x1238);
evalcond[0]=((0.8)*pz*x1239);
evalcond[1]=((((0.4)*x1234))+(((-1.0)*r22*x1237)));
evalcond[2]=((((-1.0)*x1237))+(((0.4)*x1239)));
evalcond[3]=((((0.4)*sj19))+((r00*x1235*x1236))+(((-1.0)*r01*x1240)));
evalcond[4]=(((r10*x1235*x1236))+(((-1.0)*r11*x1240))+(((-0.4)*cj19)));
evalcond[5]=((((-1.0)*r01*sj19*x1238))+((r00*sj19*x1236))+(((-1.0)*cj19*r10*x1236))+((cj19*r11*x1238))+(((0.4)*x1235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j23]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1241=(pz*r22);
IkReal x1242=((2.0)*cj19);
IkReal x1243=(r02*sj19);
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(((((-2.0)*r11*sj24))+(((2.0)*cj24*r10))),-1);
if(!x1244.valid){
continue;
}
if( IKabs(((x1244.value)*((x1242+(((2.0)*r12*x1243))+(((-1.0)*x1242*(r12*r12)))+(((-5.0)*r12*x1241)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1243))+(((2.5)*x1241))+((cj19*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1244.value)*((x1242+(((2.0)*r12*x1243))+(((-1.0)*x1242*(r12*r12)))+(((-5.0)*r12*x1241))))))+IKsqr(((((-1.0)*x1243))+(((2.5)*x1241))+((cj19*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1244.value)*((x1242+(((2.0)*r12*x1243))+(((-1.0)*x1242*(r12*r12)))+(((-5.0)*r12*x1241))))), ((((-1.0)*x1243))+(((2.5)*x1241))+((cj19*r12))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1245=IKcos(j23);
IkReal x1246=IKsin(j23);
IkReal x1247=(pz*r22);
IkReal x1248=((0.4)*cj19);
IkReal x1249=((0.4)*sj19);
IkReal x1250=((1.0)*pz);
IkReal x1251=(cj24*r00);
IkReal x1252=(cj24*r20);
IkReal x1253=(cj24*r10);
IkReal x1254=((0.4)*x1245);
IkReal x1255=((0.4)*x1246);
IkReal x1256=(pz*r21*sj24);
IkReal x1257=((0.8)*x1246);
IkReal x1258=(sj24*x1255);
evalcond[0]=(x1254+(((-1.0)*x1247))+(((-1.0)*r12*x1248))+((r02*x1249)));
evalcond[1]=((((-1.0)*x1250))+(((-1.0)*r21*x1258))+((r22*x1254))+((x1252*x1255)));
evalcond[2]=((((-1.0)*x1256*x1257))+((pz*x1252*x1257))+(((0.8)*x1245*x1247)));
evalcond[3]=(x1249+((r02*x1254))+(((-1.0)*r01*x1258))+((x1251*x1255)));
evalcond[4]=((((-1.0)*r11*x1258))+((r12*x1254))+(((-1.0)*x1248))+((x1253*x1255)));
evalcond[5]=(x1256+x1255+(((-1.0)*x1248*x1253))+((r11*sj24*x1248))+(((-1.0)*r01*sj24*x1249))+(((-1.0)*x1250*x1252))+((x1249*x1251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1259=(cj19*r12);
IkReal x1260=(pz*r22);
IkReal x1261=((2.0)*sj19);
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1262.valid){
continue;
}
if( IKabs(((x1262.value)*(((((-5.0)*r02*x1260))+(((-2.0)*r02*x1259))+((x1261*(r02*r02)))+(((-1.0)*x1261)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1259+(((2.5)*x1260))+(((-1.0)*r02*sj19)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1262.value)*(((((-5.0)*r02*x1260))+(((-2.0)*r02*x1259))+((x1261*(r02*r02)))+(((-1.0)*x1261))))))+IKsqr((x1259+(((2.5)*x1260))+(((-1.0)*r02*sj19))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1262.value)*(((((-5.0)*r02*x1260))+(((-2.0)*r02*x1259))+((x1261*(r02*r02)))+(((-1.0)*x1261))))), (x1259+(((2.5)*x1260))+(((-1.0)*r02*sj19))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1263=IKcos(j23);
IkReal x1264=IKsin(j23);
IkReal x1265=(pz*r22);
IkReal x1266=((0.4)*cj19);
IkReal x1267=((0.4)*sj19);
IkReal x1268=((1.0)*pz);
IkReal x1269=(cj24*r00);
IkReal x1270=(cj24*r20);
IkReal x1271=(cj24*r10);
IkReal x1272=((0.4)*x1263);
IkReal x1273=((0.4)*x1264);
IkReal x1274=(pz*r21*sj24);
IkReal x1275=((0.8)*x1264);
IkReal x1276=(sj24*x1273);
evalcond[0]=((((-1.0)*r12*x1266))+x1272+((r02*x1267))+(((-1.0)*x1265)));
evalcond[1]=(((r22*x1272))+((x1270*x1273))+(((-1.0)*r21*x1276))+(((-1.0)*x1268)));
evalcond[2]=((((0.8)*x1263*x1265))+(((-1.0)*x1274*x1275))+((pz*x1270*x1275)));
evalcond[3]=(((x1269*x1273))+x1267+(((-1.0)*r01*x1276))+((r02*x1272)));
evalcond[4]=(((r12*x1272))+(((-1.0)*r11*x1276))+((x1271*x1273))+(((-1.0)*x1266)));
evalcond[5]=((((-1.0)*x1268*x1270))+x1273+x1274+(((-1.0)*x1266*x1271))+((x1267*x1269))+(((-1.0)*r01*sj24*x1267))+((r11*sj24*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1277=((0.4)*r22);
IkReal x1278=(r02*sj19);
IkReal x1279=(cj19*r12);
CheckValue<IkReal> x1280=IKPowWithIntegerCheck(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))),-1);
if(!x1280.valid){
continue;
}
if( IKabs(((x1280.value)*((((x1277*x1278))+(((-1.0)*pz*(r22*r22)))+(((-1.0)*x1277*x1279))+pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1279+(((2.5)*pz*r22))+(((-1.0)*x1278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1280.value)*((((x1277*x1278))+(((-1.0)*pz*(r22*r22)))+(((-1.0)*x1277*x1279))+pz))))+IKsqr((x1279+(((2.5)*pz*r22))+(((-1.0)*x1278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1280.value)*((((x1277*x1278))+(((-1.0)*pz*(r22*r22)))+(((-1.0)*x1277*x1279))+pz))), (x1279+(((2.5)*pz*r22))+(((-1.0)*x1278))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1281=IKcos(j23);
IkReal x1282=IKsin(j23);
IkReal x1283=(pz*r22);
IkReal x1284=((0.4)*cj19);
IkReal x1285=((0.4)*sj19);
IkReal x1286=((1.0)*pz);
IkReal x1287=(cj24*r00);
IkReal x1288=(cj24*r20);
IkReal x1289=(cj24*r10);
IkReal x1290=((0.4)*x1281);
IkReal x1291=((0.4)*x1282);
IkReal x1292=(pz*r21*sj24);
IkReal x1293=((0.8)*x1282);
IkReal x1294=(sj24*x1291);
evalcond[0]=((((-1.0)*x1283))+x1290+((r02*x1285))+(((-1.0)*r12*x1284)));
evalcond[1]=((((-1.0)*r21*x1294))+((x1288*x1291))+(((-1.0)*x1286))+((r22*x1290)));
evalcond[2]=(((pz*x1288*x1293))+(((0.8)*x1281*x1283))+(((-1.0)*x1292*x1293)));
evalcond[3]=((((-1.0)*r01*x1294))+x1285+((x1287*x1291))+((r02*x1290)));
evalcond[4]=(((r12*x1290))+(((-1.0)*r11*x1294))+(((-1.0)*x1284))+((x1289*x1291)));
evalcond[5]=(((x1285*x1287))+x1292+x1291+(((-1.0)*r01*sj24*x1285))+(((-1.0)*x1284*x1289))+(((-1.0)*x1286*x1288))+((r11*sj24*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
IkReal x1295=((((0.4)*cj24*r20))+(((-0.4)*r21*sj24)));
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal(((0.4)*r22)),IkReal(x1295),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
IkReal x1296=((1.0)*(x1298.value));
if((((x1295*x1295)+(((0.16)*(r22*r22))))) < -0.00001)
continue;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1295*x1295)+(((0.16)*(r22*r22)))))),-1);
if(!x1299.valid){
continue;
}
if( ((pz*(x1299.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1299.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1297=IKasin((pz*(x1299.value)));
j23array[0]=(x1297+(((-1.0)*x1296)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+(((-1.0)*x1296))+(((-1.0)*x1297)));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
IkReal x1300=IKsin(j23);
IkReal x1301=((0.8)*pz*x1300);
evalcond[0]=((((-1.0)*r21*sj24*x1301))+(((0.8)*pz*r22*(IKcos(j23))))+((cj24*r20*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1302=((1.0)*sj23);
if( IKabs((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj24*x1302))+((cj23*r12))+((cj24*r10*sj23)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1302))))+IKsqr(((((-1.0)*r11*sj24*x1302))+((cj23*r12))+((cj24*r10*sj23))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1302))), ((((-1.0)*r11*sj24*x1302))+((cj23*r12))+((cj24*r10*sj23))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1303=IKsin(j19);
IkReal x1304=IKcos(j19);
IkReal x1305=((0.4)*sj23);
IkReal x1306=(cj24*r00);
IkReal x1307=(r01*sj24);
IkReal x1308=(cj24*r10);
IkReal x1309=((1.0)*pz);
IkReal x1310=((0.4)*cj23);
IkReal x1311=(r11*sj24);
IkReal x1312=((0.4)*x1303);
IkReal x1313=((0.4)*x1304);
evalcond[0]=(x1310+(((-1.0)*r22*x1309))+(((-1.0)*r12*x1313))+((r02*x1312)));
evalcond[1]=(x1312+((x1305*x1306))+((r02*x1310))+(((-1.0)*x1305*x1307)));
evalcond[2]=(((x1305*x1308))+(((-1.0)*x1313))+(((-1.0)*x1305*x1311))+((r12*x1310)));
evalcond[3]=(((r00*sj24*x1312))+(((-1.0)*r10*sj24*x1313))+((cj24*r01*x1312))+(((-1.0)*cj24*r21*x1309))+(((-1.0)*cj24*r11*x1313))+(((-1.0)*r20*sj24*x1309)));
evalcond[4]=(x1305+((x1311*x1313))+(((-1.0)*x1308*x1313))+(((-1.0)*x1307*x1312))+((x1306*x1312))+((pz*r21*sj24))+(((-1.0)*cj24*r20*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
IkReal x1314=((0.8)*pz);
CheckValue<IkReal> x1316 = IKatan2WithCheck(IkReal((r22*x1314)),IkReal(((((-1.0)*r21*sj24*x1314))+((cj24*r20*x1314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1316.valid){
continue;
}
IkReal x1315=x1316.value;
j23array[0]=((-1.0)*x1315);
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+(((-1.0)*x1315)));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
IkReal x1317=IKsin(j23);
IkReal x1318=((0.4)*x1317);
evalcond[0]=((((-1.0)*r21*sj24*x1318))+(((-1.0)*pz))+(((0.4)*r22*(IKcos(j23))))+((cj24*r20*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1319=((1.0)*sj23);
if( IKabs((((r01*sj23*sj24))+(((-1.0)*cj24*r00*x1319))+(((-1.0)*cj23*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj23*sj24))+(((-1.0)*cj24*r00*x1319))+(((-1.0)*cj23*r02))))+IKsqr((((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1319))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((r01*sj23*sj24))+(((-1.0)*cj24*r00*x1319))+(((-1.0)*cj23*r02))), (((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1319))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1320=IKsin(j19);
IkReal x1321=IKcos(j19);
IkReal x1322=((0.4)*sj23);
IkReal x1323=(cj24*r00);
IkReal x1324=(r01*sj24);
IkReal x1325=(cj24*r10);
IkReal x1326=((1.0)*pz);
IkReal x1327=((0.4)*cj23);
IkReal x1328=(r11*sj24);
IkReal x1329=((0.4)*x1320);
IkReal x1330=((0.4)*x1321);
evalcond[0]=(x1327+(((-1.0)*r22*x1326))+((r02*x1329))+(((-1.0)*r12*x1330)));
evalcond[1]=(x1329+(((-1.0)*x1322*x1324))+((x1322*x1323))+((r02*x1327)));
evalcond[2]=((((-1.0)*x1322*x1328))+((x1322*x1325))+((r12*x1327))+(((-1.0)*x1330)));
evalcond[3]=((((-1.0)*cj24*r11*x1330))+(((-1.0)*r20*sj24*x1326))+((r00*sj24*x1329))+((cj24*r01*x1329))+(((-1.0)*cj24*r21*x1326))+(((-1.0)*r10*sj24*x1330)));
evalcond[4]=(x1322+(((-1.0)*x1325*x1330))+(((-1.0)*x1324*x1329))+((x1323*x1329))+((x1328*x1330))+((pz*r21*sj24))+(((-1.0)*cj24*r20*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=pp;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
IkReal x1331=((0.4)*r22);
IkReal x1332=((1.0)*pz);
IkReal x1333=(x1331+(((-1.0)*x1332)));
IkReal x1334=((-1.0)*pz);
IkReal x1335=((((-1.0)*x1331))+(((-1.0)*x1332)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1334);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1334);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1334);
rxp2_2=0;
IkReal gconst24=x1333;
IkReal gconst25=x1335;
IkReal gconst26=x1333;
IkReal gconst27=x1335;
IkReal gconst28=x1333;
IkReal gconst29=x1335;
IkReal gconst30=x1333;
IkReal gconst31=x1335;
IkReal x1336=pz*pz*pz*pz;
IkReal x1337=r20*r20;
IkReal x1338=r22*r22;
IkReal x1339=r21*r21;
IkReal x1340=(x1336*x1339);
IkReal x1341=(x1336*x1338);
IkReal x1342=(x1336*x1337);
j24eval[0]=((IKabs(((((-2.56)*x1342))+(((-2.56)*x1341)))))+(((2.0)*(IKabs(((((-10.24)*x1340))+(((-10.24)*x1341)))))))+(((40.96)*(IKabs((r20*r21*x1336)))))+(IKabs(((((5.12)*x1342))+(((-15.36)*x1341))+(((-20.48)*x1340))))));
if( IKabs(j24eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j19, j23, j24]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1343=pz*pz;
IkReal x1344=r20*r20;
IkReal x1345=r22*r22;
IkReal x1346=r21*r21;
IkReal x1347=pz*pz*pz*pz;
IkReal x1348=(gconst25*gconst26);
IkReal x1349=(gconst29*gconst30);
IkReal x1350=(gconst24*gconst27);
IkReal x1351=((4.096)*r22);
IkReal x1352=(gconst25*gconst27);
IkReal x1353=(gconst29*gconst31);
IkReal x1354=(gconst28*gconst30);
IkReal x1355=(gconst26*gconst29);
IkReal x1356=(gconst27*gconst28);
IkReal x1357=(gconst25*gconst30);
IkReal x1358=(gconst26*gconst28);
IkReal x1359=(gconst25*gconst31);
IkReal x1360=(gconst28*gconst31);
IkReal x1361=(gconst24*gconst31);
IkReal x1362=(gconst24*gconst26);
IkReal x1363=((1.024)*r22);
IkReal x1364=(gconst24*gconst30);
IkReal x1365=(gconst27*gconst29);
IkReal x1366=(x1343*x1346);
IkReal x1367=(x1343*x1344);
IkReal x1368=(r20*r21*x1347);
IkReal x1369=((10.24)*x1368);
IkReal x1370=((2.56)*x1367);
IkReal x1371=((0.64)*x1343*x1345);
IkReal x1372=((1.28)*x1343*x1345);
IkReal x1373=((-10.24)*x1368);
IkReal x1374=(gconst30*x1363*x1367);
IkReal x1375=(gconst29*x1363*x1367);
IkReal x1376=(gconst26*x1363*x1367);
IkReal x1377=(gconst29*x1351*x1366);
IkReal x1378=(gconst30*x1351*x1366);
IkReal x1379=(gconst25*x1363*x1367);
IkReal x1380=(x1360*x1371);
IkReal x1381=(x1349*x1370);
IkReal x1382=(x1349*x1371);
IkReal x1383=(x1354*x1371);
IkReal x1384=(x1353*x1371);
IkReal x1385=(gconst25*x1351*x1366);
IkReal x1386=((1.6384)*x1345*x1366);
IkReal x1387=(x1358*x1371);
IkReal x1388=(x1359*x1371);
IkReal x1389=(x1357*x1371);
IkReal x1390=(x1355*x1370);
IkReal x1391=(x1357*x1370);
IkReal x1392=(x1356*x1371);
IkReal x1393=(x1355*x1371);
IkReal x1394=(x1365*x1371);
IkReal x1395=(x1361*x1371);
IkReal x1396=(x1364*x1371);
IkReal x1397=(gconst26*x1351*x1366);
IkReal x1398=((0.4096)*x1345*x1367);
IkReal x1399=(x1348*x1371);
IkReal x1400=(x1362*x1371);
IkReal x1401=(x1352*x1371);
IkReal x1402=(x1350*x1371);
IkReal x1403=(x1348*x1370);
IkReal x1404=(x1375+x1376);
IkReal x1405=(x1379+x1397);
IkReal x1406=(x1374+x1377);
IkReal x1407=(x1399+x1403+x1402+x1401+x1400);
IkReal x1408=(x1384+x1380+x1381+x1382+x1383);
IkReal x1409=(x1388+x1389+x1387+x1396+x1395+x1394+x1393+x1392+x1391+x1390);
op[0]=(x1375+x1398+(((-1.0)*x1408))+(((-1.0)*x1374)));
op[1]=x1373;
op[2]=(x1379+x1386+(((5.12)*x1349*x1367))+(((-10.24)*x1349*x1366))+(((-1.0)*x1353*x1372))+(((-1.0)*x1349*x1372))+(((-1.0)*x1409))+(((-1.0)*x1404))+(((-1.0)*x1378))+x1406+(((-1.0)*x1360*x1372))+(((-1.0)*x1354*x1372)));
op[3]=x1373;
op[4]=(x1376+x1385+(((-1.0)*x1365*x1372))+(((-10.24)*x1357*x1366))+(((-1.0)*x1358*x1372))+(((-1.0)*x1357*x1372))+(((-0.8192)*x1345*x1367))+(((-1.0)*x1356*x1372))+(((-1.0)*x1408))+(((-1.0)*x1405))+(((-1.0)*x1407))+(((-1.0)*x1375))+(((-1.0)*x1378))+(((5.12)*x1357*x1367))+(((-1.0)*x1355*x1372))+(((-1.0)*x1364*x1372))+(((3.2768)*x1345*x1366))+x1406+(((-1.0)*x1359*x1372))+(((-1.0)*x1361*x1372))+(((5.12)*x1355*x1367))+(((-10.24)*x1355*x1366)));
op[5]=x1369;
op[6]=(x1385+x1386+(((5.12)*x1348*x1367))+(((-10.24)*x1348*x1366))+(((-1.0)*x1362*x1372))+(((-1.0)*x1352*x1372))+(((-1.0)*x1348*x1372))+(((-1.0)*x1409))+(((-1.0)*x1405))+(((-1.0)*x1374))+x1404+(((-1.0)*x1350*x1372)));
op[7]=x1369;
op[8]=(x1379+x1398+(((-1.0)*x1407))+(((-1.0)*x1376)));
polyroots8(op,zeror,numroots);
IkReal j24array[8], cj24array[8], sj24array[8], tempj24array[1];
int numsolutions = 0;
for(int ij24 = 0; ij24 < numroots; ++ij24)
{
IkReal htj24 = zeror[ij24];
tempj24array[0]=((2.0)*(atan(htj24)));
for(int kj24 = 0; kj24 < 1; ++kj24)
{
j24array[numsolutions] = tempj24array[kj24];
if( j24array[numsolutions] > IKPI )
{
    j24array[numsolutions]-=IK2PI;
}
else if( j24array[numsolutions] < -IKPI )
{
    j24array[numsolutions]+=IK2PI;
}
sj24array[numsolutions] = IKsin(j24array[numsolutions]);
cj24array[numsolutions] = IKcos(j24array[numsolutions]);
numsolutions++;
}
}
bool j24valid[8]={true,true,true,true,true,true,true,true};
_nj24 = 8;
for(int ij24 = 0; ij24 < numsolutions; ++ij24)
    {
if( !j24valid[ij24] )
{
    continue;
}
    j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
htj24 = IKtan(j24/2);

_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < numsolutions; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
{
IkReal j23eval[1];
IkReal x1410=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1410);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1410);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1410);
rxp2_2=0;
j23eval[0]=((IKabs((pz*r22)))+(IKabs(((((-1.0)*pz*r21*sj24))+((cj24*pz*r20))))));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[2];
IkReal x1411=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1411);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1411);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1411);
rxp2_2=0;
IkReal x1412=(cj24*r20);
IkReal x1413=(r21*sj24);
j23eval[0]=((((-2.0)*x1412*x1413))+(r22*r22)+(x1413*x1413)+(x1412*x1412));
j23eval[1]=((IKabs(r22))+(((2.5)*(IKabs(((((-0.4)*x1413))+(((0.4)*x1412))))))));
if( IKabs(j23eval[0]) < 0.0000010000000000  || IKabs(j23eval[1]) < 0.0000010000000000  )
{
{
IkReal j19eval[2];
IkReal x1414=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1414);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1414);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1414);
rxp2_2=0;
IkReal x1415=cj24*cj24;
IkReal x1416=sj24*sj24;
IkReal x1417=((0.4)*cj24);
IkReal x1418=((0.4)*sj24);
IkReal x1419=((2.0)*cj24*sj24);
j19eval[0]=((IKabs((((r00*x1418))+((r01*x1417)))))+(IKabs(((((-1.0)*r10*x1418))+(((-1.0)*r11*x1417))))));
j19eval[1]=(((x1415*(r11*r11)))+((x1416*(r00*r00)))+((x1416*(r10*r10)))+((r00*r01*x1419))+((x1415*(r01*r01)))+((r10*r11*x1419)));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=((IKabs(r22))+(((2.5)*(IKabs(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))))))));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
IkReal x1420=((0.4)*sj24);
IkReal x1421=((0.4)*cj24);
j19eval[0]=((IKabs((((r01*x1421))+((r00*x1420)))))+(IKabs(((((-1.0)*r10*x1420))+(((-1.0)*r11*x1421))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j19, j23]

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x1422=((0.4)*cj24);
IkReal x1423=((0.4)*sj24);
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1423))+(((-1.0)*r11*x1422)))),IkReal((((r01*x1422))+((r00*x1423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
IkReal x1424=x1425.value;
j19array[0]=((-1.0)*x1424);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x1424)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=(((cj24*r20))+(((-1.0)*r21*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j23eval[0]=(((cj24*r10))+(((-1.0)*r11*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
cj23array[0]=(cj19*r12);
if( cj23array[0] >= -1-IKFAST_SINCOS_THRESH && cj23array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j23valid[0] = j23valid[1] = true;
    j23array[0] = IKacos(cj23array[0]);
    sj23array[0] = IKsin(j23array[0]);
    cj23array[1] = cj23array[0];
    j23array[1] = -j23array[0];
    sj23array[1] = -sj23array[0];
}
else if( isnan(cj23array[0]) )
{
    // probably any value will work
    j23valid[0] = true;
    cj23array[0] = 1; sj23array[0] = 0; j23array[0] = 0;
}
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x1426=IKsin(j23);
IkReal x1427=((0.4)*sj24*x1426);
IkReal x1428=((0.4)*cj24*x1426);
evalcond[0]=((0.4)*x1426);
evalcond[1]=((((0.4)*r12*(IKcos(j23))))+(((-0.4)*cj19)));
evalcond[2]=((((-1.0)*r21*x1427))+((r20*x1428)));
evalcond[3]=(((r00*x1428))+(((-1.0)*r01*x1427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
sj23array[0]=(((r01*sj19*sj24))+((cj19*cj24*r10))+(((-1.0)*cj19*r11*sj24))+(((-1.0)*cj24*r00*sj19)));
if( sj23array[0] >= -1-IKFAST_SINCOS_THRESH && sj23array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j23valid[0] = j23valid[1] = true;
    j23array[0] = IKasin(sj23array[0]);
    cj23array[0] = IKcos(j23array[0]);
    sj23array[1] = sj23array[0];
    j23array[1] = j23array[0] > 0 ? (IKPI-j23array[0]) : (-IKPI-j23array[0]);
    cj23array[1] = -cj23array[0];
}
else if( isnan(sj23array[0]) )
{
    // probably any value will work
    j23valid[0] = true;
    cj23array[0] = 1; sj23array[0] = 0; j23array[0] = 0;
}
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[4];
IkReal x1429=IKcos(j23);
IkReal x1430=IKsin(j23);
IkReal x1431=((0.4)*x1429);
IkReal x1432=((0.4)*sj24*x1430);
IkReal x1433=((0.4)*cj24*x1430);
evalcond[0]=x1431;
evalcond[1]=(r22*x1431);
evalcond[2]=((((-1.0)*r01*x1432))+(((0.4)*sj19))+((r00*x1433)));
evalcond[3]=((((-1.0)*r11*x1432))+(((-0.4)*cj19))+((r10*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j23]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1434=((2.0)*cj19);
IkReal x1435=(r02*sj19);
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(((((-2.0)*r11*sj24))+(((2.0)*cj24*r10))),-1);
if(!x1436.valid){
continue;
}
if( IKabs(((x1436.value)*(((((2.0)*r12*x1435))+(((-1.0)*x1434*(r12*r12)))+x1434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1435))+((cj19*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1436.value)*(((((2.0)*r12*x1435))+(((-1.0)*x1434*(r12*r12)))+x1434))))+IKsqr(((((-1.0)*x1435))+((cj19*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1436.value)*(((((2.0)*r12*x1435))+(((-1.0)*x1434*(r12*r12)))+x1434))), ((((-1.0)*x1435))+((cj19*r12))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[5];
IkReal x1437=IKcos(j23);
IkReal x1438=IKsin(j23);
IkReal x1439=((0.4)*cj24);
IkReal x1440=((0.4)*r02);
IkReal x1441=((0.4)*cj19);
IkReal x1442=((0.4)*sj19);
IkReal x1443=((0.4)*x1437);
IkReal x1444=((0.4)*sj24*x1438);
evalcond[0]=(((sj19*x1440))+(((-1.0)*r12*x1441))+x1443);
evalcond[1]=(((r22*x1443))+(((-1.0)*r21*x1444))+((r20*x1438*x1439)));
evalcond[2]=(((x1437*x1440))+(((-1.0)*r01*x1444))+((r00*x1438*x1439))+x1442);
evalcond[3]=(((r12*x1443))+((r10*x1438*x1439))+(((-1.0)*r11*x1444))+(((-1.0)*x1441)));
evalcond[4]=((((-1.0)*r01*sj24*x1442))+((r11*sj24*x1441))+(((-1.0)*cj19*r10*x1439))+((r00*sj19*x1439))+(((0.4)*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1445=(cj19*r12);
IkReal x1446=((2.0)*sj19);
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1447.valid){
continue;
}
if( IKabs(((x1447.value)*(((((-1.0)*x1446))+(((-2.0)*r02*x1445))+((x1446*(r02*r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1445+(((-1.0)*r02*sj19)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1447.value)*(((((-1.0)*x1446))+(((-2.0)*r02*x1445))+((x1446*(r02*r02)))))))+IKsqr((x1445+(((-1.0)*r02*sj19))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1447.value)*(((((-1.0)*x1446))+(((-2.0)*r02*x1445))+((x1446*(r02*r02)))))), (x1445+(((-1.0)*r02*sj19))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[5];
IkReal x1448=IKcos(j23);
IkReal x1449=IKsin(j23);
IkReal x1450=((0.4)*cj24);
IkReal x1451=((0.4)*r02);
IkReal x1452=((0.4)*cj19);
IkReal x1453=((0.4)*sj19);
IkReal x1454=((0.4)*x1448);
IkReal x1455=((0.4)*sj24*x1449);
evalcond[0]=(((sj19*x1451))+x1454+(((-1.0)*r12*x1452)));
evalcond[1]=(((r20*x1449*x1450))+((r22*x1454))+(((-1.0)*r21*x1455)));
evalcond[2]=(((x1448*x1451))+(((-1.0)*r01*x1455))+x1453+((r00*x1449*x1450)));
evalcond[3]=((((-1.0)*x1452))+((r12*x1454))+((r10*x1449*x1450))+(((-1.0)*r11*x1455)));
evalcond[4]=((((-1.0)*cj19*r10*x1450))+((r11*sj24*x1452))+(((-1.0)*r01*sj24*x1453))+((r00*sj19*x1450))+(((0.4)*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1456=((0.4)*r22);
IkReal x1457=(r02*sj19);
IkReal x1458=(cj19*r12);
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))),-1);
if(!x1459.valid){
continue;
}
if( IKabs(((x1459.value)*((((x1456*x1457))+(((-1.0)*x1456*x1458)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1457))+x1458)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1459.value)*((((x1456*x1457))+(((-1.0)*x1456*x1458))))))+IKsqr(((((-1.0)*x1457))+x1458))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1459.value)*((((x1456*x1457))+(((-1.0)*x1456*x1458))))), ((((-1.0)*x1457))+x1458));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[5];
IkReal x1460=IKcos(j23);
IkReal x1461=IKsin(j23);
IkReal x1462=((0.4)*cj24);
IkReal x1463=((0.4)*r02);
IkReal x1464=((0.4)*cj19);
IkReal x1465=((0.4)*sj19);
IkReal x1466=((0.4)*x1460);
IkReal x1467=((0.4)*sj24*x1461);
evalcond[0]=(((sj19*x1463))+x1466+(((-1.0)*r12*x1464)));
evalcond[1]=((((-1.0)*r21*x1467))+((r20*x1461*x1462))+((r22*x1466)));
evalcond[2]=(((r00*x1461*x1462))+(((-1.0)*r01*x1467))+((x1460*x1463))+x1465);
evalcond[3]=((((-1.0)*x1464))+((r12*x1466))+((r10*x1461*x1462))+(((-1.0)*r11*x1467)));
evalcond[4]=((((0.4)*x1461))+((r00*sj19*x1462))+((r11*sj24*x1464))+(((-1.0)*cj19*r10*x1462))+(((-1.0)*r01*sj24*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
CheckValue<IkReal> x1469 = IKatan2WithCheck(IkReal(((0.4)*r22)),IkReal(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1469.valid){
continue;
}
IkReal x1468=x1469.value;
j23array[0]=((-1.0)*x1468);
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+(((-1.0)*x1468)));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal j19eval[3];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
IkReal x1470=((1.0)*cj24);
IkReal x1471=(r21*sj24);
IkReal x1472=((1.0)*cj23*sj24);
j19eval[0]=((((-1.0)*r20*x1470))+x1471);
j19eval[1]=IKsign(((((-0.4)*cj24*r20))+(((0.4)*x1471))));
j19eval[2]=((IKabs(((((-1.0)*cj23*r01*x1470))+(((-1.0)*r00*x1472)))))+(IKabs(((((-1.0)*r10*x1472))+(((-1.0)*cj23*r11*x1470))))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[3];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
IkReal x1473=(r20*sj24);
IkReal x1474=(cj24*r21);
IkReal x1475=((2.0)*sj23);
IkReal x1476=((2.0)*cj23*cj24);
IkReal x1477=((2.0)*cj23*sj24);
j19eval[0]=(x1473+x1474);
j19eval[1]=((IKabs(((((-1.0)*r00*x1476))+((r02*x1475))+((r01*x1477)))))+(IKabs((((r12*x1475))+((r11*x1477))+(((-1.0)*r10*x1476))))));
j19eval[2]=IKsign(((((2.0)*x1473))+(((2.0)*x1474))));
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  || IKabs(j19eval[2]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
px=0;
py=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp0_2=0;
rxp1_0=0;
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
pz=0;
j19eval[0]=r02;
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j23)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs((((r01*sj24))+(((-1.0)*cj24*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj24*r10))+(((-1.0)*r11*sj24)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj24))+(((-1.0)*cj24*r00))))+IKsqr((((cj24*r10))+(((-1.0)*r11*sj24))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((r01*sj24))+(((-1.0)*cj24*r00))), (((cj24*r10))+(((-1.0)*r11*sj24))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1478=IKsin(j19);
IkReal x1479=IKcos(j19);
IkReal x1480=((0.4)*sj24);
IkReal x1481=(cj24*r00);
IkReal x1482=((0.4)*cj24*r10);
IkReal x1483=((0.4)*x1478);
IkReal x1484=((0.4)*x1479);
evalcond[0]=((((-1.0)*r12*x1484))+((r02*x1483)));
evalcond[1]=((((-1.0)*r01*x1480))+x1483+(((0.4)*x1481)));
evalcond[2]=((((-1.0)*r11*x1480))+(((-1.0)*x1484))+x1482);
evalcond[3]=((((-1.0)*cj24*r11*x1484))+((r00*x1478*x1480))+((cj24*r01*x1483))+(((-1.0)*r10*x1479*x1480)));
evalcond[4]=((0.4)+(((-1.0)*x1479*x1482))+((x1481*x1483))+((r11*x1479*x1480))+(((-1.0)*r01*x1478*x1480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j23)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
if( IKabs((((cj24*r00))+(((-1.0)*r01*sj24)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj24))+(((-1.0)*cj24*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj24*r00))+(((-1.0)*r01*sj24))))+IKsqr((((r11*sj24))+(((-1.0)*cj24*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((cj24*r00))+(((-1.0)*r01*sj24))), (((r11*sj24))+(((-1.0)*cj24*r10))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1485=IKsin(j19);
IkReal x1486=IKcos(j19);
IkReal x1487=((0.4)*sj24);
IkReal x1488=(cj24*r00);
IkReal x1489=((0.4)*cj24*r10);
IkReal x1490=((0.4)*x1485);
IkReal x1491=((0.4)*x1486);
evalcond[0]=((((-1.0)*r12*x1491))+((r02*x1490)));
evalcond[1]=(((r01*x1487))+(((-0.4)*x1488))+x1490);
evalcond[2]=((((-1.0)*x1489))+(((-1.0)*x1491))+((r11*x1487)));
evalcond[3]=((((-1.0)*cj24*r11*x1491))+((r00*x1485*x1487))+(((-1.0)*r10*x1486*x1487))+((cj24*r01*x1490)));
evalcond[4]=((-0.4)+(((-1.0)*r01*x1485*x1487))+((r11*x1486*x1487))+(((-1.0)*x1486*x1489))+((x1488*x1490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1492=(sj23*sj24);
IkReal x1493=(cj24*sj23);
if( IKabs((((r01*x1492))+(((-1.0)*r00*x1493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1492))+((r10*x1493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1492))+(((-1.0)*r00*x1493))))+IKsqr(((((-1.0)*r11*x1492))+((r10*x1493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((r01*x1492))+(((-1.0)*r00*x1493))), ((((-1.0)*r11*x1492))+((r10*x1493))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[4];
IkReal x1494=IKsin(j19);
IkReal x1495=IKcos(j19);
IkReal x1496=((0.4)*sj23);
IkReal x1497=(r11*sj24);
IkReal x1498=((0.4)*cj24);
IkReal x1499=((0.4)*sj24);
IkReal x1500=(r01*x1494);
IkReal x1501=(r10*x1495);
IkReal x1502=((0.4)*x1495);
IkReal x1503=((0.4)*x1494);
evalcond[0]=(x1503+((cj24*r00*x1496))+(((-1.0)*r01*sj24*x1496)));
evalcond[1]=((((-1.0)*x1502))+((cj24*r10*x1496))+(((-1.0)*x1496*x1497)));
evalcond[2]=(((r00*x1494*x1499))+(((-1.0)*x1499*x1501))+((x1498*x1500))+(((-1.0)*r11*x1495*x1498)));
evalcond[3]=(((r00*x1494*x1498))+(((-1.0)*x1499*x1500))+(((-1.0)*x1498*x1501))+((x1497*x1502))+x1496);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1504=((2.0)*r12);
IkReal x1505=((2.0)*cj23);
IkReal x1506=(r11*sj23*sj24);
IkReal x1507=(cj24*r10*sj23);
CheckValue<IkReal> x1508=IKPowWithIntegerCheck(r02,-1);
if(!x1508.valid){
continue;
}
if( IKabs(((0.5)*(x1508.value)*(((((-1.0)*x1505))+((cj23*r12*x1504))+(((-1.0)*x1504*x1506))+((x1504*x1507)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj23*r12))+(((-1.0)*x1506))+x1507)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5)*(x1508.value)*(((((-1.0)*x1505))+((cj23*r12*x1504))+(((-1.0)*x1504*x1506))+((x1504*x1507))))))+IKsqr((((cj23*r12))+(((-1.0)*x1506))+x1507))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2(((0.5)*(x1508.value)*(((((-1.0)*x1505))+((cj23*r12*x1504))+(((-1.0)*x1504*x1506))+((x1504*x1507))))), (((cj23*r12))+(((-1.0)*x1506))+x1507));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1509=IKsin(j19);
IkReal x1510=IKcos(j19);
IkReal x1511=(cj24*r10);
IkReal x1512=((0.4)*sj23);
IkReal x1513=((0.4)*cj23);
IkReal x1514=(r01*sj24);
IkReal x1515=(cj24*r00);
IkReal x1516=((0.4)*r11*sj24);
IkReal x1517=((0.4)*x1509);
IkReal x1518=((0.4)*x1510);
evalcond[0]=(x1513+((r02*x1517))+(((-1.0)*r12*x1518)));
evalcond[1]=(x1517+((r02*x1513))+(((-1.0)*x1512*x1514))+((x1512*x1515)));
evalcond[2]=((((-1.0)*x1518))+((r12*x1513))+(((-1.0)*r11*sj24*x1512))+((x1511*x1512)));
evalcond[3]=((((-1.0)*cj24*r11*x1518))+((cj24*r01*x1517))+((r00*sj24*x1517))+(((-1.0)*r10*sj24*x1518)));
evalcond[4]=(((x1510*x1516))+x1512+(((-1.0)*x1514*x1517))+((x1515*x1517))+(((-1.0)*x1511*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1519=((2.0)*sj24);
IkReal x1520=((2.0)*sj23);
IkReal x1521=((2.0)*cj23*cj24);
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal((((cj23*r11*x1519))+((r12*x1520))+(((-1.0)*r10*x1521)))),IkReal(((((-1.0)*r00*x1521))+((cj23*r01*x1519))+((r02*x1520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
CheckValue<IkReal> x1523=IKPowWithIntegerCheck(IKsign((((r20*x1519))+(((2.0)*cj24*r21)))),-1);
if(!x1523.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(x1522.value)+(((1.5707963267949)*(x1523.value))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1524=IKsin(j19);
IkReal x1525=IKcos(j19);
IkReal x1526=(cj24*r10);
IkReal x1527=((0.4)*sj23);
IkReal x1528=((0.4)*cj23);
IkReal x1529=(r01*sj24);
IkReal x1530=(cj24*r00);
IkReal x1531=((0.4)*r11*sj24);
IkReal x1532=((0.4)*x1524);
IkReal x1533=((0.4)*x1525);
evalcond[0]=((((-1.0)*r12*x1533))+x1528+((r02*x1532)));
evalcond[1]=(((x1527*x1530))+x1532+(((-1.0)*x1527*x1529))+((r02*x1528)));
evalcond[2]=(((r12*x1528))+(((-1.0)*x1533))+((x1526*x1527))+(((-1.0)*r11*sj24*x1527)));
evalcond[3]=(((cj24*r01*x1532))+((r00*sj24*x1532))+(((-1.0)*r10*sj24*x1533))+(((-1.0)*cj24*r11*x1533)));
evalcond[4]=((((-1.0)*x1529*x1532))+((x1525*x1531))+((x1530*x1532))+x1527+(((-1.0)*x1526*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1534=((0.4)*cj24);
IkReal x1535=((0.4)*cj23*sj24);
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(IKsign(((((0.4)*r21*sj24))+(((-1.0)*r20*x1534)))),-1);
if(!x1536.valid){
continue;
}
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal(((((-1.0)*cj23*r11*x1534))+(((-1.0)*r10*x1535)))),IkReal(((((-1.0)*r00*x1535))+(((-1.0)*cj23*r01*x1534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1536.value)))+(x1537.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1538=IKsin(j19);
IkReal x1539=IKcos(j19);
IkReal x1540=(cj24*r10);
IkReal x1541=((0.4)*sj23);
IkReal x1542=((0.4)*cj23);
IkReal x1543=(r01*sj24);
IkReal x1544=(cj24*r00);
IkReal x1545=((0.4)*r11*sj24);
IkReal x1546=((0.4)*x1538);
IkReal x1547=((0.4)*x1539);
evalcond[0]=(x1542+((r02*x1546))+(((-1.0)*r12*x1547)));
evalcond[1]=(((x1541*x1544))+x1546+((r02*x1542))+(((-1.0)*x1541*x1543)));
evalcond[2]=((((-1.0)*r11*sj24*x1541))+((r12*x1542))+((x1540*x1541))+(((-1.0)*x1547)));
evalcond[3]=((((-1.0)*r10*sj24*x1547))+((r00*sj24*x1546))+((cj24*r01*x1546))+(((-1.0)*cj24*r11*x1547)));
evalcond[4]=((((-1.0)*x1543*x1546))+((x1539*x1545))+((x1544*x1546))+(((-1.0)*x1540*x1547))+x1541);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19, j23]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
IkReal x1548=((1.0)*pz);
IkReal x1549=((0.4)*cj24);
IkReal x1550=((0.4)*sj24);
IkReal x1551=((((-1.0)*r11*x1549))+(((-1.0)*r10*x1550)));
IkReal x1552=(((r00*x1550))+((r01*x1549)));
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal(x1551),IkReal(x1552),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
IkReal x1553=((1.0)*(x1555.value));
if((((x1551*x1551)+(x1552*x1552))) < -0.00001)
continue;
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1551*x1551)+(x1552*x1552)))),-1);
if(!x1556.valid){
continue;
}
if( (((-1.0)*(x1556.value)*(((((-1.0)*cj24*r21*x1548))+(((-1.0)*r20*sj24*x1548)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1556.value)*(((((-1.0)*cj24*r21*x1548))+(((-1.0)*r20*sj24*x1548)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1554=((-1.0)*(IKasin(((-1.0)*(x1556.value)*(((((-1.0)*cj24*r21*x1548))+(((-1.0)*r20*sj24*x1548))))))));
j19array[0]=((((-1.0)*x1554))+(((-1.0)*x1553)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((1.0)*x1554))+(((-1.0)*x1553)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j23eval[1];
IkReal x1557=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1557);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1557);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1557);
rxp2_2=0;
j23eval[0]=(((cj24*r20))+(((-1.0)*r21*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1558=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1558);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1558);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1558);
rxp2_2=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1559=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1559);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1559);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1559);
rxp2_2=0;
j23eval[0]=(((cj24*r10))+(((-1.0)*r11*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1562 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1562)==0){
continue;
}
IkReal x1560=pow(x1562,-0.5);
IkReal x1561=((-1.0)*x1560);
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
IkReal gconst48=((-1.0)*(x1563.value));
IkReal gconst49=(r10*x1561);
IkReal gconst50=(r11*x1561);
CheckValue<IkReal> x1564 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j24+(x1564.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1565=((0.4)*r22);
IkReal x1566=(r02*sj19);
IkReal x1567=(cj19*r12);
CheckValue<IkReal> x1568=IKPowWithIntegerCheck(((((0.4)*gconst50*r20))+(((-0.4)*gconst49*r21))),-1);
if(!x1568.valid){
continue;
}
if( IKabs(((x1568.value)*(((((-1.0)*x1565*x1567))+(((-1.0)*pz*(r22*r22)))+pz+((x1565*x1566)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*pz*r22))+x1567+(((-1.0)*x1566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1568.value)*(((((-1.0)*x1565*x1567))+(((-1.0)*pz*(r22*r22)))+pz+((x1565*x1566))))))+IKsqr(((((2.5)*pz*r22))+x1567+(((-1.0)*x1566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1568.value)*(((((-1.0)*x1565*x1567))+(((-1.0)*pz*(r22*r22)))+pz+((x1565*x1566))))), ((((2.5)*pz*r22))+x1567+(((-1.0)*x1566))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1569=IKcos(j23);
IkReal x1570=IKsin(j23);
IkReal x1571=((0.4)*sj19);
IkReal x1572=(gconst49*r01);
IkReal x1573=(gconst50*r10);
IkReal x1574=((0.8)*pz);
IkReal x1575=(gconst50*r20);
IkReal x1576=((1.0)*pz);
IkReal x1577=(gconst50*r00);
IkReal x1578=((0.4)*cj19);
IkReal x1579=(gconst49*r11);
IkReal x1580=((0.4)*x1569);
IkReal x1581=(gconst49*pz*r21);
IkReal x1582=((0.4)*x1570);
evalcond[0]=((((-1.0)*r22*x1576))+x1580+((r02*x1571))+(((-1.0)*r12*x1578)));
evalcond[1]=(((x1575*x1582))+((r22*x1580))+(((-1.0)*x1576))+(((-1.0)*gconst49*r21*x1582)));
evalcond[2]=(((x1570*x1574*x1575))+((r22*x1569*x1574))+(((-1.0)*gconst49*r21*x1570*x1574)));
evalcond[3]=((((-1.0)*x1572*x1582))+x1571+((r02*x1580))+((x1577*x1582)));
evalcond[4]=(((r12*x1580))+((x1573*x1582))+(((-1.0)*x1579*x1582))+(((-1.0)*x1578)));
evalcond[5]=(((x1571*x1577))+(((-1.0)*x1571*x1572))+(((-1.0)*x1575*x1576))+(((-1.0)*x1573*x1578))+x1582+x1581+((x1578*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1585 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1585)==0){
continue;
}
IkReal x1583=pow(x1585,-0.5);
IkReal x1584=((1.0)*x1583);
CheckValue<IkReal> x1586 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1586.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x1586.value))));
IkReal gconst52=(r10*x1584);
IkReal gconst53=(r11*x1584);
CheckValue<IkReal> x1587 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24+(x1587.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1588=((0.4)*r22);
IkReal x1589=(r02*sj19);
IkReal x1590=(cj19*r12);
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(((((-0.4)*gconst52*r21))+(((0.4)*gconst53*r20))),-1);
if(!x1591.valid){
continue;
}
if( IKabs(((x1591.value)*((((x1588*x1589))+(((-1.0)*pz*(r22*r22)))+(((-1.0)*x1588*x1590))+pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*pz*r22))+x1590+(((-1.0)*x1589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1591.value)*((((x1588*x1589))+(((-1.0)*pz*(r22*r22)))+(((-1.0)*x1588*x1590))+pz))))+IKsqr(((((2.5)*pz*r22))+x1590+(((-1.0)*x1589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1591.value)*((((x1588*x1589))+(((-1.0)*pz*(r22*r22)))+(((-1.0)*x1588*x1590))+pz))), ((((2.5)*pz*r22))+x1590+(((-1.0)*x1589))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1592=IKcos(j23);
IkReal x1593=IKsin(j23);
IkReal x1594=((0.4)*gconst52);
IkReal x1595=((0.4)*r10);
IkReal x1596=((0.8)*pz);
IkReal x1597=(gconst52*r21);
IkReal x1598=((0.4)*sj19);
IkReal x1599=((1.0)*pz);
IkReal x1600=((0.4)*cj19);
IkReal x1601=((0.4)*x1592);
IkReal x1602=(gconst53*x1593);
evalcond[0]=(x1601+(((-1.0)*r22*x1599))+((r02*x1598))+(((-1.0)*r12*x1600)));
evalcond[1]=((((-1.0)*x1599))+(((0.4)*r20*x1602))+((r22*x1601))+(((-1.0)*r21*x1593*x1594)));
evalcond[2]=((((-1.0)*x1593*x1596*x1597))+((r20*x1596*x1602))+((r22*x1592*x1596)));
evalcond[3]=((((-1.0)*r01*x1593*x1594))+x1598+(((0.4)*r00*x1602))+((r02*x1601)));
evalcond[4]=(((x1595*x1602))+(((-1.0)*x1600))+(((-1.0)*r11*x1593*x1594))+((r12*x1601)));
evalcond[5]=((((-1.0)*r01*sj19*x1594))+(((0.4)*x1593))+(((-1.0)*cj19*gconst53*x1595))+((cj19*r11*x1594))+((pz*x1597))+(((-1.0)*gconst53*r20*x1599))+((gconst53*r00*x1598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1605 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1605)==0){
continue;
}
IkReal x1603=pow(x1605,-0.5);
IkReal x1604=((-1.0)*x1603);
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
IkReal gconst54=((-1.0)*(x1606.value));
IkReal gconst55=(r00*x1604);
IkReal gconst56=(r01*x1604);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j24+(x1607.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1608=((0.4)*r22);
IkReal x1609=(r02*sj19);
IkReal x1610=(cj19*r12);
CheckValue<IkReal> x1611=IKPowWithIntegerCheck(((((0.4)*gconst56*r20))+(((-0.4)*gconst55*r21))),-1);
if(!x1611.valid){
continue;
}
if( IKabs(((x1611.value)*(((((-1.0)*pz*(r22*r22)))+((x1608*x1609))+pz+(((-1.0)*x1608*x1610)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1609))+x1610+(((2.5)*pz*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1611.value)*(((((-1.0)*pz*(r22*r22)))+((x1608*x1609))+pz+(((-1.0)*x1608*x1610))))))+IKsqr(((((-1.0)*x1609))+x1610+(((2.5)*pz*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1611.value)*(((((-1.0)*pz*(r22*r22)))+((x1608*x1609))+pz+(((-1.0)*x1608*x1610))))), ((((-1.0)*x1609))+x1610+(((2.5)*pz*r22))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1612=IKcos(j23);
IkReal x1613=IKsin(j23);
IkReal x1614=((0.8)*pz);
IkReal x1615=((0.4)*gconst56);
IkReal x1616=((0.4)*cj19);
IkReal x1617=((0.4)*sj19);
IkReal x1618=(gconst55*r01);
IkReal x1619=((1.0)*pz);
IkReal x1620=((0.4)*x1612);
IkReal x1621=((0.4)*gconst55*r11);
IkReal x1622=((0.4)*x1613);
IkReal x1623=(r20*x1613);
IkReal x1624=(gconst55*r21*x1613);
evalcond[0]=((((-1.0)*r12*x1616))+x1620+(((-1.0)*r22*x1619))+((r02*x1617)));
evalcond[1]=((((-1.0)*x1619))+(((-1.0)*gconst55*r21*x1622))+((x1615*x1623))+((r22*x1620)));
evalcond[2]=(((gconst56*x1614*x1623))+(((-1.0)*x1614*x1624))+((r22*x1612*x1614)));
evalcond[3]=(((r02*x1620))+((r00*x1613*x1615))+x1617+(((-1.0)*x1618*x1622)));
evalcond[4]=((((-1.0)*x1616))+((r12*x1620))+((r10*x1613*x1615))+(((-1.0)*x1613*x1621)));
evalcond[5]=(((gconst55*r11*x1616))+((gconst55*pz*r21))+x1622+(((-1.0)*x1617*x1618))+(((-1.0)*gconst56*r20*x1619))+(((-1.0)*cj19*r10*x1615))+((r00*sj19*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1627 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1627)==0){
continue;
}
IkReal x1625=pow(x1627,-0.5);
IkReal x1626=((1.0)*x1625);
CheckValue<IkReal> x1628 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1628.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x1628.value))));
IkReal gconst58=(r00*x1626);
IkReal gconst59=(r01*x1626);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j24+(x1629.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1630=((0.4)*r22);
IkReal x1631=(r02*sj19);
IkReal x1632=(cj19*r12);
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(((((0.4)*gconst59*r20))+(((-0.4)*gconst58*r21))),-1);
if(!x1633.valid){
continue;
}
if( IKabs(((x1633.value)*(((((-1.0)*pz*(r22*r22)))+pz+(((-1.0)*x1630*x1632))+((x1630*x1631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1632+(((2.5)*pz*r22))+(((-1.0)*x1631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1633.value)*(((((-1.0)*pz*(r22*r22)))+pz+(((-1.0)*x1630*x1632))+((x1630*x1631))))))+IKsqr((x1632+(((2.5)*pz*r22))+(((-1.0)*x1631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1633.value)*(((((-1.0)*pz*(r22*r22)))+pz+(((-1.0)*x1630*x1632))+((x1630*x1631))))), (x1632+(((2.5)*pz*r22))+(((-1.0)*x1631))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1634=IKcos(j23);
IkReal x1635=IKsin(j23);
IkReal x1636=((0.8)*pz);
IkReal x1637=((0.4)*gconst58);
IkReal x1638=((0.4)*sj19);
IkReal x1639=((0.4)*r10);
IkReal x1640=((1.0)*pz);
IkReal x1641=((0.4)*cj19);
IkReal x1642=(gconst59*x1635);
IkReal x1643=(r21*x1635);
IkReal x1644=((0.4)*x1634);
evalcond[0]=(((r02*x1638))+(((-1.0)*r22*x1640))+(((-1.0)*r12*x1641))+x1644);
evalcond[1]=((((-1.0)*x1640))+(((-1.0)*x1637*x1643))+(((0.4)*r20*x1642))+((r22*x1644)));
evalcond[2]=((((-1.0)*gconst58*x1636*x1643))+((r20*x1636*x1642))+((r22*x1634*x1636)));
evalcond[3]=(((r02*x1644))+x1638+(((0.4)*r00*x1642))+(((-1.0)*r01*x1635*x1637)));
evalcond[4]=(((r12*x1644))+(((-1.0)*x1641))+(((-1.0)*r11*x1635*x1637))+((x1639*x1642)));
evalcond[5]=((((-1.0)*gconst59*r20*x1640))+((cj19*r11*x1637))+(((-1.0)*cj19*gconst59*x1639))+((gconst58*pz*r21))+((gconst59*r00*x1638))+(((-1.0)*r01*sj19*x1637))+(((0.4)*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1645=((-1.0)*r21);
IkReal x1647 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1647)==0){
continue;
}
IkReal x1646=pow(x1647,-0.5);
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal(r20),IkReal(x1645),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
IkReal gconst60=((-1.0)*(x1648.value));
IkReal gconst61=((-1.0)*r20*x1646);
IkReal gconst62=(x1645*x1646);
CheckValue<IkReal> x1649 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1649.value)+j24)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1650=(cj19*r12);
IkReal x1651=(pz*r22);
IkReal x1652=((2.0)*sj19);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(((((2.0)*gconst62*r00))+(((-2.0)*gconst61*r01))),-1);
if(!x1653.valid){
continue;
}
if( IKabs(((x1653.value)*((((x1652*(r02*r02)))+(((-1.0)*x1652))+(((-5.0)*r02*x1651))+(((-2.0)*r02*x1650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1650+(((2.5)*x1651))+(((-1.0)*r02*sj19)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1653.value)*((((x1652*(r02*r02)))+(((-1.0)*x1652))+(((-5.0)*r02*x1651))+(((-2.0)*r02*x1650))))))+IKsqr((x1650+(((2.5)*x1651))+(((-1.0)*r02*sj19))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1653.value)*((((x1652*(r02*r02)))+(((-1.0)*x1652))+(((-5.0)*r02*x1651))+(((-2.0)*r02*x1650))))), (x1650+(((2.5)*x1651))+(((-1.0)*r02*sj19))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1654=IKcos(j23);
IkReal x1655=IKsin(j23);
IkReal x1656=(pz*r22);
IkReal x1657=((0.4)*sj19);
IkReal x1658=(gconst61*r01);
IkReal x1659=((0.4)*cj19);
IkReal x1660=(gconst62*r20);
IkReal x1661=((1.0)*pz);
IkReal x1662=(gconst62*r10);
IkReal x1663=(gconst61*r11);
IkReal x1664=(gconst62*r00);
IkReal x1665=(gconst61*pz*r21);
IkReal x1666=((0.4)*x1654);
IkReal x1667=((0.8)*x1655);
IkReal x1668=((0.4)*x1655);
evalcond[0]=(((r02*x1657))+x1666+(((-1.0)*r12*x1659))+(((-1.0)*x1656)));
evalcond[1]=(((x1660*x1668))+(((-1.0)*gconst61*r21*x1668))+(((-1.0)*x1661))+((r22*x1666)));
evalcond[2]=((((0.8)*x1654*x1656))+((pz*x1660*x1667))+(((-1.0)*x1665*x1667)));
evalcond[3]=(x1657+((r02*x1666))+(((-1.0)*x1658*x1668))+((x1664*x1668)));
evalcond[4]=(((r12*x1666))+((x1662*x1668))+(((-1.0)*x1663*x1668))+(((-1.0)*x1659)));
evalcond[5]=(x1668+x1665+(((-1.0)*x1657*x1658))+((x1657*x1664))+(((-1.0)*x1660*x1661))+((x1659*x1663))+(((-1.0)*x1659*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1671 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1671)==0){
continue;
}
IkReal x1669=pow(x1671,-0.5);
IkReal x1670=((1.0)*x1669);
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x1672.value))));
IkReal gconst64=(r20*x1670);
IkReal gconst65=(r21*x1670);
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1673.value)+j24)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1674=(cj19*r12);
IkReal x1675=(pz*r22);
IkReal x1676=((2.0)*sj19);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(((((-2.0)*gconst64*r01))+(((2.0)*gconst65*r00))),-1);
if(!x1677.valid){
continue;
}
if( IKabs(((x1677.value)*(((((-5.0)*r02*x1675))+(((-2.0)*r02*x1674))+((x1676*(r02*r02)))+(((-1.0)*x1676)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1674+(((2.5)*x1675))+(((-1.0)*r02*sj19)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1677.value)*(((((-5.0)*r02*x1675))+(((-2.0)*r02*x1674))+((x1676*(r02*r02)))+(((-1.0)*x1676))))))+IKsqr((x1674+(((2.5)*x1675))+(((-1.0)*r02*sj19))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1677.value)*(((((-5.0)*r02*x1675))+(((-2.0)*r02*x1674))+((x1676*(r02*r02)))+(((-1.0)*x1676))))), (x1674+(((2.5)*x1675))+(((-1.0)*r02*sj19))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1678=IKcos(j23);
IkReal x1679=IKsin(j23);
IkReal x1680=((0.4)*cj19);
IkReal x1681=(gconst65*r10);
IkReal x1682=((0.8)*pz);
IkReal x1683=(gconst64*r21);
IkReal x1684=((0.4)*sj19);
IkReal x1685=((1.0)*pz);
IkReal x1686=(gconst64*r11);
IkReal x1687=(gconst64*r01);
IkReal x1688=(gconst65*r20);
IkReal x1689=(gconst65*r00);
IkReal x1690=((0.4)*x1678);
IkReal x1691=((0.4)*x1679);
evalcond[0]=((((-1.0)*r12*x1680))+x1690+((r02*x1684))+(((-1.0)*r22*x1685)));
evalcond[1]=((((-1.0)*x1685))+((r22*x1690))+(((-1.0)*x1683*x1691))+((x1688*x1691)));
evalcond[2]=(((x1679*x1682*x1688))+((r22*x1678*x1682))+(((-1.0)*x1679*x1682*x1683)));
evalcond[3]=((((-1.0)*x1687*x1691))+x1684+((x1689*x1691))+((r02*x1690)));
evalcond[4]=((((-1.0)*x1686*x1691))+((r12*x1690))+(((-1.0)*x1680))+((x1681*x1691)));
evalcond[5]=(((x1680*x1686))+(((-1.0)*x1685*x1688))+x1691+(((-1.0)*x1680*x1681))+((pz*x1683))+((x1684*x1689))+(((-1.0)*x1684*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j23eval[1];
IkReal x1692=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1692);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1692);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[1];
IkReal x1693=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1693);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1693);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j23eval[0]=(((cj24*r10))+(((-1.0)*r11*sj24)));
if( IKabs(j23eval[0]) < 0.0000010000000000  )
{
{
IkReal j23eval[2];
IkReal x1694=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1694);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1694);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
r20=0;
r21=0;
r02=0;
r12=0;
j23eval[0]=(((cj24*r00))+(((-1.0)*r01*sj24)));
j23eval[1]=r22;
if( IKabs(j23eval[0]) < 0.0000010000000000  || IKabs(j23eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j23]

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1695=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1695.valid){
continue;
}
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(r22,-1);
if(!x1696.valid){
continue;
}
if( IKabs(((-2.0)*sj19*(x1695.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*pz*(x1696.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj19*(x1695.value)))+IKsqr(((2.5)*pz*(x1696.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((-2.0)*sj19*(x1695.value)), ((2.5)*pz*(x1696.value)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1697=IKcos(j23);
IkReal x1698=IKsin(j23);
IkReal x1699=((0.4)*cj24);
IkReal x1700=((1.0)*pz);
IkReal x1701=((0.4)*sj24);
IkReal x1702=(r22*x1697);
IkReal x1703=(x1698*x1701);
evalcond[0]=((0.8)*pz*x1702);
evalcond[1]=((((-1.0)*r22*x1700))+(((0.4)*x1697)));
evalcond[2]=((((0.4)*x1702))+(((-1.0)*x1700)));
evalcond[3]=((((0.4)*sj19))+((r00*x1698*x1699))+(((-1.0)*r01*x1703)));
evalcond[4]=(((r10*x1698*x1699))+(((-0.4)*cj19))+(((-1.0)*r11*x1703)));
evalcond[5]=(((cj19*r11*x1701))+((r00*sj19*x1699))+(((-1.0)*cj19*r10*x1699))+(((-1.0)*r01*sj19*x1701))+(((0.4)*x1698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1704=IKPowWithIntegerCheck(((((-2.0)*r11*sj24))+(((2.0)*cj24*r10))),-1);
if(!x1704.valid){
continue;
}
if( IKabs(((2.0)*cj19*(x1704.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*pz*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.0)*cj19*(x1704.value)))+IKsqr(((2.5)*pz*r22))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((2.0)*cj19*(x1704.value)), ((2.5)*pz*r22));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1705=IKcos(j23);
IkReal x1706=IKsin(j23);
IkReal x1707=((0.4)*cj24);
IkReal x1708=((1.0)*pz);
IkReal x1709=((0.4)*sj24);
IkReal x1710=(r22*x1705);
IkReal x1711=(x1706*x1709);
evalcond[0]=((0.8)*pz*x1710);
evalcond[1]=((((0.4)*x1705))+(((-1.0)*r22*x1708)));
evalcond[2]=((((-1.0)*x1708))+(((0.4)*x1710)));
evalcond[3]=((((0.4)*sj19))+((r00*x1706*x1707))+(((-1.0)*r01*x1711)));
evalcond[4]=(((r10*x1706*x1707))+(((-1.0)*r11*x1711))+(((-0.4)*cj19)));
evalcond[5]=((((0.4)*x1706))+((r00*sj19*x1707))+((cj19*r11*x1709))+(((-1.0)*cj19*r10*x1707))+(((-1.0)*r01*sj19*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
CheckValue<IkReal> x1712=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1712.valid){
continue;
}
if( IKabs(((-2.0)*sj19*(x1712.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*pz*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.0)*sj19*(x1712.value)))+IKsqr(((2.5)*pz*r22))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((-2.0)*sj19*(x1712.value)), ((2.5)*pz*r22));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1713=IKcos(j23);
IkReal x1714=IKsin(j23);
IkReal x1715=((0.4)*cj24);
IkReal x1716=((1.0)*pz);
IkReal x1717=((0.4)*sj24);
IkReal x1718=(r22*x1713);
IkReal x1719=(x1714*x1717);
evalcond[0]=((0.8)*pz*x1718);
evalcond[1]=((((-1.0)*r22*x1716))+(((0.4)*x1713)));
evalcond[2]=((((-1.0)*x1716))+(((0.4)*x1718)));
evalcond[3]=((((0.4)*sj19))+((r00*x1714*x1715))+(((-1.0)*r01*x1719)));
evalcond[4]=(((r10*x1714*x1715))+(((-1.0)*r11*x1719))+(((-0.4)*cj19)));
evalcond[5]=(((cj19*r11*x1717))+(((-1.0)*cj19*r10*x1715))+((r00*sj19*x1715))+(((-1.0)*r01*sj19*x1717))+(((0.4)*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j23]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1720=(pz*r22);
IkReal x1721=((2.0)*cj19);
IkReal x1722=(r02*sj19);
CheckValue<IkReal> x1723=IKPowWithIntegerCheck(((((-2.0)*r11*sj24))+(((2.0)*cj24*r10))),-1);
if(!x1723.valid){
continue;
}
if( IKabs(((x1723.value)*(((((2.0)*r12*x1722))+x1721+(((-5.0)*r12*x1720))+(((-1.0)*x1721*(r12*r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.5)*x1720))+(((-1.0)*x1722))+((cj19*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1723.value)*(((((2.0)*r12*x1722))+x1721+(((-5.0)*r12*x1720))+(((-1.0)*x1721*(r12*r12)))))))+IKsqr(((((2.5)*x1720))+(((-1.0)*x1722))+((cj19*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1723.value)*(((((2.0)*r12*x1722))+x1721+(((-5.0)*r12*x1720))+(((-1.0)*x1721*(r12*r12)))))), ((((2.5)*x1720))+(((-1.0)*x1722))+((cj19*r12))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1724=IKcos(j23);
IkReal x1725=IKsin(j23);
IkReal x1726=(pz*r22);
IkReal x1727=((0.4)*cj19);
IkReal x1728=((0.4)*sj19);
IkReal x1729=((1.0)*pz);
IkReal x1730=(cj24*r00);
IkReal x1731=(cj24*r20);
IkReal x1732=(cj24*r10);
IkReal x1733=((0.4)*x1724);
IkReal x1734=((0.4)*x1725);
IkReal x1735=(pz*r21*sj24);
IkReal x1736=((0.8)*x1725);
IkReal x1737=(sj24*x1734);
evalcond[0]=(x1733+(((-1.0)*r12*x1727))+((r02*x1728))+(((-1.0)*x1726)));
evalcond[1]=(((x1731*x1734))+((r22*x1733))+(((-1.0)*x1729))+(((-1.0)*r21*x1737)));
evalcond[2]=((((0.8)*x1724*x1726))+(((-1.0)*x1735*x1736))+((pz*x1731*x1736)));
evalcond[3]=(((x1730*x1734))+x1728+(((-1.0)*r01*x1737))+((r02*x1733)));
evalcond[4]=((((-1.0)*r11*x1737))+((x1732*x1734))+((r12*x1733))+(((-1.0)*x1727)));
evalcond[5]=(((x1728*x1730))+x1735+x1734+(((-1.0)*x1729*x1731))+((r11*sj24*x1727))+(((-1.0)*x1727*x1732))+(((-1.0)*r01*sj24*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1738=(cj19*r12);
IkReal x1739=(pz*r22);
IkReal x1740=((2.0)*sj19);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(((((-2.0)*r01*sj24))+(((2.0)*cj24*r00))),-1);
if(!x1741.valid){
continue;
}
if( IKabs(((x1741.value)*((((x1740*(r02*r02)))+(((-5.0)*r02*x1739))+(((-2.0)*r02*x1738))+(((-1.0)*x1740)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1738+(((2.5)*x1739))+(((-1.0)*r02*sj19)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1741.value)*((((x1740*(r02*r02)))+(((-5.0)*r02*x1739))+(((-2.0)*r02*x1738))+(((-1.0)*x1740))))))+IKsqr((x1738+(((2.5)*x1739))+(((-1.0)*r02*sj19))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1741.value)*((((x1740*(r02*r02)))+(((-5.0)*r02*x1739))+(((-2.0)*r02*x1738))+(((-1.0)*x1740))))), (x1738+(((2.5)*x1739))+(((-1.0)*r02*sj19))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1742=IKcos(j23);
IkReal x1743=IKsin(j23);
IkReal x1744=(pz*r22);
IkReal x1745=((0.4)*cj19);
IkReal x1746=((0.4)*sj19);
IkReal x1747=((1.0)*pz);
IkReal x1748=(cj24*r00);
IkReal x1749=(cj24*r20);
IkReal x1750=(cj24*r10);
IkReal x1751=((0.4)*x1742);
IkReal x1752=((0.4)*x1743);
IkReal x1753=(pz*r21*sj24);
IkReal x1754=((0.8)*x1743);
IkReal x1755=(sj24*x1752);
evalcond[0]=((((-1.0)*r12*x1745))+x1751+((r02*x1746))+(((-1.0)*x1744)));
evalcond[1]=(((x1749*x1752))+((r22*x1751))+(((-1.0)*x1747))+(((-1.0)*r21*x1755)));
evalcond[2]=((((0.8)*x1742*x1744))+((pz*x1749*x1754))+(((-1.0)*x1753*x1754)));
evalcond[3]=(x1746+((r02*x1751))+((x1748*x1752))+(((-1.0)*r01*x1755)));
evalcond[4]=((((-1.0)*r11*x1755))+((x1750*x1752))+(((-1.0)*x1745))+((r12*x1751)));
evalcond[5]=(x1753+x1752+((x1746*x1748))+((r11*sj24*x1745))+(((-1.0)*x1747*x1749))+(((-1.0)*x1745*x1750))+(((-1.0)*r01*sj24*x1746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j23array[1], cj23array[1], sj23array[1];
bool j23valid[1]={false};
_nj23 = 1;
IkReal x1756=((0.4)*r22);
IkReal x1757=(r02*sj19);
IkReal x1758=(cj19*r12);
CheckValue<IkReal> x1759=IKPowWithIntegerCheck(((((0.4)*cj24*r20))+(((-0.4)*r21*sj24))),-1);
if(!x1759.valid){
continue;
}
if( IKabs(((x1759.value)*(((((-1.0)*x1756*x1758))+(((-1.0)*pz*(r22*r22)))+pz+((x1756*x1757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1758+(((2.5)*pz*r22))+(((-1.0)*x1757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1759.value)*(((((-1.0)*x1756*x1758))+(((-1.0)*pz*(r22*r22)))+pz+((x1756*x1757))))))+IKsqr((x1758+(((2.5)*pz*r22))+(((-1.0)*x1757))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j23array[0]=IKatan2(((x1759.value)*(((((-1.0)*x1756*x1758))+(((-1.0)*pz*(r22*r22)))+pz+((x1756*x1757))))), (x1758+(((2.5)*pz*r22))+(((-1.0)*x1757))));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
for(int ij23 = 0; ij23 < 1; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 1; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[6];
IkReal x1760=IKcos(j23);
IkReal x1761=IKsin(j23);
IkReal x1762=(pz*r22);
IkReal x1763=((0.4)*cj19);
IkReal x1764=((0.4)*sj19);
IkReal x1765=((1.0)*pz);
IkReal x1766=(cj24*r00);
IkReal x1767=(cj24*r20);
IkReal x1768=(cj24*r10);
IkReal x1769=((0.4)*x1760);
IkReal x1770=((0.4)*x1761);
IkReal x1771=(pz*r21*sj24);
IkReal x1772=((0.8)*x1761);
IkReal x1773=(sj24*x1770);
evalcond[0]=((((-1.0)*x1762))+x1769+(((-1.0)*r12*x1763))+((r02*x1764)));
evalcond[1]=(((x1767*x1770))+(((-1.0)*x1765))+(((-1.0)*r21*x1773))+((r22*x1769)));
evalcond[2]=((((-1.0)*x1771*x1772))+(((0.8)*x1760*x1762))+((pz*x1767*x1772)));
evalcond[3]=(x1764+((x1766*x1770))+((r02*x1769))+(((-1.0)*r01*x1773)));
evalcond[4]=((((-1.0)*x1763))+((r12*x1769))+((x1768*x1770))+(((-1.0)*r11*x1773)));
evalcond[5]=(((r11*sj24*x1763))+x1771+x1770+((x1764*x1766))+(((-1.0)*x1763*x1768))+(((-1.0)*x1765*x1767))+(((-1.0)*r01*sj24*x1764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
IkReal x1774=((((0.4)*cj24*r20))+(((-0.4)*r21*sj24)));
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal(((0.4)*r22)),IkReal(x1774),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
IkReal x1775=((1.0)*(x1777.value));
if((((x1774*x1774)+(((0.16)*(r22*r22))))) < -0.00001)
continue;
CheckValue<IkReal> x1778=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1774*x1774)+(((0.16)*(r22*r22)))))),-1);
if(!x1778.valid){
continue;
}
if( ((pz*(x1778.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1778.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1776=IKasin((pz*(x1778.value)));
j23array[0]=(x1776+(((-1.0)*x1775)));
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+(((-1.0)*x1776))+(((-1.0)*x1775)));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
IkReal x1779=IKsin(j23);
IkReal x1780=((0.8)*pz*x1779);
evalcond[0]=((((-1.0)*r21*sj24*x1780))+(((0.8)*pz*r22*(IKcos(j23))))+((cj24*r20*x1780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1781=((1.0)*sj23);
if( IKabs((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1781)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1781)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1781))))+IKsqr((((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1781))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1781))), (((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1781))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1782=IKsin(j19);
IkReal x1783=IKcos(j19);
IkReal x1784=((0.4)*sj23);
IkReal x1785=(cj24*r00);
IkReal x1786=(r01*sj24);
IkReal x1787=(cj24*r10);
IkReal x1788=((1.0)*pz);
IkReal x1789=((0.4)*cj23);
IkReal x1790=(r11*sj24);
IkReal x1791=((0.4)*x1782);
IkReal x1792=((0.4)*x1783);
evalcond[0]=(x1789+(((-1.0)*r22*x1788))+(((-1.0)*r12*x1792))+((r02*x1791)));
evalcond[1]=(x1791+((x1784*x1785))+((r02*x1789))+(((-1.0)*x1784*x1786)));
evalcond[2]=((((-1.0)*x1792))+((x1784*x1787))+(((-1.0)*x1784*x1790))+((r12*x1789)));
evalcond[3]=(((cj24*r01*x1791))+(((-1.0)*cj24*r21*x1788))+(((-1.0)*r10*sj24*x1792))+(((-1.0)*r20*sj24*x1788))+((r00*sj24*x1791))+(((-1.0)*cj24*r11*x1792)));
evalcond[4]=((((-1.0)*x1787*x1792))+x1784+(((-1.0)*cj24*r20*x1788))+((pz*r21*sj24))+(((-1.0)*x1786*x1791))+((x1785*x1791))+((x1790*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
IkReal x1793=((0.8)*pz);
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal((r22*x1793)),IkReal(((((-1.0)*r21*sj24*x1793))+((cj24*r20*x1793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
IkReal x1794=x1795.value;
j23array[0]=((-1.0)*x1794);
sj23array[0]=IKsin(j23array[0]);
cj23array[0]=IKcos(j23array[0]);
j23array[1]=((3.14159265358979)+(((-1.0)*x1794)));
sj23array[1]=IKsin(j23array[1]);
cj23array[1]=IKcos(j23array[1]);
if( j23array[0] > IKPI )
{
    j23array[0]-=IK2PI;
}
else if( j23array[0] < -IKPI )
{    j23array[0]+=IK2PI;
}
j23valid[0] = true;
if( j23array[1] > IKPI )
{
    j23array[1]-=IK2PI;
}
else if( j23array[1] < -IKPI )
{    j23array[1]+=IK2PI;
}
j23valid[1] = true;
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];
{
IkReal evalcond[1];
IkReal x1796=IKsin(j23);
IkReal x1797=((0.4)*x1796);
evalcond[0]=((((-1.0)*r21*sj24*x1797))+((cj24*r20*x1797))+(((-1.0)*pz))+(((0.4)*r22*(IKcos(j23)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x1798=((1.0)*sj23);
if( IKabs((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1798))))+IKsqr((((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1798))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((((r01*sj23*sj24))+(((-1.0)*cj23*r02))+(((-1.0)*cj24*r00*x1798))), (((cj23*r12))+((cj24*r10*sj23))+(((-1.0)*r11*sj24*x1798))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[5];
IkReal x1799=IKsin(j19);
IkReal x1800=IKcos(j19);
IkReal x1801=((0.4)*sj23);
IkReal x1802=(cj24*r00);
IkReal x1803=(r01*sj24);
IkReal x1804=(cj24*r10);
IkReal x1805=((1.0)*pz);
IkReal x1806=((0.4)*cj23);
IkReal x1807=(r11*sj24);
IkReal x1808=((0.4)*x1799);
IkReal x1809=((0.4)*x1800);
evalcond[0]=(((r02*x1808))+x1806+(((-1.0)*r12*x1809))+(((-1.0)*r22*x1805)));
evalcond[1]=(((x1801*x1802))+(((-1.0)*x1801*x1803))+((r02*x1806))+x1808);
evalcond[2]=(((x1801*x1804))+(((-1.0)*x1801*x1807))+(((-1.0)*x1809))+((r12*x1806)));
evalcond[3]=(((cj24*r01*x1808))+(((-1.0)*cj24*r21*x1805))+(((-1.0)*r10*sj24*x1809))+(((-1.0)*cj24*r11*x1809))+((r00*sj24*x1808))+(((-1.0)*r20*sj24*x1805)));
evalcond[4]=(((x1802*x1808))+(((-1.0)*cj24*r20*x1805))+(((-1.0)*x1804*x1809))+x1801+((pz*r21*sj24))+((x1807*x1809))+(((-1.0)*x1803*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19, j23, j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x1812 = IKatan2WithCheck(IkReal(((0.8)*py)),IkReal(((-0.8)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1812.valid){
continue;
}
IkReal x1810=((1.0)*(x1812.value));
if((((((0.64)*(px*px)))+(((0.64)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.64)*(px*px)))+(((0.64)*(py*py)))))),-1);
if(!x1813.valid){
continue;
}
if( ((pp*(x1813.value))) < -1-IKFAST_SINCOS_THRESH || ((pp*(x1813.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1811=IKasin((pp*(x1813.value)));
j19array[0]=((((-1.0)*x1810))+(((-1.0)*x1811)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x1810))+x1811);
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
cj23array[0]=((((2.5)*npz))+((cj19*r12))+(((-1.0)*r02*sj19)));
if( cj23array[0] >= -1-IKFAST_SINCOS_THRESH && cj23array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j23valid[0] = j23valid[1] = true;
    j23array[0] = IKacos(cj23array[0]);
    sj23array[0] = IKsin(j23array[0]);
    cj23array[1] = cj23array[0];
    j23array[1] = -j23array[0];
    sj23array[1] = -sj23array[0];
}
else if( isnan(cj23array[0]) )
{
    // probably any value will work
    j23valid[0] = true;
    cj23array[0] = 1; sj23array[0] = 0; j23array[0] = 0;
}
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal j24eval[3];
IkReal x1814=(r02*sj23);
IkReal x1815=((2.0)*cj19);
IkReal x1816=((2.0)*cj23);
j24eval[0]=x1814;
j24eval[1]=IKsign(x1814);
j24eval[2]=((IKabs(((((-5.0)*rxp1_0))+((r00*x1816))+((r21*x1815)))))+(IKabs((((r20*x1815))+(((-1.0)*r01*x1816))+(((-5.0)*rxp0_0))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
IkReal x1817=(r12*sj23);
IkReal x1818=((2.0)*cj23);
IkReal x1819=((2.0)*sj19);
j24eval[0]=x1817;
j24eval[1]=IKsign(x1817);
j24eval[2]=((IKabs(((((5.0)*rxp1_1))+(((-1.0)*r10*x1818))+(((-1.0)*r21*x1819)))))+(IKabs(((((5.0)*rxp0_1))+((r11*x1818))+(((-1.0)*r20*x1819))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
IkReal x1820=((5.0)*pp);
IkReal x1821=((4.0)*npx);
IkReal x1822=(r21*sj23);
IkReal x1823=((10.0)*pz);
IkReal x1824=(cj23*r22);
IkReal x1825=((4.0)*cj23*npz);
IkReal x1826=(npy*r20*sj23);
j24eval[0]=((((-1.0)*npx*x1822))+x1826);
j24eval[1]=((IKabs(((((-4.0)*npy*x1824))+((npy*x1823))+((r21*x1825))+(((-1.0)*r21*x1820)))))+(IKabs(((((-1.0)*x1821*x1824))+((npx*x1823))+(((-1.0)*r20*x1820))+((r20*x1825))))));
j24eval[2]=IKsign(((((-1.0)*x1821*x1822))+(((4.0)*x1826))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
sj23=0;
cj23=1.0;
j23=0;
IkReal x1827=((0.4)*sj19);
IkReal x1828=((0.4)*cj19);
j24eval[0]=((IKabs((((r00*x1827))+(((-1.0)*npx))+(((-1.0)*r10*x1828)))))+(IKabs((npy+(((-1.0)*r01*x1827))+((r11*x1828))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
sj23=0;
cj23=1.0;
j23=0;
IkReal x1829=((0.4)*sj19);
IkReal x1830=((0.4)*cj19);
j24eval[0]=((IKabs((((r00*x1829))+(((-1.0)*r10*x1830))+(((-1.0)*npx)))))+(IKabs(((((-1.0)*npy))+((r01*x1829))+(((-1.0)*r11*x1830))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j24]

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1831=((0.4)*sj19);
IkReal x1832=((0.4)*cj19);
CheckValue<IkReal> x1834 = IKatan2WithCheck(IkReal((((r01*x1831))+(((-1.0)*npy))+(((-1.0)*r11*x1832)))),IkReal(((((-1.0)*r10*x1832))+(((-1.0)*npx))+((r00*x1831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1834.valid){
continue;
}
IkReal x1833=x1834.value;
j24array[0]=((-1.0)*x1833);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1833)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1835=IKsin(j24);
IkReal x1836=IKcos(j24);
IkReal x1837=((0.4)*sj19);
IkReal x1838=((0.4)*cj19);
evalcond[0]=(((r00*x1836*x1837))+((npy*x1835))+(((-1.0)*r10*x1836*x1838))+(((-1.0)*npx*x1836))+((r11*x1835*x1838))+(((-1.0)*r01*x1835*x1837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1839=((0.4)*sj19);
IkReal x1840=((0.4)*cj19);
CheckValue<IkReal> x1842 = IKatan2WithCheck(IkReal(((((-1.0)*npx))+(((-1.0)*r10*x1840))+((r00*x1839)))),IkReal(((((-1.0)*r01*x1839))+npy+((r11*x1840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1842.valid){
continue;
}
IkReal x1841=x1842.value;
j24array[0]=((-1.0)*x1841);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1841)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1843=IKcos(j24);
IkReal x1844=IKsin(j24);
IkReal x1845=((0.4)*x1843);
IkReal x1846=((0.4)*x1844);
evalcond[0]=((((-1.0)*cj19*r10*x1846))+(((-1.0)*npx*x1844))+(((-1.0)*cj19*r11*x1845))+(((-1.0)*npy*x1843))+((r00*sj19*x1846))+((r01*sj19*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
sj23=0;
cj23=-1.0;
j23=3.14159265358979;
IkReal x1847=((0.4)*sj19);
IkReal x1848=((0.4)*cj19);
j24eval[0]=((IKabs(((((-1.0)*r01*x1847))+npy+((r11*x1848)))))+(IKabs(((((-1.0)*npx))+(((-1.0)*r10*x1848))+((r00*x1847))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
sj23=0;
cj23=-1.0;
j23=3.14159265358979;
IkReal x1849=((0.4)*sj19);
IkReal x1850=((0.4)*cj19);
j24eval[0]=((IKabs(((((-1.0)*npy))+((r01*x1849))+(((-1.0)*r11*x1850)))))+(IKabs(((((-1.0)*npx))+((r00*x1849))+(((-1.0)*r10*x1850))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j24]

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1851=((0.4)*sj19);
IkReal x1852=((0.4)*cj19);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal((((r01*x1851))+(((-1.0)*npy))+(((-1.0)*r11*x1852)))),IkReal(((((-1.0)*npx))+((r00*x1851))+(((-1.0)*r10*x1852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
IkReal x1853=x1854.value;
j24array[0]=((-1.0)*x1853);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1853)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1855=IKsin(j24);
IkReal x1856=IKcos(j24);
IkReal x1857=((0.4)*sj19);
IkReal x1858=((0.4)*cj19);
evalcond[0]=(((r00*x1856*x1857))+(((-1.0)*r01*x1855*x1857))+((npy*x1855))+(((-1.0)*npx*x1856))+((r11*x1855*x1858))+(((-1.0)*r10*x1856*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1859=((0.4)*sj19);
IkReal x1860=((0.4)*cj19);
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal(((((-1.0)*npx))+((r00*x1859))+(((-1.0)*r10*x1860)))),IkReal((((r11*x1860))+npy+(((-1.0)*r01*x1859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
IkReal x1861=x1862.value;
j24array[0]=((-1.0)*x1861);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1861)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1863=IKcos(j24);
IkReal x1864=IKsin(j24);
IkReal x1865=((0.4)*x1863);
IkReal x1866=((0.4)*x1864);
evalcond[0]=((((-1.0)*npx*x1864))+((r00*sj19*x1866))+((r01*sj19*x1865))+(((-1.0)*npy*x1863))+(((-1.0)*cj19*r11*x1865))+(((-1.0)*cj19*r10*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[3];
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
IkReal x1867=(r12*sj23);
IkReal x1868=((2.0)*sj19);
IkReal x1869=((2.0)*cj23*r22);
j24eval[0]=x1867;
j24eval[1]=IKsign(x1867);
j24eval[2]=((IKabs(((((-1.0)*r21*x1868))+(((5.0)*rxp1_1))+((r01*x1869)))))+(IKabs(((((-1.0)*r20*x1868))+(((5.0)*rxp0_1))+((r00*x1869))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal j24eval[3];
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
IkReal x1870=(r22*sj23);
IkReal x1871=((2.0)*r01);
IkReal x1872=(cj23*r12);
IkReal x1873=((2.0)*sj19);
IkReal x1874=((2.0)*r00);
j24eval[0]=x1870;
j24eval[1]=IKsign(x1870);
j24eval[2]=((IKabs(((((-1.0)*cj19*x1874))+(((-1.0)*r10*x1873))+((x1872*x1874))+(((-5.0)*rxp0_2)))))+(IKabs(((((-5.0)*rxp1_2))+(((-1.0)*cj19*x1871))+((x1871*x1872))+(((-1.0)*r11*x1873))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
sj23=0;
cj23=1.0;
j23=0;
IkReal x1875=((0.4)*cj19);
j24eval[0]=((IKabs(((((-1.0)*px*r01))+npy+((r11*x1875)))))+(IKabs((((px*r00))+(((-1.0)*r10*x1875))+(((-1.0)*npx))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
sj23=0;
cj23=1.0;
j23=0;
IkReal x1876=((0.4)*cj19);
j24eval[0]=((IKabs((((px*r01))+(((-1.0)*npy))+(((-1.0)*r11*x1876)))))+(IKabs((((px*r00))+(((-1.0)*r10*x1876))+(((-1.0)*npx))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j24]

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1877=((0.4)*cj19);
CheckValue<IkReal> x1879 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+(((-1.0)*r11*x1877)))),IkReal((((px*r00))+(((-1.0)*r10*x1877))+(((-1.0)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1879.valid){
continue;
}
IkReal x1878=x1879.value;
j24array[0]=((-1.0)*x1878);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1878)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1880=IKsin(j24);
IkReal x1881=IKcos(j24);
IkReal x1882=((0.4)*cj19);
evalcond[0]=((((-1.0)*px*r01*x1880))+(((-1.0)*npx*x1881))+((px*r00*x1881))+((r11*x1880*x1882))+((npy*x1880))+(((-1.0)*r10*x1881*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1883=((0.4)*cj19);
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1883)))),IkReal(((((-1.0)*px*r01))+npy+((r11*x1883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
IkReal x1884=x1885.value;
j24array[0]=((-1.0)*x1884);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1884)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1886=IKcos(j24);
IkReal x1887=IKsin(j24);
IkReal x1888=((0.4)*cj19);
evalcond[0]=((((-1.0)*npy*x1886))+(((-1.0)*npx*x1887))+(((-1.0)*r10*x1887*x1888))+(((-1.0)*r11*x1886*x1888))+((px*r00*x1887))+((px*r01*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
sj23=0;
cj23=-1.0;
j23=3.14159265358979;
IkReal x1889=((0.4)*cj19);
j24eval[0]=((IKabs((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1889)))))+(IKabs(((((-1.0)*px*r01))+npy+((r11*x1889))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
{
IkReal j24eval[1];
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
sj23=0;
cj23=-1.0;
j23=3.14159265358979;
IkReal x1890=((0.4)*cj19);
j24eval[0]=((IKabs((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1890)))))+(IKabs((((px*r01))+(((-1.0)*npy))+(((-1.0)*r11*x1890))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j24]

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1891=((0.4)*cj19);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+(((-1.0)*r11*x1891)))),IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
IkReal x1892=x1893.value;
j24array[0]=((-1.0)*x1892);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1892)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1894=IKsin(j24);
IkReal x1895=IKcos(j24);
IkReal x1896=((0.4)*cj19);
evalcond[0]=(((r11*x1894*x1896))+(((-1.0)*r10*x1895*x1896))+(((-1.0)*npx*x1895))+((npy*x1894))+((px*r00*x1895))+(((-1.0)*px*r01*x1894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1897=((0.4)*cj19);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1897)))),IkReal((((r11*x1897))+(((-1.0)*px*r01))+npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
IkReal x1898=x1899.value;
j24array[0]=((-1.0)*x1898);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1898)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1900=IKcos(j24);
IkReal x1901=IKsin(j24);
IkReal x1902=((0.4)*cj19);
evalcond[0]=((((-1.0)*r11*x1900*x1902))+(((-1.0)*r10*x1901*x1902))+(((-1.0)*npy*x1900))+((px*r00*x1901))+(((-1.0)*npx*x1901))+((px*r01*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[3];
r02=0;
npz=(pz*r22);
rxp2_1=(px*r22);
rxp2_2=0;
r12=0;
rxp2_0=((-1.0)*py*r22);
IkReal x1903=(r22*sj23);
IkReal x1904=((2.0)*sj19);
IkReal x1905=((2.0)*cj19);
j24eval[0]=x1903;
j24eval[1]=IKsign(x1903);
j24eval[2]=((IKabs(((((-5.0)*rxp1_2))+(((-1.0)*r11*x1904))+(((-1.0)*r01*x1905)))))+(IKabs(((((-1.0)*r10*x1904))+(((-5.0)*rxp0_2))+(((-1.0)*r00*x1905))))));
if( IKabs(j24eval[0]) < 0.0000010000000000  || IKabs(j24eval[1]) < 0.0000010000000000  || IKabs(j24eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j23))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
r02=0;
npz=(pz*r22);
rxp2_1=(px*r22);
rxp2_2=0;
r12=0;
rxp2_0=((-1.0)*py*r22);
sj23=0;
cj23=1.0;
j23=0;
j24eval[0]=((((6.25)*(npy*npy)))+(((6.25)*(npx*npx)))+(cj19*cj19)+(((-6.25)*(px*px)))+(((5.0)*cj19*py)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1906=((0.4)*cj19);
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1906)))),IkReal(((((-1.0)*px*r01))+npy+((r11*x1906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
IkReal x1907=x1908.value;
j24array[0]=((-1.0)*x1907);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1907)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1909=IKcos(j24);
IkReal x1910=IKsin(j24);
IkReal x1911=((0.4)*cj19);
evalcond[0]=((((-1.0)*npy*x1909))+((px*r00*x1910))+(((-1.0)*npx*x1910))+(((-1.0)*r10*x1910*x1911))+((px*r01*x1909))+(((-1.0)*r11*x1909*x1911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j23)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j24eval[1];
r02=0;
npz=(pz*r22);
rxp2_1=(px*r22);
rxp2_2=0;
r12=0;
rxp2_0=((-1.0)*py*r22);
sj23=0;
cj23=-1.0;
j23=3.14159265358979;
j24eval[0]=((((6.25)*(npy*npy)))+(((6.25)*(npx*npx)))+(cj19*cj19)+(((-6.25)*(px*px)))+(((5.0)*cj19*py)));
if( IKabs(j24eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
IkReal x1912=((0.4)*cj19);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r10*x1912)))),IkReal(((((-1.0)*px*r01))+npy+((r11*x1912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
IkReal x1913=x1914.value;
j24array[0]=((-1.0)*x1913);
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((3.14159265358979)+(((-1.0)*x1913)));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
IkReal x1915=IKcos(j24);
IkReal x1916=IKsin(j24);
IkReal x1917=((0.4)*cj19);
evalcond[0]=((((-1.0)*r11*x1915*x1917))+(((-1.0)*npy*x1915))+((px*r00*x1916))+(((-1.0)*r10*x1916*x1917))+(((-1.0)*npx*x1916))+((px*r01*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x1918=((2.0)*sj19);
IkReal x1919=((2.0)*cj19);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1919))+(((-1.0)*r10*x1918))+(((-5.0)*rxp0_2)))),IkReal(((((-5.0)*rxp1_2))+(((-1.0)*r01*x1919))+(((-1.0)*r11*x1918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(IKsign((r22*sj23)),-1);
if(!x1921.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x1920.value)+(((1.5707963267949)*(x1921.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1922=IKcos(j24);
IkReal x1923=IKsin(j24);
IkReal x1924=((0.4)*r00);
IkReal x1925=(cj23*r22);
IkReal x1926=(r01*sj19);
IkReal x1927=((1.0)*npx);
IkReal x1928=(sj23*x1922);
IkReal x1929=(npy*x1923);
IkReal x1930=((0.4)*x1923);
IkReal x1931=(r11*x1930);
IkReal x1932=((0.4)*cj19*x1922);
evalcond[0]=((((0.4)*sj19))+(((-1.0)*px))+(((-1.0)*r01*sj23*x1930))+((x1924*x1928)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*sj23*x1931))+(((0.4)*r10*x1928))+(((-0.4)*cj19)));
evalcond[2]=((((0.4)*x1925))+(((-1.0)*r21*sj23*x1930))+(((-1.0)*pz))+(((0.4)*r20*x1928)));
evalcond[3]=((((0.8)*pz*x1925))+(((-1.0)*pp))+(((-0.8)*sj23*x1929))+(((0.8)*npx*x1928)));
evalcond[4]=(((sj19*x1923*x1924))+(((-1.0)*cj19*r10*x1930))+(((-1.0)*r11*x1932))+(((-1.0)*npy*x1922))+(((0.4)*x1922*x1926))+(((-1.0)*x1923*x1927)));
evalcond[5]=((((0.4)*sj23))+((cj19*x1931))+(((-1.0)*x1922*x1927))+(((-1.0)*r10*x1932))+(((-1.0)*x1926*x1930))+x1929+((sj19*x1922*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x1933=((2.0)*r00);
IkReal x1934=(cj23*r12);
IkReal x1935=((2.0)*sj19);
IkReal x1936=((2.0)*r01);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1935))+((x1933*x1934))+(((-5.0)*rxp0_2))+(((-1.0)*cj19*x1933)))),IkReal(((((-5.0)*rxp1_2))+((x1934*x1936))+(((-1.0)*r11*x1935))+(((-1.0)*cj19*x1936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
CheckValue<IkReal> x1938=IKPowWithIntegerCheck(IKsign((r22*sj23)),-1);
if(!x1938.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x1937.value)+(((1.5707963267949)*(x1938.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1939=IKcos(j24);
IkReal x1940=IKsin(j24);
IkReal x1941=(cj23*r22);
IkReal x1942=((0.4)*r00);
IkReal x1943=(r01*sj19);
IkReal x1944=((1.0)*npx);
IkReal x1945=(cj23*r12);
IkReal x1946=(sj23*x1939);
IkReal x1947=(npy*x1940);
IkReal x1948=((0.4)*x1940);
IkReal x1949=(r11*x1948);
IkReal x1950=((0.4)*cj19*x1939);
evalcond[0]=((((0.4)*sj19))+(((-1.0)*px))+(((-1.0)*r01*sj23*x1948))+((x1942*x1946)));
evalcond[1]=((((-1.0)*pz))+(((-1.0)*r21*sj23*x1948))+(((0.4)*x1941))+(((0.4)*r20*x1946)));
evalcond[2]=((((0.4)*r10*x1946))+(((-1.0)*sj23*x1949))+(((-1.0)*py))+(((0.4)*x1945))+(((-0.4)*cj19)));
evalcond[3]=((((-0.8)*sj23*x1947))+(((0.8)*pz*x1941))+(((-1.0)*pp))+(((0.8)*py*x1945))+(((0.8)*npx*x1946)));
evalcond[4]=((((-1.0)*npy*x1939))+(((-1.0)*cj19*r10*x1948))+(((-1.0)*x1940*x1944))+((sj19*x1940*x1942))+(((0.4)*x1939*x1943))+(((-1.0)*r11*x1950)));
evalcond[5]=((((0.4)*sj23))+(((-1.0)*x1943*x1948))+x1947+((cj19*x1949))+(((-1.0)*r10*x1950))+(((-1.0)*x1939*x1944))+((sj19*x1939*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x1951=((2.0)*sj19);
IkReal x1952=((2.0)*cj23*r22);
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(IKsign((r12*sj23)),-1);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(((((5.0)*rxp0_1))+((r00*x1952))+(((-1.0)*r20*x1951)))),IkReal(((((5.0)*rxp1_1))+((r01*x1952))+(((-1.0)*r21*x1951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1953.value)))+(x1954.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1955=IKcos(j24);
IkReal x1956=IKsin(j24);
IkReal x1957=(cj23*r22);
IkReal x1958=((0.4)*r00);
IkReal x1959=(r01*sj19);
IkReal x1960=((1.0)*npx);
IkReal x1961=(cj23*r12);
IkReal x1962=(sj23*x1955);
IkReal x1963=(npy*x1956);
IkReal x1964=((0.4)*x1956);
IkReal x1965=(r11*x1964);
IkReal x1966=((0.4)*cj19*x1955);
evalcond[0]=(((x1958*x1962))+(((-1.0)*r01*sj23*x1964))+(((0.4)*sj19))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*r21*sj23*x1964))+(((-1.0)*pz))+(((0.4)*x1957))+(((0.4)*r20*x1962)));
evalcond[2]=((((0.4)*r10*x1962))+(((-1.0)*sj23*x1965))+(((-1.0)*py))+(((-0.4)*cj19))+(((0.4)*x1961)));
evalcond[3]=((((-0.8)*sj23*x1963))+(((0.8)*py*x1961))+(((-1.0)*pp))+(((0.8)*pz*x1957))+(((0.8)*npx*x1962)));
evalcond[4]=((((-1.0)*x1956*x1960))+(((0.4)*x1955*x1959))+(((-1.0)*npy*x1955))+(((-1.0)*cj19*r10*x1964))+((sj19*x1956*x1958))+(((-1.0)*r11*x1966)));
evalcond[5]=((((0.4)*sj23))+(((-1.0)*x1959*x1964))+((cj19*x1965))+x1963+(((-1.0)*r10*x1966))+((sj19*x1955*x1958))+(((-1.0)*x1955*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j24]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x1967=((5.0)*pp);
IkReal x1968=((4.0)*npx);
IkReal x1969=((10.0)*pz);
IkReal x1970=(cj23*r22);
IkReal x1971=((4.0)*npy);
IkReal x1972=((4.0)*cj23*npz);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal((((r20*x1972))+((npx*x1969))+(((-1.0)*x1968*x1970))+(((-1.0)*r20*x1967)))),IkReal((((r21*x1972))+((npy*x1969))+(((-1.0)*x1970*x1971))+(((-1.0)*r21*x1967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974=IKPowWithIntegerCheck(IKsign((((r20*sj23*x1971))+(((-1.0)*r21*sj23*x1968)))),-1);
if(!x1974.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(x1973.value)+(((1.5707963267949)*(x1974.value))));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1975=IKcos(j24);
IkReal x1976=IKsin(j24);
IkReal x1977=((0.4)*cj23);
IkReal x1978=((0.4)*r00);
IkReal x1979=(r01*sj19);
IkReal x1980=((1.0)*npx);
IkReal x1981=(sj23*x1975);
IkReal x1982=(npy*x1976);
IkReal x1983=((0.4)*x1976);
IkReal x1984=(r11*x1983);
IkReal x1985=((0.4)*cj19*x1975);
evalcond[0]=((((-1.0)*r21*sj23*x1983))+(((-1.0)*pz))+((r22*x1977))+(((0.4)*r20*x1981)));
evalcond[1]=((((0.8)*cj23*npz))+(((-0.8)*sj23*x1982))+(((-1.0)*pp))+(((0.8)*npx*x1981)));
evalcond[2]=(((r02*x1977))+(((0.4)*sj19))+((x1978*x1981))+(((-1.0)*px))+(((-1.0)*r01*sj23*x1983)));
evalcond[3]=((((-1.0)*sj23*x1984))+((r12*x1977))+(((0.4)*r10*x1981))+(((-1.0)*py))+(((-0.4)*cj19)));
evalcond[4]=((((-1.0)*x1976*x1980))+(((-1.0)*npy*x1975))+(((-1.0)*r11*x1985))+((sj19*x1976*x1978))+(((0.4)*x1975*x1979))+(((-1.0)*cj19*r10*x1983)));
evalcond[5]=((((0.4)*sj23))+(((-1.0)*x1979*x1983))+(((-1.0)*r10*x1985))+(((-1.0)*x1975*x1980))+x1982+((cj19*x1984))+((sj19*x1975*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x1986=((2.0)*cj23);
IkReal x1987=((2.0)*sj19);
CheckValue<IkReal> x1988=IKPowWithIntegerCheck(IKsign((r12*sj23)),-1);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal((((r11*x1986))+(((5.0)*rxp0_1))+(((-1.0)*r20*x1987)))),IkReal(((((-1.0)*r10*x1986))+(((5.0)*rxp1_1))+(((-1.0)*r21*x1987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1988.value)))+(x1989.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x1990=IKcos(j24);
IkReal x1991=IKsin(j24);
IkReal x1992=((0.4)*cj23);
IkReal x1993=((0.4)*r00);
IkReal x1994=(r01*sj19);
IkReal x1995=((1.0)*npx);
IkReal x1996=(sj23*x1990);
IkReal x1997=(npy*x1991);
IkReal x1998=((0.4)*x1991);
IkReal x1999=(r11*x1998);
IkReal x2000=((0.4)*cj19*x1990);
evalcond[0]=((((-1.0)*pz))+(((0.4)*r20*x1996))+(((-1.0)*r21*sj23*x1998))+((r22*x1992)));
evalcond[1]=((((0.8)*npx*x1996))+(((0.8)*cj23*npz))+(((-1.0)*pp))+(((-0.8)*sj23*x1997)));
evalcond[2]=(((r02*x1992))+(((0.4)*sj19))+(((-1.0)*px))+((x1993*x1996))+(((-1.0)*r01*sj23*x1998)));
evalcond[3]=(((r12*x1992))+(((0.4)*r10*x1996))+(((-1.0)*py))+(((-0.4)*cj19))+(((-1.0)*sj23*x1999)));
evalcond[4]=((((-1.0)*r11*x2000))+((sj19*x1991*x1993))+(((-1.0)*x1991*x1995))+(((-1.0)*npy*x1990))+(((0.4)*x1990*x1994))+(((-1.0)*cj19*r10*x1998)));
evalcond[5]=((((0.4)*sj23))+((sj19*x1990*x1993))+(((-1.0)*r10*x2000))+x1997+((cj19*x1999))+(((-1.0)*x1994*x1998))+(((-1.0)*x1990*x1995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x2001=((2.0)*cj19);
IkReal x2002=((2.0)*cj23);
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign((r02*sj23)),-1);
if(!x2003.valid){
continue;
}
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2002))+((r20*x2001))+(((-5.0)*rxp0_0)))),IkReal((((r21*x2001))+(((-5.0)*rxp1_0))+((r00*x2002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
j24array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2003.value)))+(x2004.value));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x2005=IKcos(j24);
IkReal x2006=IKsin(j24);
IkReal x2007=((0.4)*cj23);
IkReal x2008=((0.4)*r00);
IkReal x2009=(r01*sj19);
IkReal x2010=((1.0)*npx);
IkReal x2011=(sj23*x2005);
IkReal x2012=(npy*x2006);
IkReal x2013=((0.4)*x2006);
IkReal x2014=(r11*x2013);
IkReal x2015=((0.4)*cj19*x2005);
evalcond[0]=(((r22*x2007))+(((0.4)*r20*x2011))+(((-1.0)*pz))+(((-1.0)*r21*sj23*x2013)));
evalcond[1]=((((0.8)*npx*x2011))+(((0.8)*cj23*npz))+(((-1.0)*pp))+(((-0.8)*sj23*x2012)));
evalcond[2]=((((-1.0)*r01*sj23*x2013))+((r02*x2007))+(((0.4)*sj19))+(((-1.0)*px))+((x2008*x2011)));
evalcond[3]=(((r12*x2007))+(((0.4)*r10*x2011))+(((-1.0)*py))+(((-0.4)*cj19))+(((-1.0)*sj23*x2014)));
evalcond[4]=((((-1.0)*npy*x2005))+(((-1.0)*x2006*x2010))+(((-1.0)*cj19*r10*x2013))+((sj19*x2006*x2008))+(((-1.0)*r11*x2015))+(((0.4)*x2005*x2009)));
evalcond[5]=((((0.4)*sj23))+(((-1.0)*x2009*x2013))+x2012+(((-1.0)*x2005*x2010))+((cj19*x2014))+((sj19*x2005*x2008))+(((-1.0)*r10*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x170=((1.0)*cj24);
IkReal x171=((1.0)*cj19);
IkReal x172=((1.0)*sj24);
IkReal x173=((1.0)*sj19);
IkReal x174=((1.0)*cj23);
IkReal x175=((((-1.0)*r20*x170))+((r21*sj24)));
IkReal x176=((((-1.0)*r11*x171))+((r01*sj19)));
IkReal x177=(((r00*sj19))+(((-1.0)*r10*x171)));
IkReal x178=(((r02*sj19))+(((-1.0)*r12*x171)));
IkReal x179=((((-1.0)*r11*x173))+(((-1.0)*r01*x171)));
IkReal x180=((((-1.0)*r00*x171))+(((-1.0)*r10*x173)));
IkReal x181=((((-1.0)*r02*x171))+(((-1.0)*r12*x173)));
IkReal x182=(((cj24*x177))+(((-1.0)*x172*x176)));
IkReal x183=(((cj24*x180))+(((-1.0)*x172*x179)));
new_r00=((((-1.0)*x174*x183))+((sj23*x181)));
new_r01=((((-1.0)*x170*x179))+(((-1.0)*x172*x180)));
new_r02=(((cj23*x181))+((sj23*x183)));
new_r10=((((-1.0)*x174*x175))+(((-1.0)*r22*sj23)));
new_r11=(((r20*sj24))+((cj24*r21)));
new_r12=((((-1.0)*r22*x174))+((sj23*x175)));
new_r20=(((sj23*x178))+(((-1.0)*x174*x182)));
new_r21=((((-1.0)*x170*x176))+(((-1.0)*x172*x177)));
new_r22=(((cj23*x178))+((sj23*x182)));
{
IkReal j21array[2], cj21array[2], sj21array[2];
bool j21valid[2]={false};
_nj21 = 2;
cj21array[0]=new_r22;
if( cj21array[0] >= -1-IKFAST_SINCOS_THRESH && cj21array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j21valid[0] = j21valid[1] = true;
    j21array[0] = IKacos(cj21array[0]);
    sj21array[0] = IKsin(j21array[0]);
    cj21array[1] = cj21array[0];
    j21array[1] = -j21array[0];
    sj21array[1] = -sj21array[0];
}
else if( isnan(cj21array[0]) )
{
    // probably any value will work
    j21valid[0] = true;
    cj21array[0] = 1; sj21array[0] = 0; j21array[0] = 0;
}
for(int ij21 = 0; ij21 < 2; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 2; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IkReal j20eval[3];
j20eval[0]=sj21;
j20eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j20eval[2]=IKsign(sj21);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
j22eval[0]=sj21;
j22eval[1]=IKsign(sj21);
j22eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
j20eval[0]=new_r12;
j20eval[1]=sj21;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j22mul = 1;
j22=0;
j20mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].fmul = j20mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].fmul = j22mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j22mul = 1;
j22=0;
j20mul=1.0;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20=IKatan2(new_r10, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].fmul = j20mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].fmul = j22mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x184=new_r22*new_r22;
IkReal x185=((16.0)*new_r10);
IkReal x186=((16.0)*new_r01);
IkReal x187=((16.0)*new_r22);
IkReal x188=((8.0)*new_r11);
IkReal x189=((8.0)*new_r00);
IkReal x190=(x184*x185);
IkReal x191=(x184*x186);
j20eval[0]=((IKabs(((((-1.0)*x186))+x191)))+(IKabs(((((-1.0)*new_r22*x189))+((x184*x188)))))+(IKabs(((((-1.0)*x191))+x186)))+(IKabs((((new_r11*x187))+(((16.0)*new_r00))+(((-32.0)*new_r00*x184)))))+(IKabs(((((-1.0)*x190))+x185)))+(IKabs(((((-1.0)*x185))+x190)))+(IKabs(((((-1.0)*x189))+((new_r22*x188)))))+(IKabs(((((32.0)*new_r11))+(((-16.0)*new_r11*x184))+(((-1.0)*new_r00*x187))))));
if( IKabs(j20eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j20, j22]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j20evalpoly[1];
IkReal x192=new_r22*new_r22;
IkReal x193=((16.0)*new_r10);
IkReal x194=(new_r11*new_r22);
IkReal x195=(x192*x193);
IkReal x196=((((8.0)*x194))+(((-8.0)*new_r00)));
op[0]=x196;
op[1]=((((-1.0)*x195))+x193);
op[2]=((((16.0)*new_r00))+(((16.0)*x194))+(((-32.0)*new_r00*x192)));
op[3]=((((-1.0)*x193))+x195);
op[4]=x196;
polyroots4(op,zeror,numroots);
IkReal j20array[4], cj20array[4], sj20array[4], tempj20array[1];
int numsolutions = 0;
for(int ij20 = 0; ij20 < numroots; ++ij20)
{
IkReal htj20 = zeror[ij20];
tempj20array[0]=((2.0)*(atan(htj20)));
for(int kj20 = 0; kj20 < 1; ++kj20)
{
j20array[numsolutions] = tempj20array[kj20];
if( j20array[numsolutions] > IKPI )
{
    j20array[numsolutions]-=IK2PI;
}
else if( j20array[numsolutions] < -IKPI )
{
    j20array[numsolutions]+=IK2PI;
}
sj20array[numsolutions] = IKsin(j20array[numsolutions]);
cj20array[numsolutions] = IKcos(j20array[numsolutions]);
numsolutions++;
}
}
bool j20valid[4]={true,true,true,true};
_nj20 = 4;
for(int ij20 = 0; ij20 < numsolutions; ++ij20)
    {
if( !j20valid[ij20] )
{
    continue;
}
    j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
htj20 = IKtan(j20/2);

IkReal x197=((16.0)*new_r01);
IkReal x198=new_r22*new_r22;
IkReal x199=(new_r00*new_r22);
IkReal x200=((8.0)*x199);
IkReal x201=(new_r11*x198);
IkReal x202=(x197*x198);
IkReal x203=((8.0)*x201);
j20evalpoly[0]=((((-1.0)*x200))+x203+(((htj20*htj20*htj20*htj20)*(((((-1.0)*x200))+x203))))+(((htj20*htj20*htj20)*(((((-1.0)*x197))+x202))))+(((htj20*htj20)*(((((-16.0)*x201))+(((32.0)*new_r11))+(((-16.0)*x199))))))+((htj20*((x197+(((-1.0)*x202)))))));
if( IKabs(j20evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < numsolutions; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
{
IkReal j22eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x204=cj20*cj20;
IkReal x205=new_r22*new_r22;
IkReal x206=((1.0)*cj20);
IkReal x207=(new_r22*sj20);
IkReal x208=(x205+x204+(((-1.0)*x204*x205)));
j22eval[0]=x208;
j22eval[1]=((IKabs(((((-1.0)*new_r11*x206))+(((-1.0)*new_r10*x207)))))+(IKabs((((new_r11*x207))+(((-1.0)*new_r10*x206))))));
j22eval[2]=IKsign(x208);
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=new_r22;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j22eval[0]=cj20;
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r00, new_r01);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x209=IKsin(j22);
IkReal x210=IKcos(j22);
evalcond[0]=x209;
evalcond[1]=((-1.0)*x210);
evalcond[2]=(x209+(((-1.0)*new_r00)));
evalcond[3]=(x210+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x211=IKsin(j22);
IkReal x212=IKcos(j22);
evalcond[0]=x211;
evalcond[1]=(x211+new_r00);
evalcond[2]=(x212+new_r01);
evalcond[3]=((-1.0)*x212);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x213=new_r22*new_r22;
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x213))),-1);
if(!x214.valid){
continue;
}
if((((-1.0)*x213*(x214.value))) < -0.00001)
continue;
IkReal gconst78=IKsqrt(((-1.0)*x213*(x214.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst78))+cj20)))+(IKabs(((-1.0)+(IKsign(sj20)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
IkReal x215=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
sj20=IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))));
cj20=gconst78;
if( (gconst78) < -1-IKFAST_SINCOS_THRESH || (gconst78) > 1+IKFAST_SINCOS_THRESH )
    continue;
j20=IKacos(gconst78);
CheckValue<IkReal> x216=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x215))),-1);
if(!x216.valid){
continue;
}
if((((-1.0)*x215*(x216.value))) < -0.00001)
continue;
IkReal gconst78=IKsqrt(((-1.0)*x215*(x216.value)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(gconst78,-1);
if(!x217.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x217.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst78*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x217.value)))+IKsqr(((((-1.0)*gconst78*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r10*(x217.value)), ((((-1.0)*gconst78*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78))))))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x218=IKsin(j22);
IkReal x219=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
IkReal x220=IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))));
IkReal x221=((1.0)*x220);
evalcond[0]=x218;
evalcond[1]=((-1.0)*x219);
evalcond[2]=(((gconst78*x218))+new_r10);
evalcond[3]=(((gconst78*x219))+new_r11);
evalcond[4]=((((-1.0)*x218*x221))+new_r00);
evalcond[5]=((((-1.0)*x219*x221))+new_r01);
evalcond[6]=(x218+((gconst78*new_r10))+(((-1.0)*new_r00*x221)));
evalcond[7]=((((-1.0)*new_r01*x221))+x219+((gconst78*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223=IKPowWithIntegerCheck(IKsign(gconst78),-1);
if(!x223.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x222.value)+(((1.5707963267949)*(x223.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x224=IKsin(j22);
IkReal x225=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
IkReal x226=IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))));
IkReal x227=((1.0)*x226);
evalcond[0]=x224;
evalcond[1]=((-1.0)*x225);
evalcond[2]=(new_r10+((gconst78*x224)));
evalcond[3]=(new_r11+((gconst78*x225)));
evalcond[4]=((((-1.0)*x224*x227))+new_r00);
evalcond[5]=((((-1.0)*x225*x227))+new_r01);
evalcond[6]=(x224+((gconst78*new_r10))+(((-1.0)*new_r00*x227)));
evalcond[7]=((((-1.0)*new_r01*x227))+x225+((gconst78*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x228=new_r22*new_r22;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x228))),-1);
if(!x229.valid){
continue;
}
if((((-1.0)*x228*(x229.value))) < -0.00001)
continue;
IkReal gconst78=IKsqrt(((-1.0)*x228*(x229.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst78))+cj20)))+(IKabs(((1.0)+(IKsign(sj20)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
IkReal x230=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
sj20=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))))));
cj20=gconst78;
if( (gconst78) < -1-IKFAST_SINCOS_THRESH || (gconst78) > 1+IKFAST_SINCOS_THRESH )
    continue;
j20=((-1.0)*(IKacos(gconst78)));
CheckValue<IkReal> x231=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x230))),-1);
if(!x231.valid){
continue;
}
if((((-1.0)*x230*(x231.value))) < -0.00001)
continue;
IkReal gconst78=IKsqrt(((-1.0)*x230*(x231.value)));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x232=IKPowWithIntegerCheck(gconst78,-1);
if(!x232.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x232.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst78*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x232.value)))+IKsqr(((((-1.0)*gconst78*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r10*(x232.value)), ((((-1.0)*gconst78*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78))))))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x233=IKsin(j22);
IkReal x234=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
IkReal x235=IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))));
evalcond[0]=x233;
evalcond[1]=((-1.0)*x234);
evalcond[2]=(((gconst78*x233))+new_r10);
evalcond[3]=(((gconst78*x234))+new_r11);
evalcond[4]=(((x233*x235))+new_r00);
evalcond[5]=(((x234*x235))+new_r01);
evalcond[6]=(((new_r00*x235))+x233+((gconst78*new_r10)));
evalcond[7]=(((new_r01*x235))+x234+((gconst78*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237=IKPowWithIntegerCheck(IKsign(gconst78),-1);
if(!x237.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x236.value)+(((1.5707963267949)*(x237.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x238=IKsin(j22);
IkReal x239=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst78*gconst78))))) < -0.00001)
continue;
IkReal x240=IKsqrt(((1.0)+(((-1.0)*(gconst78*gconst78)))));
evalcond[0]=x238;
evalcond[1]=((-1.0)*x239);
evalcond[2]=(((gconst78*x238))+new_r10);
evalcond[3]=(((gconst78*x239))+new_r11);
evalcond[4]=(((x238*x240))+new_r00);
evalcond[5]=(((x239*x240))+new_r01);
evalcond[6]=(x238+((gconst78*new_r10))+((new_r00*x240)));
evalcond[7]=(x239+((gconst78*new_r11))+((new_r01*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x241=new_r22*new_r22;
CheckValue<IkReal> x242=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x241))),-1);
if(!x242.valid){
continue;
}
if((((-1.0)*x241*(x242.value))) < -0.00001)
continue;
IkReal gconst79=((-1.0)*(IKsqrt(((-1.0)*x241*(x242.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst79))+cj20)))+(IKabs(((-1.0)+(IKsign(sj20)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
IkReal x243=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
sj20=IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79)))));
cj20=gconst79;
if( (gconst79) < -1-IKFAST_SINCOS_THRESH || (gconst79) > 1+IKFAST_SINCOS_THRESH )
    continue;
j20=IKacos(gconst79);
CheckValue<IkReal> x244=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x243))),-1);
if(!x244.valid){
continue;
}
if((((-1.0)*x243*(x244.value))) < -0.00001)
continue;
IkReal gconst79=((-1.0)*(IKsqrt(((-1.0)*x243*(x244.value)))));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x245=IKPowWithIntegerCheck(gconst79,-1);
if(!x245.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x245.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79))))))))+(((-1.0)*gconst79*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x245.value)))+IKsqr((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79))))))))+(((-1.0)*gconst79*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r10*(x245.value)), (((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79))))))))+(((-1.0)*gconst79*new_r11))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x246=IKsin(j22);
IkReal x247=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
IkReal x248=IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79)))));
IkReal x249=((1.0)*x248);
evalcond[0]=x246;
evalcond[1]=((-1.0)*x247);
evalcond[2]=(((gconst79*x246))+new_r10);
evalcond[3]=(((gconst79*x247))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*x246*x249)));
evalcond[5]=(new_r01+(((-1.0)*x247*x249)));
evalcond[6]=((((-1.0)*new_r00*x249))+x246+((gconst79*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x249))+x247+((gconst79*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x250 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x250.valid){
continue;
}
CheckValue<IkReal> x251=IKPowWithIntegerCheck(IKsign(gconst79),-1);
if(!x251.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x250.value)+(((1.5707963267949)*(x251.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x252=IKsin(j22);
IkReal x253=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
IkReal x254=IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79)))));
IkReal x255=((1.0)*x254);
evalcond[0]=x252;
evalcond[1]=((-1.0)*x253);
evalcond[2]=(((gconst79*x252))+new_r10);
evalcond[3]=(((gconst79*x253))+new_r11);
evalcond[4]=((((-1.0)*x252*x255))+new_r00);
evalcond[5]=(new_r01+(((-1.0)*x253*x255)));
evalcond[6]=(x252+((gconst79*new_r10))+(((-1.0)*new_r00*x255)));
evalcond[7]=((((-1.0)*new_r01*x255))+x253+((gconst79*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x256=new_r22*new_r22;
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x256))),-1);
if(!x257.valid){
continue;
}
if((((-1.0)*x256*(x257.value))) < -0.00001)
continue;
IkReal gconst79=((-1.0)*(IKsqrt(((-1.0)*x256*(x257.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst79))+cj20)))+(IKabs(((1.0)+(IKsign(sj20)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
IkReal x258=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
sj20=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79)))))));
cj20=gconst79;
if( (gconst79) < -1-IKFAST_SINCOS_THRESH || (gconst79) > 1+IKFAST_SINCOS_THRESH )
    continue;
j20=((-1.0)*(IKacos(gconst79)));
CheckValue<IkReal> x259=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x258))),-1);
if(!x259.valid){
continue;
}
if((((-1.0)*x258*(x259.value))) < -0.00001)
continue;
IkReal gconst79=((-1.0)*(IKsqrt(((-1.0)*x258*(x259.value)))));
j22eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j22eval[0]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x260=IKPowWithIntegerCheck(gconst79,-1);
if(!x260.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x260.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79))))))))+(((-1.0)*gconst79*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x260.value)))+IKsqr(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79))))))))+(((-1.0)*gconst79*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r10*(x260.value)), ((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79))))))))+(((-1.0)*gconst79*new_r11))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x261=IKsin(j22);
IkReal x262=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
IkReal x263=IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79)))));
evalcond[0]=x261;
evalcond[1]=((-1.0)*x262);
evalcond[2]=(((gconst79*x261))+new_r10);
evalcond[3]=(((gconst79*x262))+new_r11);
evalcond[4]=(((x261*x263))+new_r00);
evalcond[5]=(((x262*x263))+new_r01);
evalcond[6]=(x261+((gconst79*new_r10))+((new_r00*x263)));
evalcond[7]=(x262+((gconst79*new_r11))+((new_r01*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x264 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265=IKPowWithIntegerCheck(IKsign(gconst79),-1);
if(!x265.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x264.value)+(((1.5707963267949)*(x265.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x266=IKsin(j22);
IkReal x267=IKcos(j22);
if((((1.0)+(((-1.0)*(gconst79*gconst79))))) < -0.00001)
continue;
IkReal x268=IKsqrt(((1.0)+(((-1.0)*(gconst79*gconst79)))));
evalcond[0]=x266;
evalcond[1]=((-1.0)*x267);
evalcond[2]=(((gconst79*x266))+new_r10);
evalcond[3]=(((gconst79*x267))+new_r11);
evalcond[4]=(((x266*x268))+new_r00);
evalcond[5]=(((x267*x268))+new_r01);
evalcond[6]=(x266+((gconst79*new_r10))+((new_r00*x268)));
evalcond[7]=(x267+((gconst79*new_r11))+((new_r01*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x269=(new_r01*new_r22);
IkReal x270=(cj20*new_r11);
CheckValue<IkReal> x271=IKPowWithIntegerCheck(cj20,-1);
if(!x271.valid){
continue;
}
if( IKabs(((x271.value)*(((((-1.0)*x269))+((x269*(cj20*cj20)))+((new_r22*sj20*x270))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj20))+(((-1.0)*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x271.value)*(((((-1.0)*x269))+((x269*(cj20*cj20)))+((new_r22*sj20*x270))+(((-1.0)*new_r10))))))+IKsqr((((new_r01*sj20))+(((-1.0)*x270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((x271.value)*(((((-1.0)*x269))+((x269*(cj20*cj20)))+((new_r22*sj20*x270))+(((-1.0)*new_r10))))), (((new_r01*sj20))+(((-1.0)*x270))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[10];
IkReal x272=IKcos(j22);
IkReal x273=IKsin(j22);
IkReal x274=(cj20*new_r00);
IkReal x275=((1.0)*sj20);
IkReal x276=((1.0)*new_r22);
IkReal x277=(cj20*new_r01);
IkReal x278=(new_r22*x272);
IkReal x279=(cj20*x273);
evalcond[0]=(((cj20*new_r10))+(((-1.0)*new_r00*x275))+x273);
evalcond[1]=((((-1.0)*new_r01*x275))+((cj20*new_r11))+x272);
evalcond[2]=(x274+x278+((new_r10*sj20)));
evalcond[3]=(x279+new_r10+((sj20*x278)));
evalcond[4]=((((-1.0)*x273*x276))+x277+((new_r11*sj20)));
evalcond[5]=((((-1.0)*x273*x275))+new_r00+((cj20*x278)));
evalcond[6]=((((-1.0)*new_r22*x273*x275))+new_r11+((cj20*x272)));
evalcond[7]=((((-1.0)*new_r11*new_r22*x275))+x273+(((-1.0)*x276*x277)));
evalcond[8]=((((-1.0)*x272*x275))+new_r01+(((-1.0)*x276*x279)));
evalcond[9]=((((-1.0)*new_r10*new_r22*x275))+(((-1.0)*x274*x276))+(((-1.0)*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x280=((1.0)*new_r10);
CheckValue<IkReal> x281=IKPowWithIntegerCheck(new_r22,-1);
if(!x281.valid){
continue;
}
if( IKabs(((((-1.0)*cj20*x280))+((new_r00*sj20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x281.value)*(((((-1.0)*cj20*new_r00))+(((-1.0)*sj20*x280)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj20*x280))+((new_r00*sj20))))+IKsqr(((x281.value)*(((((-1.0)*cj20*new_r00))+(((-1.0)*sj20*x280))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((-1.0)*cj20*x280))+((new_r00*sj20))), ((x281.value)*(((((-1.0)*cj20*new_r00))+(((-1.0)*sj20*x280))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[10];
IkReal x282=IKcos(j22);
IkReal x283=IKsin(j22);
IkReal x284=(cj20*new_r00);
IkReal x285=((1.0)*sj20);
IkReal x286=((1.0)*new_r22);
IkReal x287=(cj20*new_r01);
IkReal x288=(new_r22*x282);
IkReal x289=(cj20*x283);
evalcond[0]=(((cj20*new_r10))+(((-1.0)*new_r00*x285))+x283);
evalcond[1]=(((cj20*new_r11))+x282+(((-1.0)*new_r01*x285)));
evalcond[2]=(x288+x284+((new_r10*sj20)));
evalcond[3]=(((sj20*x288))+x289+new_r10);
evalcond[4]=(x287+((new_r11*sj20))+(((-1.0)*x283*x286)));
evalcond[5]=(((cj20*x288))+new_r00+(((-1.0)*x283*x285)));
evalcond[6]=(((cj20*x282))+(((-1.0)*new_r22*x283*x285))+new_r11);
evalcond[7]=(x283+(((-1.0)*new_r11*new_r22*x285))+(((-1.0)*x286*x287)));
evalcond[8]=((((-1.0)*x282*x285))+new_r01+(((-1.0)*x286*x289)));
evalcond[9]=((((-1.0)*x282))+(((-1.0)*new_r10*new_r22*x285))+(((-1.0)*x284*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x290=cj20*cj20;
IkReal x291=new_r22*new_r22;
IkReal x292=((1.0)*cj20);
IkReal x293=(new_r22*sj20);
CheckValue<IkReal> x294=IKPowWithIntegerCheck(IKsign(((((-1.0)*x290*x291))+x290+x291)),-1);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x292))+((new_r11*x293)))),IkReal(((((-1.0)*new_r11*x292))+(((-1.0)*new_r10*x293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x295.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(((1.5707963267949)*(x294.value)))+(x295.value));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[10];
IkReal x296=IKcos(j22);
IkReal x297=IKsin(j22);
IkReal x298=(cj20*new_r00);
IkReal x299=((1.0)*sj20);
IkReal x300=((1.0)*new_r22);
IkReal x301=(cj20*new_r01);
IkReal x302=(new_r22*x296);
IkReal x303=(cj20*x297);
evalcond[0]=(((cj20*new_r10))+x297+(((-1.0)*new_r00*x299)));
evalcond[1]=((((-1.0)*new_r01*x299))+((cj20*new_r11))+x296);
evalcond[2]=(x302+x298+((new_r10*sj20)));
evalcond[3]=(((sj20*x302))+x303+new_r10);
evalcond[4]=((((-1.0)*x297*x300))+x301+((new_r11*sj20)));
evalcond[5]=(((cj20*x302))+(((-1.0)*x297*x299))+new_r00);
evalcond[6]=((((-1.0)*new_r22*x297*x299))+((cj20*x296))+new_r11);
evalcond[7]=(x297+(((-1.0)*x300*x301))+(((-1.0)*new_r11*new_r22*x299)));
evalcond[8]=((((-1.0)*x296*x299))+new_r01+(((-1.0)*x300*x303)));
evalcond[9]=((((-1.0)*x296))+(((-1.0)*x298*x300))+(((-1.0)*new_r10*new_r22*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20, j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x305=IKPowWithIntegerCheck(sj21,-1);
if(!x305.valid){
continue;
}
IkReal x304=x305.value;
CheckValue<IkReal> x306=IKPowWithIntegerCheck(new_r12,-1);
if(!x306.valid){
continue;
}
if( IKabs((x304*(x306.value)*(((1.0)+(((-1.0)*(cj21*cj21)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x304)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x304*(x306.value)*(((1.0)+(((-1.0)*(cj21*cj21)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x304))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((x304*(x306.value)*(((1.0)+(((-1.0)*(cj21*cj21)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x304));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x307=IKcos(j20);
IkReal x308=IKsin(j20);
IkReal x309=((1.0)*cj21);
IkReal x310=((1.0)*sj21);
IkReal x311=(sj21*x307);
IkReal x312=(new_r12*x308);
IkReal x313=(new_r02*x307);
IkReal x314=(sj21*x308);
evalcond[0]=((((-1.0)*x307*x310))+new_r02);
evalcond[1]=((((-1.0)*x308*x310))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x308))+((new_r12*x307)));
evalcond[3]=(x313+x312+(((-1.0)*x310)));
evalcond[4]=(((new_r00*x311))+((cj21*new_r20))+((new_r10*x314)));
evalcond[5]=(((cj21*new_r21))+((new_r01*x311))+((new_r11*x314)));
evalcond[6]=((-1.0)+((cj21*new_r22))+((new_r02*x311))+((sj21*x312)));
evalcond[7]=((((-1.0)*x309*x313))+(((-1.0)*x309*x312))+((new_r22*sj21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j22eval[3];
j22eval[0]=sj21;
j22eval[1]=IKsign(sj21);
j22eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
j22eval[0]=sj21;
j22eval[1]=cj20;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
j22eval[0]=sj21;
j22eval[1]=cj21;
j22eval[2]=sj20;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x315=((1.0)*new_r10);
if( IKabs((((new_r00*sj20))+(((-1.0)*cj20*x315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj20*x315))+(((-1.0)*cj20*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj20))+(((-1.0)*cj20*x315))))+IKsqr(((((-1.0)*sj20*x315))+(((-1.0)*cj20*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((((new_r00*sj20))+(((-1.0)*cj20*x315))), ((((-1.0)*sj20*x315))+(((-1.0)*cj20*new_r00))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x316=IKcos(j22);
IkReal x317=IKsin(j22);
IkReal x318=((1.0)*sj20);
IkReal x319=(cj20*x316);
IkReal x320=(cj20*x317);
IkReal x321=(x317*x318);
evalcond[0]=(((cj20*new_r00))+x316+((new_r10*sj20)));
evalcond[1]=((((-1.0)*new_r00*x318))+((cj20*new_r10))+x317);
evalcond[2]=(((cj20*new_r11))+x316+(((-1.0)*new_r01*x318)));
evalcond[3]=(x320+new_r10+((sj20*x316)));
evalcond[4]=(((cj20*new_r01))+((new_r11*sj20))+(((-1.0)*x317)));
evalcond[5]=((((-1.0)*x321))+x319+new_r00);
evalcond[6]=((((-1.0)*x321))+x319+new_r11);
evalcond[7]=((((-1.0)*x320))+new_r01+(((-1.0)*x316*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x322=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj20*new_r10))+(((-1.0)*sj20*x322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj20*x322))+((new_r10*sj20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj20*new_r10))+(((-1.0)*sj20*x322))))+IKsqr(((((-1.0)*cj20*x322))+((new_r10*sj20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((-1.0)*cj20*new_r10))+(((-1.0)*sj20*x322))), ((((-1.0)*cj20*x322))+((new_r10*sj20))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x323=IKsin(j22);
IkReal x324=IKcos(j22);
IkReal x325=((1.0)*sj20);
IkReal x326=(cj20*x323);
IkReal x327=((1.0)*x324);
IkReal x328=(sj20*x323);
IkReal x329=(x324*x325);
evalcond[0]=(((cj20*new_r01))+x323+((new_r11*sj20)));
evalcond[1]=(((cj20*new_r10))+x323+(((-1.0)*new_r00*x325)));
evalcond[2]=(((cj20*new_r11))+x324+(((-1.0)*new_r01*x325)));
evalcond[3]=(((cj20*new_r00))+(((-1.0)*x327))+((new_r10*sj20)));
evalcond[4]=(x328+new_r11+((cj20*x324)));
evalcond[5]=((((-1.0)*x329))+x326+new_r10);
evalcond[6]=((((-1.0)*x329))+x326+new_r01);
evalcond[7]=((((-1.0)*cj20*x327))+(((-1.0)*x323*x325))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x330=IKsin(j22);
IkReal x331=IKcos(j22);
IkReal x332=((1.0)*sj20);
IkReal x333=((1.0)*x331);
evalcond[0]=(x330+new_r21);
evalcond[1]=((((-1.0)*x333))+new_r20);
evalcond[2]=(((cj20*x330))+new_r10);
evalcond[3]=(((cj20*x331))+new_r11);
evalcond[4]=((((-1.0)*x330*x332))+new_r00);
evalcond[5]=((((-1.0)*x331*x332))+new_r01);
evalcond[6]=(((cj20*new_r10))+x330+(((-1.0)*new_r00*x332)));
evalcond[7]=(((cj20*new_r11))+x331+(((-1.0)*new_r01*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x334=IKsin(j22);
IkReal x335=IKcos(j22);
IkReal x336=((1.0)*sj20);
evalcond[0]=(x335+new_r20);
evalcond[1]=((((-1.0)*x334))+new_r21);
evalcond[2]=(((cj20*x334))+new_r10);
evalcond[3]=(((cj20*x335))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*x334*x336)));
evalcond[5]=(new_r01+(((-1.0)*x335*x336)));
evalcond[6]=(((cj20*new_r10))+x334+(((-1.0)*new_r00*x336)));
evalcond[7]=(((cj20*new_r11))+x335+(((-1.0)*new_r01*x336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x337=IKsin(j22);
IkReal x338=IKcos(j22);
IkReal x339=((1.0)*cj21);
IkReal x340=((1.0)*x338);
evalcond[0]=(x337+new_r10);
evalcond[1]=(x338+new_r11);
evalcond[2]=(((sj21*x337))+new_r21);
evalcond[3]=(((cj21*x338))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*sj21*x340)));
evalcond[5]=((((-1.0)*x337*x339))+new_r01);
evalcond[6]=(((new_r21*sj21))+x337+(((-1.0)*new_r01*x339)));
evalcond[7]=(((new_r20*sj21))+(((-1.0)*new_r00*x339))+(((-1.0)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r10, new_r11);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x341=IKsin(j22);
IkReal x342=IKcos(j22);
IkReal x343=((1.0)*x342);
evalcond[0]=(((sj21*x341))+new_r21);
evalcond[1]=(x341+(((-1.0)*new_r10)));
evalcond[2]=(x342+(((-1.0)*new_r11)));
evalcond[3]=(new_r20+(((-1.0)*sj21*x343)));
evalcond[4]=((((-1.0)*new_r00))+((cj21*x342)));
evalcond[5]=((((-1.0)*cj21*x341))+(((-1.0)*new_r01)));
evalcond[6]=(((new_r21*sj21))+x341+((cj21*new_r01)));
evalcond[7]=(((new_r20*sj21))+(((-1.0)*x343))+((cj21*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r00, new_r01);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x344=IKsin(j22);
IkReal x345=IKcos(j22);
IkReal x346=((1.0)*cj21);
IkReal x347=((1.0)*x345);
evalcond[0]=(((sj21*x344))+new_r21);
evalcond[1]=(x344+(((-1.0)*new_r00)));
evalcond[2]=(x345+(((-1.0)*new_r01)));
evalcond[3]=(new_r10+((cj21*x345)));
evalcond[4]=(new_r20+(((-1.0)*sj21*x347)));
evalcond[5]=((((-1.0)*x344*x346))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x346))+((new_r21*sj21))+x344);
evalcond[7]=((((-1.0)*new_r10*x346))+((new_r20*sj21))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x348=IKsin(j22);
IkReal x349=IKcos(j22);
IkReal x350=((1.0)*x349);
evalcond[0]=(x348+new_r00);
evalcond[1]=(x349+new_r01);
evalcond[2]=(((sj21*x348))+new_r21);
evalcond[3]=((((-1.0)*sj21*x350))+new_r20);
evalcond[4]=((((-1.0)*new_r10))+((cj21*x349)));
evalcond[5]=((((-1.0)*cj21*x348))+(((-1.0)*new_r11)));
evalcond[6]=(((new_r21*sj21))+x348+((cj21*new_r11)));
evalcond[7]=((((-1.0)*x350))+((new_r20*sj21))+((cj21*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j22eval[0]=IKabs(new_r22);
if( IKabs(j22eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j22]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j22array[2], cj22array[2], sj22array[2], tempj22array[1];
int numsolutions = 0;
for(int ij22 = 0; ij22 < numroots; ++ij22)
{
IkReal htj22 = zeror[ij22];
tempj22array[0]=((2.0)*(atan(htj22)));
for(int kj22 = 0; kj22 < 1; ++kj22)
{
j22array[numsolutions] = tempj22array[kj22];
if( j22array[numsolutions] > IKPI )
{
    j22array[numsolutions]-=IK2PI;
}
else if( j22array[numsolutions] < -IKPI )
{
    j22array[numsolutions]+=IK2PI;
}
sj22array[numsolutions] = IKsin(j22array[numsolutions]);
cj22array[numsolutions] = IKcos(j22array[numsolutions]);
numsolutions++;
}
}
bool j22valid[2]={true,true};
_nj22 = 2;
for(int ij22 = 0; ij22 < numsolutions; ++ij22)
    {
if( !j22valid[ij22] )
{
    continue;
}
    j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
htj22 = IKtan(j22/2);

_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < numsolutions; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x352=IKPowWithIntegerCheck(sj21,-1);
if(!x352.valid){
continue;
}
IkReal x351=x352.value;
CheckValue<IkReal> x353=IKPowWithIntegerCheck(cj21,-1);
if(!x353.valid){
continue;
}
CheckValue<IkReal> x354=IKPowWithIntegerCheck(sj20,-1);
if(!x354.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x351)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x351*(x353.value)*(x354.value)*(((((-1.0)*new_r10*sj21))+((cj20*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x351))+IKsqr((x351*(x353.value)*(x354.value)*(((((-1.0)*new_r10*sj21))+((cj20*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r21*x351), (x351*(x353.value)*(x354.value)*(((((-1.0)*new_r10*sj21))+((cj20*new_r21))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[12];
IkReal x355=IKsin(j22);
IkReal x356=IKcos(j22);
IkReal x357=(cj20*new_r00);
IkReal x358=((1.0)*sj20);
IkReal x359=((1.0)*cj21);
IkReal x360=(cj20*new_r01);
IkReal x361=(cj21*x356);
IkReal x362=(cj20*x355);
IkReal x363=((1.0)*x356);
evalcond[0]=(((sj21*x355))+new_r21);
evalcond[1]=((((-1.0)*sj21*x363))+new_r20);
evalcond[2]=(((cj20*new_r10))+x355+(((-1.0)*new_r00*x358)));
evalcond[3]=(((cj20*new_r11))+x356+(((-1.0)*new_r01*x358)));
evalcond[4]=(x357+x361+((new_r10*sj20)));
evalcond[5]=(x362+new_r10+((sj20*x361)));
evalcond[6]=(x360+((new_r11*sj20))+(((-1.0)*x355*x359)));
evalcond[7]=(((cj20*x361))+new_r00+(((-1.0)*x355*x358)));
evalcond[8]=((((-1.0)*cj21*x355*x358))+((cj20*x356))+new_r11);
evalcond[9]=((((-1.0)*x356*x358))+(((-1.0)*x359*x362))+new_r01);
evalcond[10]=(((new_r21*sj21))+x355+(((-1.0)*x359*x360))+(((-1.0)*cj21*new_r11*x358)));
evalcond[11]=((((-1.0)*cj21*new_r10*x358))+(((-1.0)*x357*x359))+(((-1.0)*x363))+((new_r20*sj21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x365=IKPowWithIntegerCheck(sj21,-1);
if(!x365.valid){
continue;
}
IkReal x364=x365.value;
CheckValue<IkReal> x366=IKPowWithIntegerCheck(cj20,-1);
if(!x366.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x364)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x364*(x366.value)*(((((-1.0)*new_r11*sj21))+(((-1.0)*cj21*new_r21*sj20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x364))+IKsqr((x364*(x366.value)*(((((-1.0)*new_r11*sj21))+(((-1.0)*cj21*new_r21*sj20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r21*x364), (x364*(x366.value)*(((((-1.0)*new_r11*sj21))+(((-1.0)*cj21*new_r21*sj20))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[12];
IkReal x367=IKsin(j22);
IkReal x368=IKcos(j22);
IkReal x369=(cj20*new_r00);
IkReal x370=((1.0)*sj20);
IkReal x371=((1.0)*cj21);
IkReal x372=(cj20*new_r01);
IkReal x373=(cj21*x368);
IkReal x374=(cj20*x367);
IkReal x375=((1.0)*x368);
evalcond[0]=(new_r21+((sj21*x367)));
evalcond[1]=((((-1.0)*sj21*x375))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x370))+((cj20*new_r10))+x367);
evalcond[3]=(((cj20*new_r11))+x368+(((-1.0)*new_r01*x370)));
evalcond[4]=(x373+x369+((new_r10*sj20)));
evalcond[5]=(x374+new_r10+((sj20*x373)));
evalcond[6]=((((-1.0)*x367*x371))+x372+((new_r11*sj20)));
evalcond[7]=((((-1.0)*x367*x370))+new_r00+((cj20*x373)));
evalcond[8]=((((-1.0)*cj21*x367*x370))+((cj20*x368))+new_r11);
evalcond[9]=((((-1.0)*x368*x370))+(((-1.0)*x371*x374))+new_r01);
evalcond[10]=(((new_r21*sj21))+(((-1.0)*cj21*new_r11*x370))+x367+(((-1.0)*x371*x372)));
evalcond[11]=((((-1.0)*x375))+((new_r20*sj21))+(((-1.0)*cj21*new_r10*x370))+(((-1.0)*x369*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x376 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x376.valid){
continue;
}
CheckValue<IkReal> x377=IKPowWithIntegerCheck(IKsign(sj21),-1);
if(!x377.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x376.value)+(((1.5707963267949)*(x377.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[12];
IkReal x378=IKsin(j22);
IkReal x379=IKcos(j22);
IkReal x380=(cj20*new_r00);
IkReal x381=((1.0)*sj20);
IkReal x382=((1.0)*cj21);
IkReal x383=(cj20*new_r01);
IkReal x384=(cj21*x379);
IkReal x385=(cj20*x378);
IkReal x386=((1.0)*x379);
evalcond[0]=(new_r21+((sj21*x378)));
evalcond[1]=(new_r20+(((-1.0)*sj21*x386)));
evalcond[2]=((((-1.0)*new_r00*x381))+((cj20*new_r10))+x378);
evalcond[3]=(((cj20*new_r11))+(((-1.0)*new_r01*x381))+x379);
evalcond[4]=(x384+x380+((new_r10*sj20)));
evalcond[5]=(((sj20*x384))+x385+new_r10);
evalcond[6]=(x383+((new_r11*sj20))+(((-1.0)*x378*x382)));
evalcond[7]=(((cj20*x384))+(((-1.0)*x378*x381))+new_r00);
evalcond[8]=((((-1.0)*cj21*x378*x381))+new_r11+((cj20*x379)));
evalcond[9]=((((-1.0)*x379*x381))+new_r01+(((-1.0)*x382*x385)));
evalcond[10]=(((new_r21*sj21))+(((-1.0)*cj21*new_r11*x381))+x378+(((-1.0)*x382*x383)));
evalcond[11]=((((-1.0)*x380*x382))+(((-1.0)*cj21*new_r10*x381))+((new_r20*sj21))+(((-1.0)*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
CheckValue<IkReal> x388=IKPowWithIntegerCheck(IKsign(sj21),-1);
if(!x388.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x387.value)+(((1.5707963267949)*(x388.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[2];
evalcond[0]=(((sj21*(IKsin(j22))))+new_r21);
evalcond[1]=((((-1.0)*sj21*(IKcos(j22))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j20eval[3];
j20eval[0]=sj21;
j20eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j20eval[2]=IKsign(sj21);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
j20eval[0]=new_r00;
j20eval[1]=sj21;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x389=((1.0)*new_r10);
IkReal x390=((new_r10*new_r10)+(new_r00*new_r00));
j20eval[0]=x390;
j20eval[1]=IKsign(x390);
j20eval[2]=((IKabs(((((-1.0)*cj22*new_r00))+(((-1.0)*sj22*x389)))))+(IKabs((((new_r00*sj22))+(((-1.0)*cj22*x389))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x391=((1.0)*cj22);
IkReal x392=(((new_r10*new_r11))+((new_r00*new_r01)));
j20eval[0]=x392;
j20eval[1]=((IKabs(((((-1.0)*new_r01*x391))+(((-1.0)*new_r10*x391)))))+(IKabs((((cj22*new_r00))+(((-1.0)*new_r11*x391))))));
j20eval[2]=IKsign(x392);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=1.0;
j21=0;
IkReal x393=((1.0)*new_r10);
IkReal x394=(((cj22*new_r00))+(((-1.0)*sj22*x393)));
j20eval[0]=x394;
j20eval[1]=((IKabs(((new_r10*new_r10)+(((-1.0)*(cj22*cj22))))))+(IKabs((((cj22*sj22))+(((-1.0)*new_r00*x393))))));
j20eval[2]=IKsign(x394);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x397 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x397)==0){
continue;
}
IkReal x395=pow(x397,-0.5);
IkReal x396=((-1.0)*x395);
CheckValue<IkReal> x398 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x398.valid){
continue;
}
IkReal gconst66=((-1.0)*(x398.value));
IkReal gconst67=(new_r00*x396);
IkReal gconst68=(new_r10*x396);
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x399.value)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[2];
CheckValue<IkReal> x403 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
IkReal x400=((-1.0)*(x403.value));
IkReal x401=x395;
IkReal x402=((-1.0)*x401);
sj21=0;
cj21=1.0;
j21=0;
sj22=gconst67;
cj22=gconst68;
j22=x400;
IkReal gconst66=x400;
IkReal gconst67=(new_r00*x402);
IkReal gconst68=(new_r10*x402);
IkReal x404=((new_r10*new_r10)+(new_r00*new_r00));
j20eval[0]=x404;
j20eval[1]=IKsign(x404);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
CheckValue<IkReal> x408 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x408.valid){
continue;
}
IkReal x405=((-1.0)*(x408.value));
IkReal x406=x395;
IkReal x407=((-1.0)*x406);
sj21=0;
cj21=1.0;
j21=0;
sj22=gconst67;
cj22=gconst68;
j22=x405;
IkReal gconst66=x405;
IkReal gconst67=(new_r00*x407);
IkReal gconst68=(new_r10*x407);
IkReal x409=new_r10*new_r10;
IkReal x410=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x411=x395;
IkReal x412=(new_r10*x411);
j20eval[0]=x410;
j20eval[1]=((IKabs(((((-1.0)*new_r00*x412))+((new_r11*x412)))))+(IKabs((((x409*x411))+((new_r01*x412))))));
j20eval[2]=IKsign(x410);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x416 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x416.valid){
continue;
}
IkReal x413=((-1.0)*(x416.value));
IkReal x414=x395;
IkReal x415=((-1.0)*x414);
sj21=0;
cj21=1.0;
j21=0;
sj22=gconst67;
cj22=gconst68;
j22=x413;
IkReal gconst66=x413;
IkReal gconst67=(new_r00*x415);
IkReal gconst68=(new_r10*x415);
IkReal x417=new_r10*new_r10;
IkReal x418=new_r00*new_r00;
CheckValue<IkReal> x425=IKPowWithIntegerCheck((x417+x418),-1);
if(!x425.valid){
continue;
}
IkReal x419=x425.value;
IkReal x420=(x417*x419);
CheckValue<IkReal> x426=IKPowWithIntegerCheck(((((-1.0)*x417))+(((-1.0)*x418))),-1);
if(!x426.valid){
continue;
}
IkReal x421=x426.value;
IkReal x422=((1.0)*x421);
IkReal x423=(new_r00*x422);
IkReal x424=(new_r10*x422);
j20eval[0]=((IKabs(((((-1.0)*new_r10*x423*(new_r00*new_r00)))+(((-1.0)*x423*(new_r10*new_r10*new_r10)))+(((-1.0)*new_r10*x423)))))+(IKabs(((((-1.0)*x420))+((x418*x420))+((x419*(x418*x418)))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x427=IKPowWithIntegerCheck(IKsign((((gconst68*new_r10))+((gconst67*new_r00)))),-1);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst68*gconst68)))+(new_r00*new_r00))),IkReal(((((-1.0)*new_r00*new_r10))+(((-1.0)*gconst67*gconst68)))),IKFAST_ATAN2_MAGTHRESH);
if(!x428.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x427.value)))+(x428.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x429=IKcos(j20);
IkReal x430=IKsin(j20);
IkReal x431=((1.0)*gconst67);
IkReal x432=(gconst68*x429);
IkReal x433=((1.0)*x430);
IkReal x434=(x430*x431);
evalcond[0]=(gconst68+((new_r10*x430))+((new_r00*x429)));
evalcond[1]=(((gconst67*x429))+((gconst68*x430))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x433))+gconst67+((new_r10*x429)));
evalcond[3]=((((-1.0)*new_r01*x433))+gconst68+((new_r11*x429)));
evalcond[4]=((((-1.0)*x434))+x432+new_r00);
evalcond[5]=((((-1.0)*x434))+x432+new_r11);
evalcond[6]=((((-1.0)*x431))+((new_r11*x430))+((new_r01*x429)));
evalcond[7]=((((-1.0)*x429*x431))+(((-1.0)*gconst68*x433))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x435=((1.0)*gconst68);
CheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal((((gconst68*new_r00))+(((-1.0)*new_r11*x435)))),IkReal(((((-1.0)*new_r01*x435))+(((-1.0)*new_r10*x435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x436.value)))+(x437.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x438=IKcos(j20);
IkReal x439=IKsin(j20);
IkReal x440=((1.0)*gconst67);
IkReal x441=(gconst68*x438);
IkReal x442=((1.0)*x439);
IkReal x443=(x439*x440);
evalcond[0]=(((new_r00*x438))+gconst68+((new_r10*x439)));
evalcond[1]=(((gconst68*x439))+new_r10+((gconst67*x438)));
evalcond[2]=((((-1.0)*new_r00*x442))+gconst67+((new_r10*x438)));
evalcond[3]=((((-1.0)*new_r01*x442))+gconst68+((new_r11*x438)));
evalcond[4]=((((-1.0)*x443))+x441+new_r00);
evalcond[5]=((((-1.0)*x443))+x441+new_r11);
evalcond[6]=((((-1.0)*x440))+((new_r01*x438))+((new_r11*x439)));
evalcond[7]=((((-1.0)*x438*x440))+(((-1.0)*gconst68*x442))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x444=((1.0)*new_r10);
CheckValue<IkReal> x445=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x445.valid){
continue;
}
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal((((gconst67*new_r00))+(((-1.0)*gconst68*x444)))),IkReal(((((-1.0)*gconst68*new_r00))+(((-1.0)*gconst67*x444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x445.value)))+(x446.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x447=IKcos(j20);
IkReal x448=IKsin(j20);
IkReal x449=((1.0)*gconst67);
IkReal x450=(gconst68*x447);
IkReal x451=((1.0)*x448);
IkReal x452=(x448*x449);
evalcond[0]=(((new_r00*x447))+gconst68+((new_r10*x448)));
evalcond[1]=(((gconst68*x448))+new_r10+((gconst67*x447)));
evalcond[2]=(gconst67+(((-1.0)*new_r00*x451))+((new_r10*x447)));
evalcond[3]=((((-1.0)*new_r01*x451))+gconst68+((new_r11*x447)));
evalcond[4]=((((-1.0)*x452))+x450+new_r00);
evalcond[5]=((((-1.0)*x452))+x450+new_r11);
evalcond[6]=((((-1.0)*x449))+((new_r01*x447))+((new_r11*x448)));
evalcond[7]=((((-1.0)*gconst68*x451))+(((-1.0)*x447*x449))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x455 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x455)==0){
continue;
}
IkReal x453=pow(x455,-0.5);
IkReal x454=((1.0)*x453);
CheckValue<IkReal> x456 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x456.value))));
IkReal gconst70=(new_r00*x454);
IkReal gconst71=(new_r10*x454);
CheckValue<IkReal> x457 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x457.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x457.value)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[2];
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
IkReal x458=((1.0)*(x461.value));
IkReal x459=x453;
IkReal x460=((1.0)*x459);
sj21=0;
cj21=1.0;
j21=0;
sj22=gconst70;
cj22=gconst71;
j22=((3.14159265)+(((-1.0)*x458)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x458)));
IkReal gconst70=(new_r00*x460);
IkReal gconst71=(new_r10*x460);
IkReal x462=((new_r10*new_r10)+(new_r00*new_r00));
j20eval[0]=x462;
j20eval[1]=IKsign(x462);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
IkReal x463=((1.0)*(x466.value));
IkReal x464=x453;
IkReal x465=((1.0)*x464);
sj21=0;
cj21=1.0;
j21=0;
sj22=gconst70;
cj22=gconst71;
j22=((3.14159265)+(((-1.0)*x463)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x463)));
IkReal gconst70=(new_r00*x465);
IkReal gconst71=(new_r10*x465);
IkReal x467=new_r10*new_r10;
IkReal x468=(new_r10*new_r11);
IkReal x469=(((new_r00*new_r01))+x468);
IkReal x470=x453;
IkReal x471=((1.0)*x470);
j20eval[0]=x469;
j20eval[1]=((IKabs(((((-1.0)*x468*x471))+((new_r00*new_r10*x470)))))+(IKabs(((((-1.0)*x467*x471))+(((-1.0)*new_r01*new_r10*x471))))));
j20eval[2]=IKsign(x469);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x475 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
IkReal x472=((1.0)*(x475.value));
IkReal x473=x453;
IkReal x474=((1.0)*x473);
sj21=0;
cj21=1.0;
j21=0;
sj22=gconst70;
cj22=gconst71;
j22=((3.14159265)+(((-1.0)*x472)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x472)));
IkReal gconst70=(new_r00*x474);
IkReal gconst71=(new_r10*x474);
IkReal x476=new_r10*new_r10;
IkReal x477=new_r00*new_r00;
CheckValue<IkReal> x484=IKPowWithIntegerCheck((x476+x477),-1);
if(!x484.valid){
continue;
}
IkReal x478=x484.value;
IkReal x479=(x476*x478);
CheckValue<IkReal> x485=IKPowWithIntegerCheck(((((-1.0)*x476))+(((-1.0)*x477))),-1);
if(!x485.valid){
continue;
}
IkReal x480=x485.value;
IkReal x481=((1.0)*x480);
IkReal x482=(new_r00*x481);
IkReal x483=(new_r10*x481);
j20eval[0]=((IKabs(((((-1.0)*new_r10*x482))+(((-1.0)*new_r10*x482*(new_r00*new_r00)))+(((-1.0)*x482*(new_r10*new_r10*new_r10))))))+(IKabs((((x478*(x477*x477)))+(((-1.0)*x479))+((x477*x479))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst71*gconst71)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst70*gconst71))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
CheckValue<IkReal> x487=IKPowWithIntegerCheck(IKsign((((gconst70*new_r00))+((gconst71*new_r10)))),-1);
if(!x487.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x486.value)+(((1.5707963267949)*(x487.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x488=IKsin(j20);
IkReal x489=IKcos(j20);
IkReal x490=(gconst71*x489);
IkReal x491=((1.0)*x488);
IkReal x492=(gconst70*x489);
IkReal x493=(gconst70*x491);
evalcond[0]=(gconst71+((new_r10*x488))+((new_r00*x489)));
evalcond[1]=(x492+new_r10+((gconst71*x488)));
evalcond[2]=((((-1.0)*new_r00*x491))+gconst70+((new_r10*x489)));
evalcond[3]=((((-1.0)*new_r01*x491))+((new_r11*x489))+gconst71);
evalcond[4]=((((-1.0)*x493))+x490+new_r00);
evalcond[5]=((((-1.0)*x493))+x490+new_r11);
evalcond[6]=((((-1.0)*gconst70))+((new_r11*x488))+((new_r01*x489)));
evalcond[7]=((((-1.0)*x492))+new_r01+(((-1.0)*gconst71*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x494=((1.0)*gconst71);
CheckValue<IkReal> x495 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x494))+((gconst71*new_r00)))),IkReal(((((-1.0)*new_r01*x494))+(((-1.0)*new_r10*x494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x496.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x495.value)+(((1.5707963267949)*(x496.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x497=IKsin(j20);
IkReal x498=IKcos(j20);
IkReal x499=(gconst71*x498);
IkReal x500=((1.0)*x497);
IkReal x501=(gconst70*x498);
IkReal x502=(gconst70*x500);
evalcond[0]=(gconst71+((new_r10*x497))+((new_r00*x498)));
evalcond[1]=(x501+new_r10+((gconst71*x497)));
evalcond[2]=((((-1.0)*new_r00*x500))+gconst70+((new_r10*x498)));
evalcond[3]=((((-1.0)*new_r01*x500))+gconst71+((new_r11*x498)));
evalcond[4]=((((-1.0)*x502))+x499+new_r00);
evalcond[5]=((((-1.0)*x502))+x499+new_r11);
evalcond[6]=((((-1.0)*gconst70))+((new_r11*x497))+((new_r01*x498)));
evalcond[7]=(new_r01+(((-1.0)*x501))+(((-1.0)*gconst71*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x503=((1.0)*new_r10);
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal((((gconst70*new_r00))+(((-1.0)*gconst71*x503)))),IkReal(((((-1.0)*gconst70*x503))+(((-1.0)*gconst71*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
CheckValue<IkReal> x505=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x505.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x504.value)+(((1.5707963267949)*(x505.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x506=IKsin(j20);
IkReal x507=IKcos(j20);
IkReal x508=(gconst71*x507);
IkReal x509=((1.0)*x506);
IkReal x510=(gconst70*x507);
IkReal x511=(gconst70*x509);
evalcond[0]=(gconst71+((new_r10*x506))+((new_r00*x507)));
evalcond[1]=(x510+((gconst71*x506))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x509))+gconst70+((new_r10*x507)));
evalcond[3]=((((-1.0)*new_r01*x509))+gconst71+((new_r11*x507)));
evalcond[4]=(x508+new_r00+(((-1.0)*x511)));
evalcond[5]=(x508+new_r11+(((-1.0)*x511)));
evalcond[6]=((((-1.0)*gconst70))+((new_r11*x506))+((new_r01*x507)));
evalcond[7]=((((-1.0)*x510))+new_r01+(((-1.0)*gconst71*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x512=IKcos(j20);
IkReal x513=IKsin(j20);
IkReal x514=((1.0)*x513);
evalcond[0]=(x512+new_r10);
evalcond[1]=(new_r00+(((-1.0)*x514)));
evalcond[2]=(new_r11+(((-1.0)*x514)));
evalcond[3]=((((-1.0)*x512))+new_r01);
evalcond[4]=(((new_r00*x512))+((new_r10*x513)));
evalcond[5]=(((new_r11*x512))+(((-1.0)*new_r01*x514)));
evalcond[6]=((-1.0)+((new_r01*x512))+((new_r11*x513)));
evalcond[7]=((1.0)+((new_r10*x512))+(((-1.0)*new_r00*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x515=IKsin(j20);
IkReal x516=IKcos(j20);
IkReal x517=((1.0)*x515);
evalcond[0]=(x515+new_r00);
evalcond[1]=(x515+new_r11);
evalcond[2]=(x516+new_r01);
evalcond[3]=((((-1.0)*x516))+new_r10);
evalcond[4]=(((new_r00*x516))+((new_r10*x515)));
evalcond[5]=(((new_r11*x516))+(((-1.0)*new_r01*x517)));
evalcond[6]=((1.0)+((new_r01*x516))+((new_r11*x515)));
evalcond[7]=((-1.0)+((new_r10*x516))+(((-1.0)*new_r00*x517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
sj21=0;
cj21=1.0;
j21=0;
new_r10=0;
new_r00=0;
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
IkReal x518=x519.value;
j20array[0]=((-1.0)*x518);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x518)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j20))))+((new_r11*(IKcos(j20)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
sj21=0;
cj21=1.0;
j21=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x521 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x521.valid){
continue;
}
IkReal x520=x521.value;
j20array[0]=((-1.0)*x520);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x520)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j20))))+((new_r11*(IKcos(j20)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x522=((1.0)*new_r10);
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal((((cj22*sj22))+(((-1.0)*new_r00*x522)))),IkReal(((new_r10*new_r10)+(((-1.0)*(cj22*cj22))))),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
CheckValue<IkReal> x524=IKPowWithIntegerCheck(IKsign((((cj22*new_r00))+(((-1.0)*sj22*x522)))),-1);
if(!x524.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x523.value)+(((1.5707963267949)*(x524.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x525=IKcos(j20);
IkReal x526=IKsin(j20);
IkReal x527=((1.0)*sj22);
IkReal x528=(cj22*x525);
IkReal x529=((1.0)*x526);
IkReal x530=(x526*x527);
evalcond[0]=(((new_r10*x526))+cj22+((new_r00*x525)));
evalcond[1]=(((sj22*x525))+((cj22*x526))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x529))+((new_r10*x525))+sj22);
evalcond[3]=(((new_r11*x525))+(((-1.0)*new_r01*x529))+cj22);
evalcond[4]=((((-1.0)*x530))+x528+new_r00);
evalcond[5]=((((-1.0)*x530))+x528+new_r11);
evalcond[6]=(((new_r01*x525))+((new_r11*x526))+(((-1.0)*x527)));
evalcond[7]=((((-1.0)*x525*x527))+(((-1.0)*cj22*x529))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x531=((1.0)*cj22);
CheckValue<IkReal> x532 = IKatan2WithCheck(IkReal((((cj22*new_r00))+(((-1.0)*new_r11*x531)))),IkReal(((((-1.0)*new_r10*x531))+(((-1.0)*new_r01*x531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x532.valid){
continue;
}
CheckValue<IkReal> x533=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x533.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x532.value)+(((1.5707963267949)*(x533.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x534=IKcos(j20);
IkReal x535=IKsin(j20);
IkReal x536=((1.0)*sj22);
IkReal x537=(cj22*x534);
IkReal x538=((1.0)*x535);
IkReal x539=(x535*x536);
evalcond[0]=(((new_r10*x535))+cj22+((new_r00*x534)));
evalcond[1]=(((sj22*x534))+((cj22*x535))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x538))+((new_r10*x534))+sj22);
evalcond[3]=(((new_r11*x534))+cj22+(((-1.0)*new_r01*x538)));
evalcond[4]=((((-1.0)*x539))+x537+new_r00);
evalcond[5]=((((-1.0)*x539))+x537+new_r11);
evalcond[6]=(((new_r01*x534))+((new_r11*x535))+(((-1.0)*x536)));
evalcond[7]=((((-1.0)*x534*x536))+(((-1.0)*cj22*x538))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x540=((1.0)*new_r10);
CheckValue<IkReal> x541=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x541.valid){
continue;
}
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal((((new_r00*sj22))+(((-1.0)*cj22*x540)))),IkReal(((((-1.0)*cj22*new_r00))+(((-1.0)*sj22*x540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x541.value)))+(x542.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x543=IKcos(j20);
IkReal x544=IKsin(j20);
IkReal x545=((1.0)*sj22);
IkReal x546=(cj22*x543);
IkReal x547=((1.0)*x544);
IkReal x548=(x544*x545);
evalcond[0]=(((new_r00*x543))+((new_r10*x544))+cj22);
evalcond[1]=(((sj22*x543))+((cj22*x544))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x547))+((new_r10*x543))+sj22);
evalcond[3]=(((new_r11*x543))+(((-1.0)*new_r01*x547))+cj22);
evalcond[4]=((((-1.0)*x548))+x546+new_r00);
evalcond[5]=((((-1.0)*x548))+x546+new_r11);
evalcond[6]=(((new_r11*x544))+(((-1.0)*x545))+((new_r01*x543)));
evalcond[7]=((((-1.0)*cj22*x547))+new_r01+(((-1.0)*x543*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x549=((1.0)*sj22);
IkReal x550=(((new_r10*new_r11))+((new_r00*new_r01)));
j20eval[0]=x550;
j20eval[1]=((IKabs((((new_r01*sj22))+(((-1.0)*new_r10*x549)))))+(IKabs(((((-1.0)*new_r00*x549))+(((-1.0)*new_r11*x549))))));
j20eval[2]=IKsign(x550);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x551=((1.0)*sj22);
IkReal x552=((new_r01*new_r01)+(new_r11*new_r11));
j20eval[0]=x552;
j20eval[1]=IKsign(x552);
j20eval[2]=((IKabs(((((-1.0)*cj22*new_r11))+(((-1.0)*new_r01*x551)))))+(IKabs((((cj22*new_r01))+(((-1.0)*new_r11*x551))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
IkReal x553=(((cj22*new_r01))+((new_r11*sj22)));
j20eval[0]=x553;
j20eval[1]=((IKabs(((-1.0)+((new_r01*new_r10))+(cj22*cj22))))+(IKabs(((((-1.0)*cj22*sj22))+(((-1.0)*new_r10*new_r11))))));
j20eval[2]=IKsign(x553);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x555 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x555)==0){
continue;
}
IkReal x554=pow(x555,-0.5);
CheckValue<IkReal> x556 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
IkReal gconst72=((-1.0)*(x556.value));
IkReal gconst73=((-1.0)*new_r01*x554);
IkReal gconst74=(new_r11*x554);
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j22+(x557.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
CheckValue<IkReal> x560 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x560.valid){
continue;
}
IkReal x558=((-1.0)*(x560.value));
IkReal x559=x554;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x558;
IkReal gconst72=x558;
IkReal gconst73=((-1.0)*new_r01*x559);
IkReal gconst74=(new_r11*x559);
IkReal x561=new_r01*new_r01;
IkReal x562=(new_r00*new_r01);
IkReal x563=(((new_r10*new_r11))+x562);
IkReal x564=x554;
IkReal x565=(new_r01*x564);
j20eval[0]=x563;
j20eval[1]=IKsign(x563);
j20eval[2]=((IKabs((((x562*x564))+((new_r11*x565)))))+(IKabs(((((-1.0)*x561*x564))+((new_r10*x565))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
CheckValue<IkReal> x568 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
IkReal x566=((-1.0)*(x568.value));
IkReal x567=x554;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x566;
IkReal gconst72=x566;
IkReal gconst73=((-1.0)*new_r01*x567);
IkReal gconst74=(new_r11*x567);
IkReal x569=((new_r01*new_r01)+(new_r11*new_r11));
j20eval[0]=x569;
j20eval[1]=IKsign(x569);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
IkReal x570=((-1.0)*(x572.value));
IkReal x571=x554;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x570;
IkReal gconst72=x570;
IkReal gconst73=((-1.0)*new_r01*x571);
IkReal gconst74=(new_r11*x571);
IkReal x573=new_r01*new_r01;
IkReal x574=new_r11*new_r11;
IkReal x575=((1.0)*x573);
CheckValue<IkReal> x581=IKPowWithIntegerCheck((x574+x573),-1);
if(!x581.valid){
continue;
}
IkReal x576=x581.value;
CheckValue<IkReal> x582=IKPowWithIntegerCheck(((((-1.0)*x574))+(((-1.0)*x575))),-1);
if(!x582.valid){
continue;
}
IkReal x577=x582.value;
IkReal x578=((1.0)*x577);
IkReal x579=(new_r11*x578);
IkReal x580=(new_r01*x578);
j20eval[0]=((IKabs(((((-1.0)*new_r01*x579*(new_r11*new_r11)))+(((-1.0)*x579*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x579)))))+(IKabs((((x573*x574*x576))+(((-1.0)*x575*x576))+((x576*(x574*x574)))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
IkReal x583=((-1.0)*(x584.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x583;
new_r11=0;
new_r00=0;
IkReal gconst72=x583;
IkReal x585 = new_r01*new_r01;
if(IKabs(x585)==0){
continue;
}
IkReal gconst73=((-1.0)*new_r01*(pow(x585,-0.5)));
IkReal gconst74=0;
j20eval[0]=new_r10;
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x586=IKPowWithIntegerCheck(gconst73,-1);
if(!x586.valid){
continue;
}
cj20array[0]=((-1.0)*new_r10*(x586.value));
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x587=IKsin(j20);
IkReal x588=IKcos(j20);
IkReal x589=((-1.0)*x587);
evalcond[0]=(new_r10*x587);
evalcond[1]=(new_r01*x589);
evalcond[2]=(gconst73*x589);
evalcond[3]=(gconst73+((new_r10*x588)));
evalcond[4]=(gconst73+((new_r01*x588)));
evalcond[5]=(((gconst73*x588))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x590=IKPowWithIntegerCheck(new_r10,-1);
if(!x590.valid){
continue;
}
cj20array[0]=((-1.0)*gconst73*(x590.value));
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x591=IKsin(j20);
IkReal x592=IKcos(j20);
IkReal x593=(gconst73*x592);
IkReal x594=((-1.0)*x591);
evalcond[0]=(new_r10*x591);
evalcond[1]=(new_r01*x594);
evalcond[2]=(gconst73*x594);
evalcond[3]=(x593+new_r10);
evalcond[4]=(gconst73+((new_r01*x592)));
evalcond[5]=(x593+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst73;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
CheckValue<IkReal> x596 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x596.valid){
continue;
}
IkReal x595=((-1.0)*(x596.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x595;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst72=x595;
IkReal gconst73=((-1.0)*new_r01);
IkReal gconst74=new_r11;
j20eval[0]=-1.0;
j20eval[1]=-1.0;
j20eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
CheckValue<IkReal> x598 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x598.valid){
continue;
}
IkReal x597=((-1.0)*(x598.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x597;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst72=x597;
IkReal gconst73=((-1.0)*new_r01);
IkReal gconst74=new_r11;
j20eval[0]=-1.0;
j20eval[1]=-1.0;
j20eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
CheckValue<IkReal> x600 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x600.valid){
continue;
}
IkReal x599=((-1.0)*(x600.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x599;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst72=x599;
IkReal gconst73=((-1.0)*new_r01);
IkReal gconst74=new_r11;
j20eval[0]=1.0;
j20eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j20eval[2]=1.0;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x601=((1.0)*gconst73);
CheckValue<IkReal> x602=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x602.valid){
continue;
}
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal((((gconst74*new_r01))+(((-1.0)*new_r11*x601)))),IkReal(((((-1.0)*gconst74*new_r11))+(((-1.0)*new_r01*x601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x602.value)))+(x603.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x604=IKsin(j20);
IkReal x605=IKcos(j20);
IkReal x606=(gconst73*x605);
IkReal x607=((1.0)*x604);
IkReal x608=(gconst74*x605);
IkReal x609=(gconst74*x607);
evalcond[0]=(x606+(((-1.0)*x609)));
evalcond[1]=(gconst73+((new_r11*x604))+((new_r01*x605)));
evalcond[2]=(((gconst73*x604))+x608+new_r11);
evalcond[3]=(gconst74+((new_r11*x605))+(((-1.0)*new_r01*x607)));
evalcond[4]=((((-1.0)*x608))+(((-1.0)*gconst73*x607)));
evalcond[5]=(x606+(((-1.0)*x609))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x610=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst73*gconst73)))+(((-1.0)*(gconst74*gconst74))))),-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal((gconst73*new_r11)),IkReal((gconst74*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x610.value)))+(x611.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x612=IKsin(j20);
IkReal x613=IKcos(j20);
IkReal x614=(gconst73*x613);
IkReal x615=((1.0)*x612);
IkReal x616=(gconst74*x613);
IkReal x617=(gconst74*x615);
evalcond[0]=((((-1.0)*x617))+x614);
evalcond[1]=(gconst73+((new_r11*x612))+((new_r01*x613)));
evalcond[2]=(x616+new_r11+((gconst73*x612)));
evalcond[3]=(gconst74+((new_r11*x613))+(((-1.0)*new_r01*x615)));
evalcond[4]=((((-1.0)*x616))+(((-1.0)*gconst73*x615)));
evalcond[5]=((((-1.0)*x617))+x614+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x618=IKPowWithIntegerCheck(IKsign((((gconst73*new_r01))+(((-1.0)*gconst74*new_r11)))),-1);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal((gconst73*gconst74)),IkReal(gconst74*gconst74),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x618.value)))+(x619.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x620=IKsin(j20);
IkReal x621=IKcos(j20);
IkReal x622=(gconst73*x621);
IkReal x623=((1.0)*x620);
IkReal x624=(gconst74*x621);
IkReal x625=(gconst74*x623);
evalcond[0]=((((-1.0)*x625))+x622);
evalcond[1]=(gconst73+((new_r01*x621))+((new_r11*x620)));
evalcond[2]=(x624+new_r11+((gconst73*x620)));
evalcond[3]=((((-1.0)*new_r01*x623))+gconst74+((new_r11*x621)));
evalcond[4]=((((-1.0)*gconst73*x623))+(((-1.0)*x624)));
evalcond[5]=((((-1.0)*x625))+x622+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x626=IKPowWithIntegerCheck(gconst74,-1);
if(!x626.valid){
continue;
}
cj20array[0]=(new_r00*(x626.value));
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x627=IKsin(j20);
IkReal x628=IKcos(j20);
IkReal x629=((-1.0)*x627);
evalcond[0]=(new_r11*x627);
evalcond[1]=(new_r00*x629);
evalcond[2]=(gconst74*x629);
evalcond[3]=(gconst74+((new_r11*x628)));
evalcond[4]=(((gconst74*x628))+new_r11);
evalcond[5]=((((-1.0)*gconst74))+((new_r00*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
IkReal x630=((-1.0)*(x631.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x630;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst72=x630;
IkReal gconst73=0;
IkReal x632 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x632)==0){
continue;
}
IkReal gconst74=(new_r11*(pow(x632,-0.5)));
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
IkReal x633=((-1.0)*(x634.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x633;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst72=x633;
IkReal gconst73=0;
IkReal x635 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x635)==0){
continue;
}
IkReal gconst74=(new_r11*(pow(x635,-0.5)));
j20eval[0]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
IkReal x636=((-1.0)*(x637.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x636;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst72=x636;
IkReal gconst73=0;
IkReal x638 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x638)==0){
continue;
}
IkReal gconst74=(new_r11*(pow(x638,-0.5)));
j20eval[0]=new_r10;
j20eval[1]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(new_r10,-1);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(new_r11,-1);
if(!x640.valid){
continue;
}
if( IKabs((gconst74*(x639.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst74*(x640.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst74*(x639.value)))+IKsqr(((-1.0)*gconst74*(x640.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((gconst74*(x639.value)), ((-1.0)*gconst74*(x640.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x641=IKcos(j20);
IkReal x642=IKsin(j20);
IkReal x643=((1.0)*gconst74);
IkReal x644=(gconst74*x641);
evalcond[0]=(new_r10*x641);
evalcond[1]=(new_r11*x642);
evalcond[2]=((-1.0)*x644);
evalcond[3]=((-1.0)*gconst74*x642);
evalcond[4]=(gconst74+((new_r11*x641)));
evalcond[5]=(x644+new_r11);
evalcond[6]=((((-1.0)*x642*x643))+new_r10);
evalcond[7]=((((-1.0)*x643))+((new_r10*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x645=IKPowWithIntegerCheck(gconst74,-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646=IKPowWithIntegerCheck(new_r11,-1);
if(!x646.valid){
continue;
}
if( IKabs((new_r10*(x645.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst74*(x646.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x645.value)))+IKsqr(((-1.0)*gconst74*(x646.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((new_r10*(x645.value)), ((-1.0)*gconst74*(x646.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x647=IKcos(j20);
IkReal x648=IKsin(j20);
IkReal x649=((1.0)*gconst74);
IkReal x650=(gconst74*x647);
evalcond[0]=(new_r10*x647);
evalcond[1]=(new_r11*x648);
evalcond[2]=((-1.0)*x650);
evalcond[3]=((-1.0)*gconst74*x648);
evalcond[4]=(gconst74+((new_r11*x647)));
evalcond[5]=(x650+new_r11);
evalcond[6]=((((-1.0)*x648*x649))+new_r10);
evalcond[7]=((((-1.0)*x649))+((new_r10*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x651 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(IKsign(gconst74),-1);
if(!x652.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x651.value)+(((1.5707963267949)*(x652.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x653=IKcos(j20);
IkReal x654=IKsin(j20);
IkReal x655=((1.0)*gconst74);
IkReal x656=(gconst74*x653);
evalcond[0]=(new_r10*x653);
evalcond[1]=(new_r11*x654);
evalcond[2]=((-1.0)*x656);
evalcond[3]=((-1.0)*gconst74*x654);
evalcond[4]=(gconst74+((new_r11*x653)));
evalcond[5]=(x656+new_r11);
evalcond[6]=(new_r10+(((-1.0)*x654*x655)));
evalcond[7]=((((-1.0)*x655))+((new_r10*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
CheckValue<IkReal> x658 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x658.valid){
continue;
}
IkReal x657=((-1.0)*(x658.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x657;
new_r01=0;
IkReal gconst72=x657;
IkReal gconst73=0;
IkReal x659 = new_r11*new_r11;
if(IKabs(x659)==0){
continue;
}
IkReal gconst74=(new_r11*(pow(x659,-0.5)));
j20eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
IkReal x660=((-1.0)*(x661.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x660;
new_r01=0;
IkReal gconst72=x660;
IkReal gconst73=0;
IkReal x662 = new_r11*new_r11;
if(IKabs(x662)==0){
continue;
}
IkReal gconst74=(new_r11*(pow(x662,-0.5)));
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x664 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
IkReal x663=((-1.0)*(x664.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst73;
cj22=gconst74;
j22=x663;
new_r01=0;
IkReal gconst72=x663;
IkReal gconst73=0;
IkReal x665 = new_r11*new_r11;
if(IKabs(x665)==0){
continue;
}
IkReal gconst74=(new_r11*(pow(x665,-0.5)));
j20eval[0]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x666=IKPowWithIntegerCheck(gconst74,-1);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667=IKPowWithIntegerCheck(new_r11,-1);
if(!x667.valid){
continue;
}
if( IKabs((new_r10*(x666.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst74*(x667.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x666.value)))+IKsqr(((-1.0)*gconst74*(x667.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((new_r10*(x666.value)), ((-1.0)*gconst74*(x667.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x668=IKsin(j20);
IkReal x669=IKcos(j20);
IkReal x670=((1.0)*gconst74);
evalcond[0]=(new_r11*x668);
evalcond[1]=((-1.0)*gconst74*x668);
evalcond[2]=(gconst74+((new_r11*x669)));
evalcond[3]=(new_r11+((gconst74*x669)));
evalcond[4]=((((-1.0)*x668*x670))+new_r10);
evalcond[5]=((((-1.0)*x669*x670))+new_r00);
evalcond[6]=(((new_r10*x669))+(((-1.0)*new_r00*x668)));
evalcond[7]=(((new_r10*x668))+((new_r00*x669))+(((-1.0)*x670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672=IKPowWithIntegerCheck(IKsign(gconst74),-1);
if(!x672.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x671.value)+(((1.5707963267949)*(x672.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x673=IKsin(j20);
IkReal x674=IKcos(j20);
IkReal x675=((1.0)*gconst74);
evalcond[0]=(new_r11*x673);
evalcond[1]=((-1.0)*gconst74*x673);
evalcond[2]=(((new_r11*x674))+gconst74);
evalcond[3]=(new_r11+((gconst74*x674)));
evalcond[4]=(new_r10+(((-1.0)*x673*x675)));
evalcond[5]=((((-1.0)*x674*x675))+new_r00);
evalcond[6]=(((new_r10*x674))+(((-1.0)*new_r00*x673)));
evalcond[7]=(((new_r00*x674))+((new_r10*x673))+(((-1.0)*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x676=IKPowWithIntegerCheck(IKsign(gconst74),-1);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x676.value)))+(x677.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x678=IKsin(j20);
IkReal x679=IKcos(j20);
IkReal x680=((1.0)*gconst74);
evalcond[0]=(new_r11*x678);
evalcond[1]=((-1.0)*gconst74*x678);
evalcond[2]=(((new_r11*x679))+gconst74);
evalcond[3]=(new_r11+((gconst74*x679)));
evalcond[4]=((((-1.0)*x678*x680))+new_r10);
evalcond[5]=((((-1.0)*x679*x680))+new_r00);
evalcond[6]=(((new_r10*x679))+(((-1.0)*new_r00*x678)));
evalcond[7]=(((new_r00*x679))+((new_r10*x678))+(((-1.0)*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x681=((1.0)*new_r11);
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x681))+((gconst73*gconst74)))),IkReal(((((-1.0)*(gconst73*gconst73)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
CheckValue<IkReal> x683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst74*x681))+((gconst73*new_r01)))),-1);
if(!x683.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x682.value)+(((1.5707963267949)*(x683.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x684=IKsin(j20);
IkReal x685=IKcos(j20);
IkReal x686=((1.0)*gconst74);
IkReal x687=(gconst73*x685);
IkReal x688=((1.0)*x684);
IkReal x689=(x684*x686);
evalcond[0]=(gconst73+((new_r01*x685))+((new_r11*x684)));
evalcond[1]=(((gconst74*x685))+((gconst73*x684))+new_r11);
evalcond[2]=(gconst73+((new_r10*x685))+(((-1.0)*new_r00*x688)));
evalcond[3]=((((-1.0)*new_r01*x688))+gconst74+((new_r11*x685)));
evalcond[4]=((((-1.0)*x689))+x687+new_r10);
evalcond[5]=((((-1.0)*x689))+x687+new_r01);
evalcond[6]=((((-1.0)*x686))+((new_r00*x685))+((new_r10*x684)));
evalcond[7]=((((-1.0)*x685*x686))+(((-1.0)*gconst73*x688))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x690=((1.0)*gconst73);
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal((((gconst74*new_r01))+(((-1.0)*new_r11*x690)))),IkReal(((((-1.0)*new_r01*x690))+(((-1.0)*gconst74*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x692.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x691.value)+(((1.5707963267949)*(x692.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x693=IKsin(j20);
IkReal x694=IKcos(j20);
IkReal x695=((1.0)*gconst74);
IkReal x696=(gconst73*x694);
IkReal x697=((1.0)*x693);
IkReal x698=(x693*x695);
evalcond[0]=(gconst73+((new_r11*x693))+((new_r01*x694)));
evalcond[1]=(((gconst74*x694))+((gconst73*x693))+new_r11);
evalcond[2]=(gconst73+((new_r10*x694))+(((-1.0)*new_r00*x697)));
evalcond[3]=((((-1.0)*new_r01*x697))+gconst74+((new_r11*x694)));
evalcond[4]=(x696+(((-1.0)*x698))+new_r10);
evalcond[5]=(x696+(((-1.0)*x698))+new_r01);
evalcond[6]=(((new_r10*x693))+(((-1.0)*x695))+((new_r00*x694)));
evalcond[7]=((((-1.0)*gconst73*x697))+(((-1.0)*x694*x695))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x699=((1.0)*gconst73);
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal((((gconst73*new_r01))+(((-1.0)*new_r10*x699)))),IkReal(((((-1.0)*new_r00*x699))+(((-1.0)*new_r11*x699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
CheckValue<IkReal> x701=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x701.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x700.value)+(((1.5707963267949)*(x701.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x702=IKsin(j20);
IkReal x703=IKcos(j20);
IkReal x704=((1.0)*gconst74);
IkReal x705=(gconst73*x703);
IkReal x706=((1.0)*x702);
IkReal x707=(x702*x704);
evalcond[0]=(((new_r01*x703))+gconst73+((new_r11*x702)));
evalcond[1]=(((gconst73*x702))+((gconst74*x703))+new_r11);
evalcond[2]=(gconst73+((new_r10*x703))+(((-1.0)*new_r00*x706)));
evalcond[3]=(gconst74+((new_r11*x703))+(((-1.0)*new_r01*x706)));
evalcond[4]=((((-1.0)*x707))+x705+new_r10);
evalcond[5]=((((-1.0)*x707))+x705+new_r01);
evalcond[6]=(((new_r00*x703))+(((-1.0)*x704))+((new_r10*x702)));
evalcond[7]=((((-1.0)*x703*x704))+new_r00+(((-1.0)*gconst73*x706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x709 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x709)==0){
continue;
}
IkReal x708=pow(x709,-0.5);
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
IkReal gconst75=((3.14159265358979)+(((-1.0)*(x710.value))));
IkReal gconst76=((1.0)*new_r01*x708);
IkReal gconst77=((-1.0)*new_r11*x708);
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22+(x711.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
IkReal x712=((1.0)*(x714.value));
IkReal x713=x708;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x712)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x712)));
IkReal gconst76=((1.0)*new_r01*x713);
IkReal gconst77=((-1.0)*new_r11*x713);
IkReal x715=new_r01*new_r01;
IkReal x716=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x717=x708;
IkReal x718=((1.0)*new_r01*x717);
j20eval[0]=x716;
j20eval[1]=IKsign(x716);
j20eval[2]=((IKabs(((((-1.0)*new_r11*x718))+(((-1.0)*new_r00*x718)))))+(IKabs((((x715*x717))+(((-1.0)*new_r10*x718))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
CheckValue<IkReal> x721 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x721.valid){
continue;
}
IkReal x719=((1.0)*(x721.value));
IkReal x720=x708;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x719)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x719)));
IkReal gconst76=((1.0)*new_r01*x720);
IkReal gconst77=((-1.0)*new_r11*x720);
IkReal x722=((new_r01*new_r01)+(new_r11*new_r11));
j20eval[0]=x722;
j20eval[1]=IKsign(x722);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
IkReal x723=((1.0)*(x725.value));
IkReal x724=x708;
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x723)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x723)));
IkReal gconst76=((1.0)*new_r01*x724);
IkReal gconst77=((-1.0)*new_r11*x724);
IkReal x726=new_r01*new_r01;
IkReal x727=new_r11*new_r11;
IkReal x728=((1.0)*x726);
CheckValue<IkReal> x734=IKPowWithIntegerCheck((x726+x727),-1);
if(!x734.valid){
continue;
}
IkReal x729=x734.value;
CheckValue<IkReal> x735=IKPowWithIntegerCheck(((((-1.0)*x728))+(((-1.0)*x727))),-1);
if(!x735.valid){
continue;
}
IkReal x730=x735.value;
IkReal x731=((1.0)*x730);
IkReal x732=(new_r11*x731);
IkReal x733=(new_r01*x731);
j20eval[0]=((IKabs(((((-1.0)*x732*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x732*(new_r11*new_r11)))+(((-1.0)*new_r01*x732)))))+(IKabs((((x729*(x727*x727)))+((x726*x727*x729))+(((-1.0)*x728*x729))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x736=((1.0)*(x737.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x736)));
new_r11=0;
new_r00=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x736)));
IkReal x738 = new_r01*new_r01;
if(IKabs(x738)==0){
continue;
}
IkReal gconst76=((1.0)*new_r01*(pow(x738,-0.5)));
IkReal gconst77=0;
j20eval[0]=new_r10;
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x739=IKPowWithIntegerCheck(gconst76,-1);
if(!x739.valid){
continue;
}
cj20array[0]=((-1.0)*new_r10*(x739.value));
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x740=IKsin(j20);
IkReal x741=IKcos(j20);
IkReal x742=((-1.0)*x740);
evalcond[0]=(new_r10*x740);
evalcond[1]=(new_r01*x742);
evalcond[2]=(gconst76*x742);
evalcond[3]=(gconst76+((new_r10*x741)));
evalcond[4]=(gconst76+((new_r01*x741)));
evalcond[5]=(new_r01+((gconst76*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x743=IKPowWithIntegerCheck(new_r10,-1);
if(!x743.valid){
continue;
}
cj20array[0]=((-1.0)*gconst76*(x743.value));
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x744=IKsin(j20);
IkReal x745=IKcos(j20);
IkReal x746=(gconst76*x745);
IkReal x747=((-1.0)*x744);
evalcond[0]=(new_r10*x744);
evalcond[1]=(new_r01*x747);
evalcond[2]=(gconst76*x747);
evalcond[3]=(x746+new_r10);
evalcond[4]=(gconst76+((new_r01*x745)));
evalcond[5]=(x746+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst76;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
IkReal x748=((1.0)*(x749.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x748)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x748)));
IkReal gconst76=((1.0)*new_r01);
IkReal gconst77=((-1.0)*new_r11);
j20eval[0]=1.0;
j20eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
j20eval[2]=1.0;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
IkReal x750=((1.0)*(x751.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x750)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x750)));
IkReal gconst76=((1.0)*new_r01);
IkReal gconst77=((-1.0)*new_r11);
j20eval[0]=-1.0;
j20eval[1]=-1.0;
j20eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
IkReal x752=((1.0)*(x753.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x752)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x752)));
IkReal gconst76=((1.0)*new_r01);
IkReal gconst77=((-1.0)*new_r11);
j20eval[0]=1.0;
j20eval[1]=1.0;
j20eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x754=((1.0)*new_r11);
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal((((gconst77*new_r01))+(((-1.0)*gconst76*x754)))),IkReal(((((-1.0)*gconst77*x754))+(((-1.0)*gconst76*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
CheckValue<IkReal> x756=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x756.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x755.value)+(((1.5707963267949)*(x756.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x757=IKsin(j20);
IkReal x758=IKcos(j20);
IkReal x759=(gconst76*x758);
IkReal x760=((1.0)*x757);
IkReal x761=(gconst77*x758);
IkReal x762=(gconst77*x760);
evalcond[0]=((((-1.0)*x762))+x759);
evalcond[1]=(gconst76+((new_r11*x757))+((new_r01*x758)));
evalcond[2]=(((gconst76*x757))+x761+new_r11);
evalcond[3]=(gconst77+((new_r11*x758))+(((-1.0)*new_r01*x760)));
evalcond[4]=((((-1.0)*gconst76*x760))+(((-1.0)*x761)));
evalcond[5]=((((-1.0)*x762))+x759+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal((gconst76*new_r11)),IkReal((gconst77*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst76*gconst76)))+(((-1.0)*(gconst77*gconst77))))),-1);
if(!x764.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x763.value)+(((1.5707963267949)*(x764.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x765=IKsin(j20);
IkReal x766=IKcos(j20);
IkReal x767=(gconst76*x766);
IkReal x768=((1.0)*x765);
IkReal x769=(gconst77*x766);
IkReal x770=(gconst77*x768);
evalcond[0]=(x767+(((-1.0)*x770)));
evalcond[1]=(((new_r11*x765))+gconst76+((new_r01*x766)));
evalcond[2]=(x769+new_r11+((gconst76*x765)));
evalcond[3]=(((new_r11*x766))+gconst77+(((-1.0)*new_r01*x768)));
evalcond[4]=((((-1.0)*gconst76*x768))+(((-1.0)*x769)));
evalcond[5]=(x767+(((-1.0)*x770))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x771=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst77*new_r11))+((gconst76*new_r01)))),-1);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772 = IKatan2WithCheck(IkReal((gconst76*gconst77)),IkReal(gconst77*gconst77),IKFAST_ATAN2_MAGTHRESH);
if(!x772.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x771.value)))+(x772.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x773=IKsin(j20);
IkReal x774=IKcos(j20);
IkReal x775=(gconst76*x774);
IkReal x776=((1.0)*x773);
IkReal x777=(gconst77*x774);
IkReal x778=(gconst77*x776);
evalcond[0]=(x775+(((-1.0)*x778)));
evalcond[1]=(gconst76+((new_r11*x773))+((new_r01*x774)));
evalcond[2]=(((gconst76*x773))+x777+new_r11);
evalcond[3]=((((-1.0)*new_r01*x776))+gconst77+((new_r11*x774)));
evalcond[4]=((((-1.0)*gconst76*x776))+(((-1.0)*x777)));
evalcond[5]=(x775+(((-1.0)*x778))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x779=IKPowWithIntegerCheck(gconst77,-1);
if(!x779.valid){
continue;
}
cj20array[0]=(new_r00*(x779.value));
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[6];
IkReal x780=IKsin(j20);
IkReal x781=IKcos(j20);
IkReal x782=((-1.0)*x780);
evalcond[0]=(new_r11*x780);
evalcond[1]=(new_r00*x782);
evalcond[2]=(gconst77*x782);
evalcond[3]=(((new_r11*x781))+gconst77);
evalcond[4]=(((gconst77*x781))+new_r11);
evalcond[5]=((((-1.0)*gconst77))+((new_r00*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
IkReal x783=((1.0)*(x784.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x783)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x783)));
IkReal gconst76=0;
IkReal x785 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x785)==0){
continue;
}
IkReal gconst77=((-1.0)*new_r11*(pow(x785,-0.5)));
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x787 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x787.valid){
continue;
}
IkReal x786=((1.0)*(x787.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x786)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x786)));
IkReal gconst76=0;
IkReal x788 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x788)==0){
continue;
}
IkReal gconst77=((-1.0)*new_r11*(pow(x788,-0.5)));
j20eval[0]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
CheckValue<IkReal> x790 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x790.valid){
continue;
}
IkReal x789=((1.0)*(x790.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x789)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x789)));
IkReal gconst76=0;
IkReal x791 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x791)==0){
continue;
}
IkReal gconst77=((-1.0)*new_r11*(pow(x791,-0.5)));
j20eval[0]=new_r10;
j20eval[1]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x792=IKPowWithIntegerCheck(new_r10,-1);
if(!x792.valid){
continue;
}
CheckValue<IkReal> x793=IKPowWithIntegerCheck(new_r11,-1);
if(!x793.valid){
continue;
}
if( IKabs((gconst77*(x792.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst77*(x793.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst77*(x792.value)))+IKsqr(((-1.0)*gconst77*(x793.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((gconst77*(x792.value)), ((-1.0)*gconst77*(x793.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x794=IKcos(j20);
IkReal x795=IKsin(j20);
IkReal x796=((1.0)*gconst77);
IkReal x797=(gconst77*x794);
evalcond[0]=(new_r10*x794);
evalcond[1]=(new_r11*x795);
evalcond[2]=((-1.0)*x797);
evalcond[3]=((-1.0)*gconst77*x795);
evalcond[4]=(((new_r11*x794))+gconst77);
evalcond[5]=(x797+new_r11);
evalcond[6]=((((-1.0)*x795*x796))+new_r10);
evalcond[7]=((((-1.0)*x796))+((new_r10*x795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x798=IKPowWithIntegerCheck(gconst77,-1);
if(!x798.valid){
continue;
}
CheckValue<IkReal> x799=IKPowWithIntegerCheck(new_r11,-1);
if(!x799.valid){
continue;
}
if( IKabs((new_r10*(x798.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst77*(x799.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x798.value)))+IKsqr(((-1.0)*gconst77*(x799.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((new_r10*(x798.value)), ((-1.0)*gconst77*(x799.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x800=IKcos(j20);
IkReal x801=IKsin(j20);
IkReal x802=((1.0)*gconst77);
IkReal x803=(gconst77*x800);
evalcond[0]=(new_r10*x800);
evalcond[1]=(new_r11*x801);
evalcond[2]=((-1.0)*x803);
evalcond[3]=((-1.0)*gconst77*x801);
evalcond[4]=(gconst77+((new_r11*x800)));
evalcond[5]=(new_r11+x803);
evalcond[6]=(new_r10+(((-1.0)*x801*x802)));
evalcond[7]=(((new_r10*x801))+(((-1.0)*x802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
CheckValue<IkReal> x805=IKPowWithIntegerCheck(IKsign(gconst77),-1);
if(!x805.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x804.value)+(((1.5707963267949)*(x805.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x806=IKcos(j20);
IkReal x807=IKsin(j20);
IkReal x808=((1.0)*gconst77);
IkReal x809=(gconst77*x806);
evalcond[0]=(new_r10*x806);
evalcond[1]=(new_r11*x807);
evalcond[2]=((-1.0)*x809);
evalcond[3]=((-1.0)*gconst77*x807);
evalcond[4]=(gconst77+((new_r11*x806)));
evalcond[5]=(new_r11+x809);
evalcond[6]=((((-1.0)*x807*x808))+new_r10);
evalcond[7]=(((new_r10*x807))+(((-1.0)*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
CheckValue<IkReal> x811 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x811.valid){
continue;
}
IkReal x810=((1.0)*(x811.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x810)));
new_r01=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x810)));
IkReal gconst76=0;
IkReal x812 = new_r11*new_r11;
if(IKabs(x812)==0){
continue;
}
IkReal gconst77=((-1.0)*new_r11*(pow(x812,-0.5)));
j20eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
IkReal x813=((1.0)*(x814.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x813)));
new_r01=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x813)));
IkReal gconst76=0;
IkReal x815 = new_r11*new_r11;
if(IKabs(x815)==0){
continue;
}
IkReal gconst77=((-1.0)*new_r11*(pow(x815,-0.5)));
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
IkReal x816=((1.0)*(x817.value));
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
sj22=gconst76;
cj22=gconst77;
j22=((3.14159265)+(((-1.0)*x816)));
new_r01=0;
IkReal gconst75=((3.14159265358979)+(((-1.0)*x816)));
IkReal gconst76=0;
IkReal x818 = new_r11*new_r11;
if(IKabs(x818)==0){
continue;
}
IkReal gconst77=((-1.0)*new_r11*(pow(x818,-0.5)));
j20eval[0]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x819=IKPowWithIntegerCheck(gconst77,-1);
if(!x819.valid){
continue;
}
CheckValue<IkReal> x820=IKPowWithIntegerCheck(new_r11,-1);
if(!x820.valid){
continue;
}
if( IKabs((new_r10*(x819.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst77*(x820.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x819.value)))+IKsqr(((-1.0)*gconst77*(x820.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((new_r10*(x819.value)), ((-1.0)*gconst77*(x820.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x821=IKsin(j20);
IkReal x822=IKcos(j20);
IkReal x823=((1.0)*gconst77);
IkReal x824=((1.0)*x821);
evalcond[0]=(new_r11*x821);
evalcond[1]=((-1.0)*gconst77*x821);
evalcond[2]=(gconst77+((new_r11*x822)));
evalcond[3]=(new_r11+((gconst77*x822)));
evalcond[4]=((((-1.0)*x821*x823))+new_r10);
evalcond[5]=((((-1.0)*x822*x823))+new_r00);
evalcond[6]=(((new_r10*x822))+(((-1.0)*new_r00*x824)));
evalcond[7]=(((new_r10*x821))+(((-1.0)*x823))+((new_r00*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
CheckValue<IkReal> x826=IKPowWithIntegerCheck(IKsign(gconst77),-1);
if(!x826.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x825.value)+(((1.5707963267949)*(x826.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x827=IKsin(j20);
IkReal x828=IKcos(j20);
IkReal x829=((1.0)*gconst77);
IkReal x830=((1.0)*x827);
evalcond[0]=(new_r11*x827);
evalcond[1]=((-1.0)*gconst77*x827);
evalcond[2]=(gconst77+((new_r11*x828)));
evalcond[3]=(new_r11+((gconst77*x828)));
evalcond[4]=((((-1.0)*x827*x829))+new_r10);
evalcond[5]=((((-1.0)*x828*x829))+new_r00);
evalcond[6]=(((new_r10*x828))+(((-1.0)*new_r00*x830)));
evalcond[7]=(((new_r10*x827))+(((-1.0)*x829))+((new_r00*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x831=IKPowWithIntegerCheck(IKsign(gconst77),-1);
if(!x831.valid){
continue;
}
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x831.value)))+(x832.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x833=IKsin(j20);
IkReal x834=IKcos(j20);
IkReal x835=((1.0)*gconst77);
IkReal x836=((1.0)*x833);
evalcond[0]=(new_r11*x833);
evalcond[1]=((-1.0)*gconst77*x833);
evalcond[2]=(((new_r11*x834))+gconst77);
evalcond[3]=(((gconst77*x834))+new_r11);
evalcond[4]=((((-1.0)*x833*x835))+new_r10);
evalcond[5]=((((-1.0)*x834*x835))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x836))+((new_r10*x834)));
evalcond[7]=(((new_r00*x834))+(((-1.0)*x835))+((new_r10*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x837=((1.0)*new_r11);
CheckValue<IkReal> x838=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst77*x837))+((gconst76*new_r01)))),-1);
if(!x838.valid){
continue;
}
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal((((gconst76*gconst77))+(((-1.0)*new_r01*x837)))),IkReal(((((-1.0)*(gconst76*gconst76)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x838.value)))+(x839.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x840=IKsin(j20);
IkReal x841=IKcos(j20);
IkReal x842=((1.0)*gconst77);
IkReal x843=(gconst76*x841);
IkReal x844=((1.0)*x840);
IkReal x845=(x840*x842);
evalcond[0]=(gconst76+((new_r01*x841))+((new_r11*x840)));
evalcond[1]=(((gconst76*x840))+((gconst77*x841))+new_r11);
evalcond[2]=(((new_r10*x841))+gconst76+(((-1.0)*new_r00*x844)));
evalcond[3]=(gconst77+(((-1.0)*new_r01*x844))+((new_r11*x841)));
evalcond[4]=((((-1.0)*x845))+new_r10+x843);
evalcond[5]=((((-1.0)*x845))+new_r01+x843);
evalcond[6]=(((new_r10*x840))+((new_r00*x841))+(((-1.0)*x842)));
evalcond[7]=((((-1.0)*x841*x842))+(((-1.0)*gconst76*x844))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x846=((1.0)*new_r11);
CheckValue<IkReal> x847=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x847.valid){
continue;
}
CheckValue<IkReal> x848 = IKatan2WithCheck(IkReal((((gconst77*new_r01))+(((-1.0)*gconst76*x846)))),IkReal(((((-1.0)*gconst77*x846))+(((-1.0)*gconst76*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x848.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x847.value)))+(x848.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x849=IKsin(j20);
IkReal x850=IKcos(j20);
IkReal x851=((1.0)*gconst77);
IkReal x852=(gconst76*x850);
IkReal x853=((1.0)*x849);
IkReal x854=(x849*x851);
evalcond[0]=(gconst76+((new_r01*x850))+((new_r11*x849)));
evalcond[1]=(((gconst76*x849))+((gconst77*x850))+new_r11);
evalcond[2]=(gconst76+(((-1.0)*new_r00*x853))+((new_r10*x850)));
evalcond[3]=((((-1.0)*new_r01*x853))+gconst77+((new_r11*x850)));
evalcond[4]=((((-1.0)*x854))+new_r10+x852);
evalcond[5]=((((-1.0)*x854))+new_r01+x852);
evalcond[6]=(((new_r10*x849))+(((-1.0)*x851))+((new_r00*x850)));
evalcond[7]=((((-1.0)*x850*x851))+new_r00+(((-1.0)*gconst76*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x855=((1.0)*gconst76);
CheckValue<IkReal> x856 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x855))+((gconst76*new_r01)))),IkReal(((((-1.0)*new_r00*x855))+(((-1.0)*new_r11*x855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x856.valid){
continue;
}
CheckValue<IkReal> x857=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x857.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x856.value)+(((1.5707963267949)*(x857.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x858=IKsin(j20);
IkReal x859=IKcos(j20);
IkReal x860=((1.0)*gconst77);
IkReal x861=(gconst76*x859);
IkReal x862=((1.0)*x858);
IkReal x863=(x858*x860);
evalcond[0]=(gconst76+((new_r11*x858))+((new_r01*x859)));
evalcond[1]=(((gconst76*x858))+((gconst77*x859))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x862))+gconst76+((new_r10*x859)));
evalcond[3]=((((-1.0)*new_r01*x862))+gconst77+((new_r11*x859)));
evalcond[4]=((((-1.0)*x863))+new_r10+x861);
evalcond[5]=((((-1.0)*x863))+new_r01+x861);
evalcond[6]=((((-1.0)*x860))+((new_r10*x858))+((new_r00*x859)));
evalcond[7]=((((-1.0)*gconst76*x862))+(((-1.0)*x859*x860))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r01=0;
new_r11=0;
j20eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x865 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x865.valid){
continue;
}
IkReal x864=x865.value;
j20array[0]=((-1.0)*x864);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x864)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j20))))+(((-1.0)*new_r00*(IKsin(j20)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j22))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(new_r10, ((-1.0)*new_r11));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x866=IKcos(j20);
IkReal x867=IKsin(j20);
IkReal x868=((1.0)*x867);
evalcond[0]=(new_r11+x866);
evalcond[1]=((((-1.0)*x868))+new_r10);
evalcond[2]=((((-1.0)*x866))+new_r00);
evalcond[3]=((((-1.0)*x868))+new_r01);
evalcond[4]=(((new_r01*x866))+((new_r11*x867)));
evalcond[5]=((((-1.0)*new_r00*x868))+((new_r10*x866)));
evalcond[6]=((-1.0)+((new_r00*x866))+((new_r10*x867)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x868))+((new_r11*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j22)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x869=IKsin(j20);
IkReal x870=IKcos(j20);
IkReal x871=((1.0)*x869);
evalcond[0]=(new_r10+x869);
evalcond[1]=(new_r00+x870);
evalcond[2]=(new_r01+x869);
evalcond[3]=((((-1.0)*x870))+new_r11);
evalcond[4]=(((new_r01*x870))+((new_r11*x869)));
evalcond[5]=((((-1.0)*new_r00*x871))+((new_r10*x870)));
evalcond[6]=((1.0)+((new_r00*x870))+((new_r10*x869)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x871))+((new_r11*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r11=0;
new_r00=0;
j20eval[0]=new_r01;
j20eval[1]=IKsign(new_r01);
j20eval[2]=((IKabs(sj22))+(IKabs(cj22)));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r11=0;
new_r00=0;
j20eval[0]=new_r10;
j20eval[1]=((IKabs(sj22))+(IKabs(cj22)));
j20eval[2]=IKsign(new_r10);
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r11=0;
new_r00=0;
j20eval[0]=new_r01;
j20eval[1]=new_r10;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(new_r01,-1);
if(!x872.valid){
continue;
}
CheckValue<IkReal> x873=IKPowWithIntegerCheck(new_r10,-1);
if(!x873.valid){
continue;
}
if( IKabs((cj22*(x872.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj22*(x873.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj22*(x872.value)))+IKsqr(((-1.0)*sj22*(x873.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((cj22*(x872.value)), ((-1.0)*sj22*(x873.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[7];
IkReal x874=IKcos(j20);
IkReal x875=IKsin(j20);
IkReal x876=((1.0)*cj22);
IkReal x877=(sj22*x874);
IkReal x878=((1.0)*x875);
IkReal x879=(x875*x876);
evalcond[0]=(sj22+((new_r10*x874)));
evalcond[1]=(((new_r01*x874))+sj22);
evalcond[2]=((((-1.0)*new_r01*x878))+cj22);
evalcond[3]=(((new_r10*x875))+(((-1.0)*x876)));
evalcond[4]=(new_r10+x877+(((-1.0)*x879)));
evalcond[5]=((((-1.0)*sj22*x878))+(((-1.0)*x874*x876)));
evalcond[6]=(new_r01+x877+(((-1.0)*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x880=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal(cj22),IkReal(((-1.0)*sj22)),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x880.value)))+(x881.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[7];
IkReal x882=IKcos(j20);
IkReal x883=IKsin(j20);
IkReal x884=((1.0)*cj22);
IkReal x885=(sj22*x882);
IkReal x886=((1.0)*x883);
IkReal x887=(x883*x884);
evalcond[0]=(((new_r10*x882))+sj22);
evalcond[1]=(((new_r01*x882))+sj22);
evalcond[2]=((((-1.0)*new_r01*x886))+cj22);
evalcond[3]=(((new_r10*x883))+(((-1.0)*x884)));
evalcond[4]=((((-1.0)*x887))+new_r10+x885);
evalcond[5]=((((-1.0)*sj22*x886))+(((-1.0)*x882*x884)));
evalcond[6]=((((-1.0)*x887))+new_r01+x885);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x888=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x888.valid){
continue;
}
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(cj22),IkReal(((-1.0)*sj22)),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x888.value)))+(x889.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[7];
IkReal x890=IKcos(j20);
IkReal x891=IKsin(j20);
IkReal x892=((1.0)*cj22);
IkReal x893=(sj22*x890);
IkReal x894=((1.0)*x891);
IkReal x895=(x891*x892);
evalcond[0]=(((new_r10*x890))+sj22);
evalcond[1]=(((new_r01*x890))+sj22);
evalcond[2]=(cj22+(((-1.0)*new_r01*x894)));
evalcond[3]=(((new_r10*x891))+(((-1.0)*x892)));
evalcond[4]=((((-1.0)*x895))+new_r10+x893);
evalcond[5]=((((-1.0)*x890*x892))+(((-1.0)*sj22*x894)));
evalcond[6]=((((-1.0)*x895))+new_r01+x893);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j20eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x897 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x897.valid){
continue;
}
IkReal x896=x897.value;
j20array[0]=((-1.0)*x896);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x896)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j20))))+(((-1.0)*new_r00*(IKsin(j20)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
IkReal x898=x899.value;
j20array[0]=((-1.0)*x898);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x898)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j20))))+((new_r11*(IKcos(j20)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[3];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r01=0;
new_r10=0;
j20eval[0]=new_r11;
j20eval[1]=IKsign(new_r11);
j20eval[2]=((IKabs(sj22))+(IKabs(cj22)));
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  || IKabs(j20eval[2]) < 0.0000010000000000  )
{
{
IkReal j20eval[2];
sj21=0;
cj21=-1.0;
j21=3.14159265358979;
new_r01=0;
new_r10=0;
j20eval[0]=new_r00;
j20eval[1]=new_r11;
if( IKabs(j20eval[0]) < 0.0000010000000000  || IKabs(j20eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x900=IKPowWithIntegerCheck(new_r00,-1);
if(!x900.valid){
continue;
}
CheckValue<IkReal> x901=IKPowWithIntegerCheck(new_r11,-1);
if(!x901.valid){
continue;
}
if( IKabs((sj22*(x900.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj22*(x901.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj22*(x900.value)))+IKsqr(((-1.0)*cj22*(x901.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((sj22*(x900.value)), ((-1.0)*cj22*(x901.value)));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[7];
IkReal x902=IKsin(j20);
IkReal x903=IKcos(j20);
IkReal x904=((1.0)*cj22);
IkReal x905=(sj22*x902);
IkReal x906=((1.0)*x902);
evalcond[0]=(cj22+((new_r11*x903)));
evalcond[1]=(sj22+((new_r11*x902)));
evalcond[2]=(sj22+(((-1.0)*new_r00*x906)));
evalcond[3]=((((-1.0)*x904))+((new_r00*x903)));
evalcond[4]=(((sj22*x903))+(((-1.0)*x902*x904)));
evalcond[5]=(new_r11+x905+((cj22*x903)));
evalcond[6]=((((-1.0)*x903*x904))+(((-1.0)*x905))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(((-1.0)*sj22)),IkReal(((-1.0)*cj22)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
CheckValue<IkReal> x908=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x908.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x907.value)+(((1.5707963267949)*(x908.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[7];
IkReal x909=IKsin(j20);
IkReal x910=IKcos(j20);
IkReal x911=((1.0)*cj22);
IkReal x912=(sj22*x909);
IkReal x913=((1.0)*x909);
evalcond[0]=(((new_r11*x910))+cj22);
evalcond[1]=(sj22+((new_r11*x909)));
evalcond[2]=(sj22+(((-1.0)*new_r00*x913)));
evalcond[3]=((((-1.0)*x911))+((new_r00*x910)));
evalcond[4]=(((sj22*x910))+(((-1.0)*x909*x911)));
evalcond[5]=(((cj22*x910))+new_r11+x912);
evalcond[6]=((((-1.0)*x910*x911))+(((-1.0)*x912))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(IKsign((((cj22*new_r01))+((new_r11*sj22)))),-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915 = IKatan2WithCheck(IkReal(((-1.0)+((new_r01*new_r10))+(cj22*cj22))),IkReal(((((-1.0)*cj22*sj22))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x914.value)))+(x915.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x916=IKsin(j20);
IkReal x917=IKcos(j20);
IkReal x918=((1.0)*cj22);
IkReal x919=(sj22*x917);
IkReal x920=(sj22*x916);
IkReal x921=((1.0)*x916);
IkReal x922=(x916*x918);
evalcond[0]=(((new_r11*x916))+sj22+((new_r01*x917)));
evalcond[1]=(((cj22*x917))+new_r11+x920);
evalcond[2]=(((new_r10*x917))+(((-1.0)*new_r00*x921))+sj22);
evalcond[3]=(((new_r11*x917))+cj22+(((-1.0)*new_r01*x921)));
evalcond[4]=((((-1.0)*x922))+new_r10+x919);
evalcond[5]=((((-1.0)*x922))+new_r01+x919);
evalcond[6]=((((-1.0)*x918))+((new_r10*x916))+((new_r00*x917)));
evalcond[7]=((((-1.0)*x920))+new_r00+(((-1.0)*x917*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x923=((1.0)*sj22);
CheckValue<IkReal> x924=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x924.valid){
continue;
}
CheckValue<IkReal> x925 = IKatan2WithCheck(IkReal((((cj22*new_r01))+(((-1.0)*new_r11*x923)))),IkReal(((((-1.0)*cj22*new_r11))+(((-1.0)*new_r01*x923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(((1.5707963267949)*(x924.value)))+(x925.value));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x926=IKsin(j20);
IkReal x927=IKcos(j20);
IkReal x928=((1.0)*cj22);
IkReal x929=(sj22*x927);
IkReal x930=(sj22*x926);
IkReal x931=((1.0)*x926);
IkReal x932=(x926*x928);
evalcond[0]=(sj22+((new_r01*x927))+((new_r11*x926)));
evalcond[1]=(((cj22*x927))+new_r11+x930);
evalcond[2]=((((-1.0)*new_r00*x931))+sj22+((new_r10*x927)));
evalcond[3]=(cj22+(((-1.0)*new_r01*x931))+((new_r11*x927)));
evalcond[4]=(new_r10+x929+(((-1.0)*x932)));
evalcond[5]=(new_r01+x929+(((-1.0)*x932)));
evalcond[6]=((((-1.0)*x928))+((new_r00*x927))+((new_r10*x926)));
evalcond[7]=((((-1.0)*x927*x928))+(((-1.0)*x930))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
IkReal x933=((1.0)*sj22);
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal((((new_r01*sj22))+(((-1.0)*new_r10*x933)))),IkReal(((((-1.0)*new_r11*x933))+(((-1.0)*new_r00*x933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
CheckValue<IkReal> x935=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x935.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x934.value)+(((1.5707963267949)*(x935.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x936=IKsin(j20);
IkReal x937=IKcos(j20);
IkReal x938=((1.0)*cj22);
IkReal x939=(sj22*x937);
IkReal x940=(sj22*x936);
IkReal x941=((1.0)*x936);
IkReal x942=(x936*x938);
evalcond[0]=(((new_r01*x937))+sj22+((new_r11*x936)));
evalcond[1]=(((cj22*x937))+new_r11+x940);
evalcond[2]=(sj22+((new_r10*x937))+(((-1.0)*new_r00*x941)));
evalcond[3]=(cj22+(((-1.0)*new_r01*x941))+((new_r11*x937)));
evalcond[4]=((((-1.0)*x942))+new_r10+x939);
evalcond[5]=((((-1.0)*x942))+new_r01+x939);
evalcond[6]=(((new_r00*x937))+((new_r10*x936))+(((-1.0)*x938)));
evalcond[7]=((((-1.0)*x940))+(((-1.0)*x937*x938))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j20eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j20eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j20eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
{
IkReal j20eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j20eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j20eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j20]

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
IkReal x943=((-1.0)*new_r22);
CheckValue<IkReal> x945 = IKatan2WithCheck(IkReal((new_r01*x943)),IkReal((new_r11*x943)),IKFAST_ATAN2_MAGTHRESH);
if(!x945.valid){
continue;
}
IkReal x944=x945.value;
j20array[0]=((-1.0)*x944);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x944)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x946=IKsin(j20);
IkReal x947=IKcos(j20);
IkReal x948=((1.0)*x946);
IkReal x949=(new_r00*x947);
evalcond[0]=(((new_r10*x946))+x949);
evalcond[1]=(((new_r01*x947))+((new_r11*x946)));
evalcond[2]=(((new_r10*x947))+(((-1.0)*new_r00*x948)));
evalcond[3]=(((new_r11*x947))+(((-1.0)*new_r01*x948)));
evalcond[4]=((((-1.0)*new_r22*x949))+(((-1.0)*new_r10*new_r22*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x951 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x951.valid){
continue;
}
IkReal x950=x951.value;
j20array[0]=((-1.0)*x950);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x950)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x952=IKcos(j20);
IkReal x953=IKsin(j20);
IkReal x954=((1.0)*new_r22);
IkReal x955=((1.0)*x953);
IkReal x956=(new_r00*x952);
evalcond[0]=(((new_r10*x953))+x956);
evalcond[1]=(((new_r10*x952))+(((-1.0)*new_r00*x955)));
evalcond[2]=((((-1.0)*new_r01*x955))+((new_r11*x952)));
evalcond[3]=((((-1.0)*new_r11*x953*x954))+(((-1.0)*new_r01*x952*x954)));
evalcond[4]=((((-1.0)*x954*x956))+(((-1.0)*new_r10*x953*x954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
IkReal x957=x958.value;
j20array[0]=((-1.0)*x957);
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
j20array[1]=((3.14159265358979)+(((-1.0)*x957)));
sj20array[1]=IKsin(j20array[1]);
cj20array[1]=IKcos(j20array[1]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
if( j20array[1] > IKPI )
{
    j20array[1]-=IK2PI;
}
else if( j20array[1] < -IKPI )
{    j20array[1]+=IK2PI;
}
j20valid[1] = true;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[5];
IkReal x959=IKcos(j20);
IkReal x960=IKsin(j20);
IkReal x961=((1.0)*new_r22);
IkReal x962=((1.0)*x960);
IkReal x963=(new_r01*x959);
evalcond[0]=(((new_r11*x960))+x963);
evalcond[1]=(((new_r10*x959))+(((-1.0)*new_r00*x962)));
evalcond[2]=((((-1.0)*new_r01*x962))+((new_r11*x959)));
evalcond[3]=((((-1.0)*x961*x963))+(((-1.0)*new_r11*x960*x961)));
evalcond[4]=((((-1.0)*new_r10*x960*x961))+(((-1.0)*new_r00*x959*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j20]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(sj21,-1);
if(!x965.valid){
continue;
}
IkReal x964=x965.value;
CheckValue<IkReal> x966=IKPowWithIntegerCheck(new_r00,-1);
if(!x966.valid){
continue;
}
if( IKabs((x964*(x966.value)*((((sj21*sj22))+((new_r02*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x964)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x964*(x966.value)*((((sj21*sj22))+((new_r02*new_r10))))))+IKsqr((new_r02*x964))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2((x964*(x966.value)*((((sj21*sj22))+((new_r02*new_r10))))), (new_r02*x964));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[18];
IkReal x967=IKcos(j20);
IkReal x968=IKsin(j20);
IkReal x969=((1.0)*cj21);
IkReal x970=((1.0)*sj21);
IkReal x971=(cj21*cj22);
IkReal x972=(new_r02*x967);
IkReal x973=(new_r12*x968);
IkReal x974=(cj22*x967);
IkReal x975=(new_r11*x968);
IkReal x976=(new_r10*x968);
IkReal x977=(new_r00*x967);
IkReal x978=(new_r01*x967);
IkReal x979=(sj22*x968);
IkReal x980=((1.0)*x968);
IkReal x981=(sj22*x967);
evalcond[0]=((((-1.0)*x967*x970))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x968*x970)));
evalcond[2]=((((-1.0)*new_r02*x980))+((new_r12*x967)));
evalcond[3]=((((-1.0)*new_r00*x980))+sj22+((new_r10*x967)));
evalcond[4]=(((new_r11*x967))+(((-1.0)*new_r01*x980))+cj22);
evalcond[5]=(((x968*x971))+new_r10+x981);
evalcond[6]=(x973+x972+(((-1.0)*x970)));
evalcond[7]=(x971+x977+x976);
evalcond[8]=((((-1.0)*x979))+new_r00+((x967*x971)));
evalcond[9]=((((-1.0)*x969*x979))+new_r11+x974);
evalcond[10]=((((-1.0)*sj22*x969))+x975+x978);
evalcond[11]=((((-1.0)*x969*x981))+(((-1.0)*cj22*x980))+new_r01);
evalcond[12]=(((sj21*x977))+((sj21*x976))+((cj21*new_r20)));
evalcond[13]=(((sj21*x978))+((sj21*x975))+((cj21*new_r21)));
evalcond[14]=((-1.0)+((sj21*x973))+((sj21*x972))+((cj21*new_r22)));
evalcond[15]=((((-1.0)*x969*x973))+(((-1.0)*x969*x972))+((new_r22*sj21)));
evalcond[16]=(((new_r21*sj21))+(((-1.0)*x969*x978))+(((-1.0)*x969*x975))+sj22);
evalcond[17]=((((-1.0)*x969*x976))+(((-1.0)*x969*x977))+((new_r20*sj21))+(((-1.0)*cj22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
CheckValue<IkReal> x983=IKPowWithIntegerCheck(IKsign(sj21),-1);
if(!x983.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x982.value)+(((1.5707963267949)*(x983.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[18];
IkReal x984=IKcos(j20);
IkReal x985=IKsin(j20);
IkReal x986=((1.0)*cj21);
IkReal x987=((1.0)*sj21);
IkReal x988=(cj21*cj22);
IkReal x989=(new_r02*x984);
IkReal x990=(new_r12*x985);
IkReal x991=(cj22*x984);
IkReal x992=(new_r11*x985);
IkReal x993=(new_r10*x985);
IkReal x994=(new_r00*x984);
IkReal x995=(new_r01*x984);
IkReal x996=(sj22*x985);
IkReal x997=((1.0)*x985);
IkReal x998=(sj22*x984);
evalcond[0]=((((-1.0)*x984*x987))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x985*x987)));
evalcond[2]=((((-1.0)*new_r02*x997))+((new_r12*x984)));
evalcond[3]=((((-1.0)*new_r00*x997))+sj22+((new_r10*x984)));
evalcond[4]=((((-1.0)*new_r01*x997))+cj22+((new_r11*x984)));
evalcond[5]=(new_r10+((x985*x988))+x998);
evalcond[6]=((((-1.0)*x987))+x990+x989);
evalcond[7]=(x993+x994+x988);
evalcond[8]=((((-1.0)*x996))+((x984*x988))+new_r00);
evalcond[9]=(new_r11+x991+(((-1.0)*x986*x996)));
evalcond[10]=((((-1.0)*sj22*x986))+x992+x995);
evalcond[11]=(new_r01+(((-1.0)*x986*x998))+(((-1.0)*cj22*x997)));
evalcond[12]=(((sj21*x994))+((sj21*x993))+((cj21*new_r20)));
evalcond[13]=(((sj21*x995))+((sj21*x992))+((cj21*new_r21)));
evalcond[14]=((-1.0)+((sj21*x990))+((cj21*new_r22))+((sj21*x989)));
evalcond[15]=((((-1.0)*x986*x989))+((new_r22*sj21))+(((-1.0)*x986*x990)));
evalcond[16]=(((new_r21*sj21))+sj22+(((-1.0)*x986*x992))+(((-1.0)*x986*x995)));
evalcond[17]=(((new_r20*sj21))+(((-1.0)*cj22))+(((-1.0)*x986*x993))+(((-1.0)*x986*x994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
CheckValue<IkReal> x999 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x999.valid){
continue;
}
CheckValue<IkReal> x1000=IKPowWithIntegerCheck(IKsign(sj21),-1);
if(!x1000.valid){
continue;
}
j20array[0]=((-1.5707963267949)+(x999.value)+(((1.5707963267949)*(x1000.value))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IkReal evalcond[8];
IkReal x1001=IKcos(j20);
IkReal x1002=IKsin(j20);
IkReal x1003=((1.0)*cj21);
IkReal x1004=((1.0)*sj21);
IkReal x1005=(sj21*x1001);
IkReal x1006=(new_r12*x1002);
IkReal x1007=(new_r02*x1001);
IkReal x1008=(sj21*x1002);
evalcond[0]=((((-1.0)*x1001*x1004))+new_r02);
evalcond[1]=((((-1.0)*x1002*x1004))+new_r12);
evalcond[2]=(((new_r12*x1001))+(((-1.0)*new_r02*x1002)));
evalcond[3]=(x1007+x1006+(((-1.0)*x1004)));
evalcond[4]=(((cj21*new_r20))+((new_r10*x1008))+((new_r00*x1005)));
evalcond[5]=(((cj21*new_r21))+((new_r11*x1008))+((new_r01*x1005)));
evalcond[6]=((-1.0)+((cj21*new_r22))+((new_r02*x1005))+((sj21*x1006)));
evalcond[7]=(((new_r22*sj21))+(((-1.0)*x1003*x1007))+(((-1.0)*x1003*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j22eval[3];
j22eval[0]=sj21;
j22eval[1]=IKsign(sj21);
j22eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal j22eval[2];
j22eval[0]=sj21;
j22eval[1]=cj20;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  )
{
{
IkReal j22eval[3];
j22eval[0]=sj21;
j22eval[1]=cj21;
j22eval[2]=sj20;
if( IKabs(j22eval[0]) < 0.0000010000000000  || IKabs(j22eval[1]) < 0.0000010000000000  || IKabs(j22eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j21))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x1009=((1.0)*new_r10);
if( IKabs((((new_r00*sj20))+(((-1.0)*cj20*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj20*new_r00))+(((-1.0)*sj20*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj20))+(((-1.0)*cj20*x1009))))+IKsqr(((((-1.0)*cj20*new_r00))+(((-1.0)*sj20*x1009))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2((((new_r00*sj20))+(((-1.0)*cj20*x1009))), ((((-1.0)*cj20*new_r00))+(((-1.0)*sj20*x1009))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1010=IKcos(j22);
IkReal x1011=IKsin(j22);
IkReal x1012=((1.0)*sj20);
IkReal x1013=(cj20*x1010);
IkReal x1014=(cj20*x1011);
IkReal x1015=(x1011*x1012);
evalcond[0]=(x1010+((cj20*new_r00))+((new_r10*sj20)));
evalcond[1]=(x1011+((cj20*new_r10))+(((-1.0)*new_r00*x1012)));
evalcond[2]=(x1010+((cj20*new_r11))+(((-1.0)*new_r01*x1012)));
evalcond[3]=(x1014+((sj20*x1010))+new_r10);
evalcond[4]=(((cj20*new_r01))+((new_r11*sj20))+(((-1.0)*x1011)));
evalcond[5]=(x1013+(((-1.0)*x1015))+new_r00);
evalcond[6]=(x1013+(((-1.0)*x1015))+new_r11);
evalcond[7]=((((-1.0)*x1010*x1012))+new_r01+(((-1.0)*x1014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j21)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
IkReal x1016=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj20*new_r10))+(((-1.0)*sj20*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj20*x1016))+((new_r10*sj20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj20*new_r10))+(((-1.0)*sj20*x1016))))+IKsqr(((((-1.0)*cj20*x1016))+((new_r10*sj20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((-1.0)*cj20*new_r10))+(((-1.0)*sj20*x1016))), ((((-1.0)*cj20*x1016))+((new_r10*sj20))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1017=IKsin(j22);
IkReal x1018=IKcos(j22);
IkReal x1019=((1.0)*sj20);
IkReal x1020=(cj20*x1017);
IkReal x1021=((1.0)*x1018);
IkReal x1022=(sj20*x1017);
IkReal x1023=(x1018*x1019);
evalcond[0]=(x1017+((cj20*new_r01))+((new_r11*sj20)));
evalcond[1]=(x1017+((cj20*new_r10))+(((-1.0)*new_r00*x1019)));
evalcond[2]=(x1018+((cj20*new_r11))+(((-1.0)*new_r01*x1019)));
evalcond[3]=(((cj20*new_r00))+(((-1.0)*x1021))+((new_r10*sj20)));
evalcond[4]=(x1022+((cj20*x1018))+new_r11);
evalcond[5]=(x1020+(((-1.0)*x1023))+new_r10);
evalcond[6]=(x1020+(((-1.0)*x1023))+new_r01);
evalcond[7]=((((-1.0)*x1017*x1019))+(((-1.0)*cj20*x1021))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1024=IKsin(j22);
IkReal x1025=IKcos(j22);
IkReal x1026=((1.0)*sj20);
IkReal x1027=((1.0)*x1025);
evalcond[0]=(x1024+new_r21);
evalcond[1]=((((-1.0)*x1027))+new_r20);
evalcond[2]=(new_r10+((cj20*x1024)));
evalcond[3]=(new_r11+((cj20*x1025)));
evalcond[4]=(new_r00+(((-1.0)*x1024*x1026)));
evalcond[5]=(new_r01+(((-1.0)*x1025*x1026)));
evalcond[6]=((((-1.0)*new_r00*x1026))+x1024+((cj20*new_r10)));
evalcond[7]=(x1025+((cj20*new_r11))+(((-1.0)*new_r01*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j21)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1028=IKsin(j22);
IkReal x1029=IKcos(j22);
IkReal x1030=((1.0)*sj20);
evalcond[0]=(x1029+new_r20);
evalcond[1]=((((-1.0)*x1028))+new_r21);
evalcond[2]=(new_r10+((cj20*x1028)));
evalcond[3]=(new_r11+((cj20*x1029)));
evalcond[4]=((((-1.0)*x1028*x1030))+new_r00);
evalcond[5]=((((-1.0)*x1029*x1030))+new_r01);
evalcond[6]=(x1028+((cj20*new_r10))+(((-1.0)*new_r00*x1030)));
evalcond[7]=(x1029+((cj20*new_r11))+(((-1.0)*new_r01*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1031=IKsin(j22);
IkReal x1032=IKcos(j22);
IkReal x1033=((1.0)*cj21);
IkReal x1034=((1.0)*x1032);
evalcond[0]=(x1031+new_r10);
evalcond[1]=(x1032+new_r11);
evalcond[2]=(new_r21+((sj21*x1031)));
evalcond[3]=(((cj21*x1032))+new_r00);
evalcond[4]=((((-1.0)*sj21*x1034))+new_r20);
evalcond[5]=((((-1.0)*x1031*x1033))+new_r01);
evalcond[6]=(((new_r21*sj21))+x1031+(((-1.0)*new_r01*x1033)));
evalcond[7]=((((-1.0)*x1034))+((new_r20*sj21))+(((-1.0)*new_r00*x1033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r10, new_r11);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1035=IKsin(j22);
IkReal x1036=IKcos(j22);
IkReal x1037=((1.0)*x1036);
evalcond[0]=(new_r21+((sj21*x1035)));
evalcond[1]=(x1035+(((-1.0)*new_r10)));
evalcond[2]=(x1036+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj21*x1037))+new_r20);
evalcond[4]=(((cj21*x1036))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*cj21*x1035))+(((-1.0)*new_r01)));
evalcond[6]=(((new_r21*sj21))+x1035+((cj21*new_r01)));
evalcond[7]=((((-1.0)*x1037))+((new_r20*sj21))+((cj21*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r00, new_r01);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1038=IKsin(j22);
IkReal x1039=IKcos(j22);
IkReal x1040=((1.0)*cj21);
IkReal x1041=((1.0)*x1039);
evalcond[0]=(new_r21+((sj21*x1038)));
evalcond[1]=(x1038+(((-1.0)*new_r00)));
evalcond[2]=(x1039+(((-1.0)*new_r01)));
evalcond[3]=(((cj21*x1039))+new_r10);
evalcond[4]=((((-1.0)*sj21*x1041))+new_r20);
evalcond[5]=((((-1.0)*x1038*x1040))+new_r11);
evalcond[6]=(((new_r21*sj21))+x1038+(((-1.0)*new_r11*x1040)));
evalcond[7]=(((new_r20*sj21))+(((-1.0)*new_r10*x1040))+(((-1.0)*x1041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x1042=IKsin(j22);
IkReal x1043=IKcos(j22);
IkReal x1044=((1.0)*x1043);
evalcond[0]=(x1042+new_r00);
evalcond[1]=(x1043+new_r01);
evalcond[2]=(((sj21*x1042))+new_r21);
evalcond[3]=((((-1.0)*sj21*x1044))+new_r20);
evalcond[4]=(((cj21*x1043))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*cj21*x1042))+(((-1.0)*new_r11)));
evalcond[6]=(((new_r21*sj21))+x1042+((cj21*new_r11)));
evalcond[7]=(((new_r20*sj21))+((cj21*new_r10))+(((-1.0)*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j22eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j22eval[0]=IKabs(new_r22);
if( IKabs(j22eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j22]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j22array[2], cj22array[2], sj22array[2], tempj22array[1];
int numsolutions = 0;
for(int ij22 = 0; ij22 < numroots; ++ij22)
{
IkReal htj22 = zeror[ij22];
tempj22array[0]=((2.0)*(atan(htj22)));
for(int kj22 = 0; kj22 < 1; ++kj22)
{
j22array[numsolutions] = tempj22array[kj22];
if( j22array[numsolutions] > IKPI )
{
    j22array[numsolutions]-=IK2PI;
}
else if( j22array[numsolutions] < -IKPI )
{
    j22array[numsolutions]+=IK2PI;
}
sj22array[numsolutions] = IKsin(j22array[numsolutions]);
cj22array[numsolutions] = IKcos(j22array[numsolutions]);
numsolutions++;
}
}
bool j22valid[2]={true,true};
_nj22 = 2;
for(int ij22 = 0; ij22 < numsolutions; ++ij22)
    {
if( !j22valid[ij22] )
{
    continue;
}
    j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
htj22 = IKtan(j22/2);

_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < numsolutions; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j22]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(sj21,-1);
if(!x1046.valid){
continue;
}
IkReal x1045=x1046.value;
CheckValue<IkReal> x1047=IKPowWithIntegerCheck(cj21,-1);
if(!x1047.valid){
continue;
}
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(sj20,-1);
if(!x1048.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1045)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1045*(x1047.value)*(x1048.value)*(((((-1.0)*new_r10*sj21))+((cj20*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1045))+IKsqr((x1045*(x1047.value)*(x1048.value)*(((((-1.0)*new_r10*sj21))+((cj20*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r21*x1045), (x1045*(x1047.value)*(x1048.value)*(((((-1.0)*new_r10*sj21))+((cj20*new_r21))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[12];
IkReal x1049=IKsin(j22);
IkReal x1050=IKcos(j22);
IkReal x1051=(cj20*new_r00);
IkReal x1052=((1.0)*sj20);
IkReal x1053=((1.0)*cj21);
IkReal x1054=(cj20*new_r01);
IkReal x1055=(cj21*x1050);
IkReal x1056=(cj20*x1049);
IkReal x1057=((1.0)*x1050);
evalcond[0]=(((sj21*x1049))+new_r21);
evalcond[1]=((((-1.0)*sj21*x1057))+new_r20);
evalcond[2]=(x1049+((cj20*new_r10))+(((-1.0)*new_r00*x1052)));
evalcond[3]=(x1050+((cj20*new_r11))+(((-1.0)*new_r01*x1052)));
evalcond[4]=(x1051+x1055+((new_r10*sj20)));
evalcond[5]=(x1056+((sj20*x1055))+new_r10);
evalcond[6]=(x1054+((new_r11*sj20))+(((-1.0)*x1049*x1053)));
evalcond[7]=(((cj20*x1055))+new_r00+(((-1.0)*x1049*x1052)));
evalcond[8]=((((-1.0)*cj21*x1049*x1052))+((cj20*x1050))+new_r11);
evalcond[9]=(new_r01+(((-1.0)*x1053*x1056))+(((-1.0)*x1050*x1052)));
evalcond[10]=(((new_r21*sj21))+x1049+(((-1.0)*x1053*x1054))+(((-1.0)*cj21*new_r11*x1052)));
evalcond[11]=((((-1.0)*cj21*new_r10*x1052))+(((-1.0)*x1057))+((new_r20*sj21))+(((-1.0)*x1051*x1053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(sj21,-1);
if(!x1059.valid){
continue;
}
IkReal x1058=x1059.value;
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(cj20,-1);
if(!x1060.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1058)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1058*(x1060.value)*(((((-1.0)*new_r11*sj21))+(((-1.0)*cj21*new_r21*sj20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1058))+IKsqr((x1058*(x1060.value)*(((((-1.0)*new_r11*sj21))+(((-1.0)*cj21*new_r21*sj20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((-1.0)*new_r21*x1058), (x1058*(x1060.value)*(((((-1.0)*new_r11*sj21))+(((-1.0)*cj21*new_r21*sj20))))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[12];
IkReal x1061=IKsin(j22);
IkReal x1062=IKcos(j22);
IkReal x1063=(cj20*new_r00);
IkReal x1064=((1.0)*sj20);
IkReal x1065=((1.0)*cj21);
IkReal x1066=(cj20*new_r01);
IkReal x1067=(cj21*x1062);
IkReal x1068=(cj20*x1061);
IkReal x1069=((1.0)*x1062);
evalcond[0]=(((sj21*x1061))+new_r21);
evalcond[1]=((((-1.0)*sj21*x1069))+new_r20);
evalcond[2]=(x1061+((cj20*new_r10))+(((-1.0)*new_r00*x1064)));
evalcond[3]=(x1062+((cj20*new_r11))+(((-1.0)*new_r01*x1064)));
evalcond[4]=(x1063+x1067+((new_r10*sj20)));
evalcond[5]=(x1068+((sj20*x1067))+new_r10);
evalcond[6]=(x1066+(((-1.0)*x1061*x1065))+((new_r11*sj20)));
evalcond[7]=(((cj20*x1067))+(((-1.0)*x1061*x1064))+new_r00);
evalcond[8]=(((cj20*x1062))+new_r11+(((-1.0)*cj21*x1061*x1064)));
evalcond[9]=((((-1.0)*x1062*x1064))+new_r01+(((-1.0)*x1065*x1068)));
evalcond[10]=(((new_r21*sj21))+x1061+(((-1.0)*cj21*new_r11*x1064))+(((-1.0)*x1065*x1066)));
evalcond[11]=((((-1.0)*x1063*x1065))+(((-1.0)*cj21*new_r10*x1064))+((new_r20*sj21))+(((-1.0)*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
CheckValue<IkReal> x1070 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(IKsign(sj21),-1);
if(!x1071.valid){
continue;
}
j22array[0]=((-1.5707963267949)+(x1070.value)+(((1.5707963267949)*(x1071.value))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[12];
IkReal x1072=IKsin(j22);
IkReal x1073=IKcos(j22);
IkReal x1074=(cj20*new_r00);
IkReal x1075=((1.0)*sj20);
IkReal x1076=((1.0)*cj21);
IkReal x1077=(cj20*new_r01);
IkReal x1078=(cj21*x1073);
IkReal x1079=(cj20*x1072);
IkReal x1080=((1.0)*x1073);
evalcond[0]=(((sj21*x1072))+new_r21);
evalcond[1]=((((-1.0)*sj21*x1080))+new_r20);
evalcond[2]=(x1072+((cj20*new_r10))+(((-1.0)*new_r00*x1075)));
evalcond[3]=(x1073+((cj20*new_r11))+(((-1.0)*new_r01*x1075)));
evalcond[4]=(x1078+x1074+((new_r10*sj20)));
evalcond[5]=(x1079+((sj20*x1078))+new_r10);
evalcond[6]=(x1077+((new_r11*sj20))+(((-1.0)*x1072*x1076)));
evalcond[7]=(((cj20*x1078))+(((-1.0)*x1072*x1075))+new_r00);
evalcond[8]=(((cj20*x1073))+(((-1.0)*cj21*x1072*x1075))+new_r11);
evalcond[9]=((((-1.0)*x1073*x1075))+(((-1.0)*x1076*x1079))+new_r01);
evalcond[10]=(((new_r21*sj21))+x1072+(((-1.0)*x1076*x1077))+(((-1.0)*cj21*new_r11*x1075)));
evalcond[11]=((((-1.0)*x1074*x1076))+(((-1.0)*cj21*new_r10*x1075))+((new_r20*sj21))+(((-1.0)*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j18;
vinfos[0].indices[0] = _ij18[0];
vinfos[0].indices[1] = _ij18[1];
vinfos[0].maxsolutions = _nj18;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j19;
vinfos[1].indices[0] = _ij19[0];
vinfos[1].indices[1] = _ij19[1];
vinfos[1].maxsolutions = _nj19;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j20;
vinfos[2].indices[0] = _ij20[0];
vinfos[2].indices[1] = _ij20[1];
vinfos[2].maxsolutions = _nj20;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j21;
vinfos[3].indices[0] = _ij21[0];
vinfos[3].indices[1] = _ij21[1];
vinfos[3].maxsolutions = _nj21;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j22;
vinfos[4].indices[0] = _ij22[0];
vinfos[4].indices[1] = _ij22[1];
vinfos[4].maxsolutions = _nj22;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j23;
vinfos[5].indices[0] = _ij23[0];
vinfos[5].indices[1] = _ij23[1];
vinfos[5].maxsolutions = _nj23;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j24;
vinfos[6].indices[0] = _ij24[0];
vinfos[6].indices[1] = _ij24[1];
vinfos[6].maxsolutions = _nj24;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - victor (de36c7cd1bbabcfe9a97264b5803b99a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
