servo:
################################ GENERAL CONFIG ################################

  thread_priority: {
    type: int,
    read_only: true,
    default_value: 40,
    description: "This value is used when configuring the servo loop thread to use SCHED_FIFO scheduling \
                  We use a slightly lower priority than the ros2_control default in order to reduce jitter \
                  Reference: https://man7.org/linux/man-pages/man2/sched_setparam.2.html",
    validation: {
      gt_eq<>: 0
    }
  }

  publish_period: {
    type: double,
    read_only: true,
    default_value: 0.01,
    description: " 1 / (Nominal publish rate) [seconds]",
    validation: {
      gt<>: 0.0
    }
  }

  max_expected_latency: {
    type: double,
    read_only: true,
    default_value: 0.1,
    description: "Maximum expected latency between generating a servo \
                  command and the controller receiving it [seconds].",
    validation: {
      gt<>: 0.0
    }
  }

  move_group_name: {
    type: string,
    read_only: true,
    description: "The name of the moveit move_group of your robot \
                  This parameter does not have a default value and \
                  must be passed to the node during launch time."
  }

  active_subgroup: {
    type: string,
    default_value: "",
    description: "This parameter can be used to switch online to actuating a subgroup of the move group. \
    If it is empty, the full move group is actuated."
  }

############################# INCOMING COMMAND SETTINGS ########################
  pose_command_in_topic: {
    type: string,
    read_only: true,
    default_value: "~/pose_target_cmds",
    description: "The topic on which servo will receive the pose commands"
  }

  cartesian_command_in_topic: {
    type: string,
    read_only: true,
    default_value: "~/delta_twist_cmds",
    description: "The topic on which servo will receive the twist commands"
  }

  joint_command_in_topic: {
    type: string,
    read_only: true,
    default_value: "~/delta_joint_cmds",
    description: "The topic on which servo will receive the joint jog commands"
  }

  command_in_type: {
    type: string,
    default_value: "unitless",
    description: "The unit of the incoming command. \
                  unitless commands are in the range [-1:1] as if from joystick \
                  speed_units are in m/s and rad/s",
    validation: {
      one_of<>: [["unitless", "speed_units"]]
    }
  }

  scale:
    linear: {
      type: double,
      default_value: 0.4,
      description: "Max linear velocity. Unit is [m/s]. Only used for Cartesian commands."
    }
    rotational: {
      type: double,
      default_value: 0.8,
      description: "Max angular velocity. Unit is [rad/s]. Only used for Cartesian commands."
    }
    joint: {
      type: double,
      default_value: 0.5,
      description: "Max joint angular/linear velocity. Only used for joint commands on joint_command_in_topic."
    }


  incoming_command_timeout: {
    type: double,
    default_value: 0.1,
    description: "Commands will be discarded if it is older than the timeout.\
                   Important because ROS may drop some messages."
  }

################################ TWIST SETTINGS #################################

  apply_twist_commands_about_ee_frame: {
    type: bool,
    default_value: true,
    description: "If true, the angular velocity specified in the twist command is applied about the ee frame axes \
                  if false, the twist computed will include the linear component from rotation of ee frame about the planning frame, \
                  due to the existence of a lever between the two frames."
  }

############################ POSE TRACKING SETTINGS #############################

  pose_tracking:
    linear_tolerance: {
        type: double,
        default_value: 0.001,
        description: "The allowable linear error when tracking a pose.",
        validation: {
          gt<>: 0.0
        }
    }

    angular_tolerance: {
        type: double,
        default_value: 0.01,
        description: "The allowable angular error when tracking a pose.",
        validation: {
          gt<>: 0.0
        }
    }

############################## OUTGOING COMMAND SETTINGS #######################

  status_topic: {
    type: string,
    read_only: true,
    default_value: "~/status",
    description: "The topic to which the status will be published"
  }

  command_out_topic: {
    type: string,
    read_only: true,
    default_value: "/TODO_FIXME/joint_trajectory",
    description: "The topic on which servo will publish the joint trajectory \
                  Change this to the topic your controller requires."
  }

  command_out_type: {
    type: string,
    read_only: true,
    default_value: "trajectory_msgs/JointTrajectory",
    description: "The type of command that servo will publish",
    validation: {
      one_of<>: [["trajectory_msgs/JointTrajectory", "std_msgs/Float64MultiArray"]]
    }
  }

  publish_joint_positions: {
    type: bool,
    default_value: true,
    description: "If true servo will publish joint positions in the output command"
  }

  publish_joint_velocities: {
    type: bool,
    default_value: true,
    description: "If true servo will publish joint velocities in the output command"
  }

  publish_joint_accelerations: {
    type: bool,
    default_value: false,
    description: "If true servo will publish joint accelerations in the output command"
  }

############################## PLANNING SCENE MONITOR ##########################

  monitored_planning_scene_topic: {
    type: string,
    read_only: true,
    default_value: "/planning_scene",
    description: "The name of the planning scene topic. \
                  planning_scene_monitor::PlanningSceneMonitor::DEFAULT_PLANNING_SCENE_TOPIC"
  }

  joint_topic: {
    type: string,
    read_only: true,
    default_value: "/joint_states",
    description: "The topic on which joint states can be monitored"
  }

  check_octomap_collisions: {
    type: bool,
    read_only: true,
    default_value: false,
    description: "If true, the planning scene monitor also listens to octomap updates for collision checking."
  }

  is_primary_planning_scene_monitor: {
    type: bool,
    read_only: true,
    default_value: true,
    description: "If is_primary_planning_scene_monitor is set to true, \
                  the Servo server's PlanningScene advertises the /get_planning_scene service, \
                  which other nodes can use to get information about the planning environment. \
                  If a different node in your system will be publishing the planning scene, \
                  this should be set to false"
  }

############################### SMOOTHING PLUGIN ###############################

  use_smoothing: {
    type: bool,
    read_only: true,
    default_value: true,
    description: "Enables the use of smoothing plugins for joint trajectory smoothing"
  }

  smoothing_filter_plugin_name: {
    type: string,
    read_only: true,
    default_value: "online_signal_smoothing::ButterworthFilterPlugin",
    description: "The name of the smoothing plugin to be used"
  }

############################# COLLISION MONITOR ################################

  check_collisions: {
    type: bool,
    default_value: true,
    description: "If true, servo will check for collision using the planning scene monitor."
  }

  self_collision_proximity_threshold: {
    type: double,
    default_value: 0.01,
    description: "Start decelerating when a self-collision is this far [m]",
    validation: {
      gt<>: 0.0
    }
  }

  scene_collision_proximity_threshold: {
    type: double,
    default_value: 0.02,
    description: "Start decelerating when a collision is this far [m]",
    validation: {
      gt<>: 0.0
    }
  }

  collision_check_rate: {
    type: double,
    default_value: 10.0,
    description: "[Hz] Collision-checking can easily bog down a CPU if done too often. \
                  Collision checking begins slowing down when nearer than a specified distance.",
    validation: {
      gt_eq<>: 0.0
    }
  }

############################# SINGULARITY CHECKING #############################

  lower_singularity_threshold: {
    type: double,
    default_value: 17.0,
    description: "Start decelerating when the condition number hits this (close to singularity)",
    validation: {
      gt<>: 0.0
    }
  }

  hard_stop_singularity_threshold: {
    type: double,
    default_value: 30.0,
    description: "Stop when the condition number hits this",
    validation: {
      gt<>: 0.0,
    }
  }

  leaving_singularity_threshold_multiplier: {
    type: double,
    default_value: 2.0,
    description: "When 'lower_singularity_threshold' is triggered, \
                  but we are moving away from singularity, move this many times faster \
                  than if we were moving further into singularity",
    validation: {
      gt<>: 0.0
    }
  }

  singularity_step_scale: {
    type: double,
    default_value: 0.01,
    description: "The test vector towards singularity is scaled by this factor during singularity check",
    validation: {
      gt<>: 0.0
    }
  }

############################### JOINT LIMITING #################################

  halt_all_joints_in_joint_mode: {
    type: bool,
    default_value: true,
    description: "Halt all joints in joint mode, else halt only the joints at their limit"
  }

  halt_all_joints_in_cartesian_mode: {
    type: bool,
    default_value: true,
    description: "Halt all joints in cartesian mode, else halt only the joints at their limit"
  }

  joint_limit_margins: {
    type: double_array,
    default_value: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
    description: "Added as a buffer to joint limits [radians]. If moving quickly, make this larger.",
    validation: {
      lower_element_bounds<>: 0.0
    }
  }

  override_velocity_scaling_factor: {
    type: double,
    default_value: 0.0,
    description: "Scaling factor when servo overrides the velocity (eg: near singularities)",
    validation: {
      bounds<>: [0.0, 1.0]
    }
  }
